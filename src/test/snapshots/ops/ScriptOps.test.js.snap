// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScriptOps createScriptExportTemplate() 1: Create script export template 1`] = `
{
  "meta": Any<Object>,
  "script": {},
}
`;

exports[`ScriptOps exportScript() 1: Export script by id c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScriptByName() 1: Export script by name FrodoTestScript1 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScripts() 1: Export all scripts 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "01e1a3c0-038b-4c16-956a-6c9d89328cff": {
      "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for a scripted decision node",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Authentication Tree Decision Node Script",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "outcome = "true";",
      ],
    },
    "10643e95-873a-4ec0-b713-a7f56760d179": {
      "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript4",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "1244e639-4a31-401d-ab61-d75133d8dc9e": {
      "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Instagram",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Instagram Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("username", rawProfile.username)))",
      ],
    },
    "157298c0-7d31-4059-a95b-eeb08473b7e5": {
      "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for client side Device Id (Match) Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Device Id (Match) - Client Side",
      "script": [
        "var fontDetector = (function () {",
        "    /**",
        "     * JavaScript code to detect available availability of a",
        "     * particular font in a browser using JavaScript and CSS.",
        "     *",
        "     * Author : Lalit Patel",
        "     * Website: http://www.lalit.org/lab/javascript-css-font-detect/",
        "     * License: Apache Software License 2.0",
        "     *          http://www.apache.org/licenses/LICENSE-2.0",
        "     * Version: 0.15 (21 Sep 2009)",
        "     *          Changed comparision font to default from sans-default-default,",
        "     *          as in FF3.0 font of child element didn't fallback",
        "     *          to parent element if the font is missing.",
        "     * Version: 0.2 (04 Mar 2012)",
        "     *          Comparing font against all the 3 generic font families ie,",
        "     *          'monospace', 'sans-serif' and 'sans'. If it doesn't match all 3",
        "     *          then that font is 100% not available in the system",
        "     * Version: 0.3 (24 Mar 2012)",
        "     *          Replaced sans with serif in the list of baseFonts",
        "     */",
        "    /*",
        "     * Portions Copyrighted 2013 ForgeRock AS.",
        "     */",
        "    var detector = {}, baseFonts, testString, testSize, h, s, defaultWidth = {}, defaultHeight = {}, index;",
        "",
        "    // a font will be compared against all the three default fonts.",
        "    // and if it doesn't match all 3 then that font is not available.",
        "    baseFonts = ['monospace', 'sans-serif', 'serif'];",
        "",
        "    //we use m or w because these two characters take up the maximum width.",
        "    // And we use a LLi so that the same matching fonts can get separated",
        "    testString = "mmmmmmmmmmlli";",
        "",
        "    //we test using 72px font size, we may use any size. I guess larger the better.",
        "    testSize = '72px';",
        "",
        "    h = document.getElementsByTagName("body")[0];",
        "",
        "    // create a SPAN in the document to get the width of the text we use to test",
        "    s = document.createElement("span");",
        "    s.style.fontSize = testSize;",
        "    s.innerHTML = testString;",
        "    for (index in baseFonts) {",
        "        //get the default width for the three base fonts",
        "        s.style.fontFamily = baseFonts[index];",
        "        h.appendChild(s);",
        "        defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font",
        "        defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font",
        "        h.removeChild(s);",
        "    }",
        "",
        "    detector.detect = function(font) {",
        "        var detected = false, index, matched;",
        "        for (index in baseFonts) {",
        "            s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.",
        "            h.appendChild(s);",
        "            matched = (s.offsetWidth !== defaultWidth[baseFonts[index]] || s.offsetHeight !== defaultHeight[baseFonts[index]]);",
        "            h.removeChild(s);",
        "            detected = detected || matched;",
        "        }",
        "        return detected;",
        "    };",
        "",
        "    return detector;",
        "}());",
        "/*",
        " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.",
        " *",
        " * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved",
        " *",
        " * The contents of this file are subject to the terms",
        " * of the Common Development and Distribution License",
        " * (the License). You may not use this file except in",
        " * compliance with the License.",
        " *",
        " * You can obtain a copy of the License at",
        " * https://opensso.dev.java.net/public/CDDLv1.0.html or",
        " * opensso/legal/CDDLv1.0.txt",
        " * See the License for the specific language governing",
        " * permission and limitations under the License.",
        " *",
        " * When distributing Covered Code, include this CDDL",
        " * Header Notice in each file and include the License file",
        " * at opensso/legal/CDDLv1.0.txt.",
        " * If applicable, add the following below the CDDL Header,",
        " * with the fields enclosed by brackets [] replaced by",
        " * your own identifying information:",
        " * "Portions Copyrighted [year] [name of copyright owner]"",
        " *",
        " */",
        "/*",
        " * Portions Copyrighted 2013 Syntegrity.",
        " * Portions Copyrighted 2013-2014 ForgeRock AS.",
        " */",
        "",
        "var collectScreenInfo = function () {",
        "        var screenInfo = {};",
        "        if (screen) {",
        "            if (screen.width) {",
        "                screenInfo.screenWidth = screen.width;",
        "            }",
        "",
        "            if (screen.height) {",
        "                screenInfo.screenHeight = screen.height;",
        "            }",
        "",
        "            if (screen.pixelDepth) {",
        "                screenInfo.screenColourDepth = screen.pixelDepth;",
        "            }",
        "        } else {",
        "            console.warn("Cannot collect screen information. screen is not defined.");",
        "        }",
        "        return screenInfo;",
        "    },",
        "    collectTimezoneInfo = function () {",
        "        var timezoneInfo =  {}, offset = new Date().getTimezoneOffset();",
        "",
        "        if (offset) {",
        "            timezoneInfo.timezone = offset;",
        "        } else {",
        "            console.warn("Cannot collect timezone information. timezone is not defined.");",
        "        }",
        "",
        "        return timezoneInfo;",
        "    },",
        "    collectBrowserPluginsInfo = function () {",
        "",
        "        if (navigator && navigator.plugins) {",
        "            var pluginsInfo = {}, i, plugins = navigator.plugins;",
        "            pluginsInfo.installedPlugins = "";",
        "",
        "            for (i = 0; i < plugins.length; i++) {",
        "                pluginsInfo.installedPlugins = pluginsInfo.installedPlugins + plugins[i].filename + ";";",
        "            }",
        "",
        "            return pluginsInfo;",
        "        } else {",
        "            console.warn("Cannot collect browser plugin information. navigator.plugins is not defined.");",
        "            return {};",
        "        }",
        "",
        "    },",
        "// Getting geolocation takes some time and is done asynchronously, hence need a callback which is called once geolocation is retrieved.",
        "    collectGeolocationInfo = function (callback) {",
        "        var geolocationInfo = {},",
        "            successCallback = function(position) {",
        "                geolocationInfo.longitude = position.coords.longitude;",
        "                geolocationInfo.latitude = position.coords.latitude;",
        "                callback(geolocationInfo);",
        "            }, errorCallback = function(error) {",
        "                console.warn("Cannot collect geolocation information. " + error.code + ": " + error.message);",
        "                callback(geolocationInfo);",
        "            };",
        "        if (navigator && navigator.geolocation) {",
        "            // NB: If user chooses 'Not now' on Firefox neither callback gets called",
        "            //     https://bugzilla.mozilla.org/show_bug.cgi?id=675533",
        "            navigator.geolocation.getCurrentPosition(successCallback, errorCallback);",
        "        } else {",
        "            console.warn("Cannot collect geolocation information. navigator.geolocation is not defined.");",
        "            callback(geolocationInfo);",
        "        }",
        "    },",
        "    collectBrowserFontsInfo = function () {",
        "        var fontsInfo = {}, i, fontsList = ["cursive","monospace","serif","sans-serif","fantasy","default","Arial","Arial Black",",
        "            "Arial Narrow","Arial Rounded MT Bold","Bookman Old Style","Bradley Hand ITC","Century","Century Gothic",",
        "            "Comic Sans MS","Courier","Courier New","Georgia","Gentium","Impact","King","Lucida Console","Lalit",",
        "            "Modena","Monotype Corsiva","Papyrus","Tahoma","TeX","Times","Times New Roman","Trebuchet MS","Verdana",",
        "            "Verona"];",
        "        fontsInfo.installedFonts = "";",
        "",
        "        for (i = 0; i < fontsList.length; i++) {",
        "            if (fontDetector.detect(fontsList[i])) {",
        "                fontsInfo.installedFonts = fontsInfo.installedFonts + fontsList[i] + ";";",
        "            }",
        "        }",
        "        return fontsInfo;",
        "    },",
        "    devicePrint = {};",
        "",
        "devicePrint.screen = collectScreenInfo();",
        "devicePrint.timezone = collectTimezoneInfo();",
        "devicePrint.plugins = collectBrowserPluginsInfo();",
        "devicePrint.fonts = collectBrowserFontsInfo();",
        "",
        "if (navigator.userAgent) {",
        "    devicePrint.userAgent = navigator.userAgent;",
        "}",
        "if (navigator.appName) {",
        "    devicePrint.appName = navigator.appName;",
        "}",
        "if (navigator.appCodeName) {",
        "    devicePrint.appCodeName = navigator.appCodeName;",
        "}",
        "if (navigator.appVersion) {",
        "    devicePrint.appVersion = navigator.appVersion;",
        "}",
        "if (navigator.appMinorVersion) {",
        "    devicePrint.appMinorVersion = navigator.appMinorVersion;",
        "}",
        "if (navigator.buildID) {",
        "    devicePrint.buildID = navigator.buildID;",
        "}",
        "if (navigator.platform) {",
        "    devicePrint.platform = navigator.platform;",
        "}",
        "if (navigator.cpuClass) {",
        "    devicePrint.cpuClass = navigator.cpuClass;",
        "}",
        "if (navigator.oscpu) {",
        "    devicePrint.oscpu = navigator.oscpu;",
        "}",
        "if (navigator.product) {",
        "    devicePrint.product = navigator.product;",
        "}",
        "if (navigator.productSub) {",
        "    devicePrint.productSub = navigator.productSub;",
        "}",
        "if (navigator.vendor) {",
        "    devicePrint.vendor = navigator.vendor;",
        "}",
        "if (navigator.vendorSub) {",
        "    devicePrint.vendorSub = navigator.vendorSub;",
        "}",
        "if (navigator.language) {",
        "    devicePrint.language = navigator.language;",
        "}",
        "if (navigator.userLanguage) {",
        "    devicePrint.userLanguage = navigator.userLanguage;",
        "}",
        "if (navigator.browserLanguage) {",
        "    devicePrint.browserLanguage = navigator.browserLanguage;",
        "}",
        "if (navigator.systemLanguage) {",
        "    devicePrint.systemLanguage = navigator.systemLanguage;",
        "}",
        "",
        "// Attempt to collect geo-location information and return this with the data collected so far.",
        "// Otherwise, if geo-location fails or takes longer than 30 seconds, auto-submit the data collected so far.",
        "autoSubmitDelay = 30000;",
        "output.value = JSON.stringify(devicePrint);",
        "collectGeolocationInfo(function(geolocationInfo) {",
        "    devicePrint.geolocation = geolocationInfo;",
        "    output.value = JSON.stringify(devicePrint);",
        "    submit();",
        "});",
      ],
    },
    "1d475815-72cb-42eb-aafd-4026989d28a7": {
      "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for Social Identity Provider Profile Transformation",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Social Identity Provider Profile Transformation Script",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/* Default Social Identity Provider Profile Transformation script to use as a template for new scripts */",
      ],
    },
    "1f389a3d-21cf-417c-a6d3-42ea620071f0": {
      "_id": "1f389a3d-21cf-417c-a6d3-42ea620071f0",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Internal OIDC Claims script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRock Internal: OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "23143919-6b78-40c3-b25e-beca19b229e0": {
      "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS)",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("GitHub rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "2997bd4d-14be-4dc6-8701-27f08d10b8b7": {
      "_id": "2997bd4d-14be-4dc6-8701-27f08d10b8b7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Profile Normalization Script for idddataweb",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "iddataweb Profile Normalization",
      "script": [
        "/*/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS. Not for Production use. ",
        " * Modified by Stephen Payne",
        " */",
        "/* Social Identity Provider Profile Transformation script for ID DataWeb */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.error("iddataweb_Social Identity Provider Profile Transformation script: Start");",
        "userName = sharedState.get("objectAttributes").get("mail");",
        "logger.error("iddataweb_Social Identity Provider Profile Transformation script: userName" + userName );",
        "username = userName;",
        "sharedState.put("userName", userName);",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString() + " " + rawProfile.acquiredAttributes_AcquiredFullName_lname.asString().toLowerCase().capitalize() ),",
        "        field("givenName", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString().toLowerCase().capitalize() ),",
        "        field("familyName", rawProfile.acquiredAttributes_AcquiredFullName_lname.asString().toLowerCase().capitalize() ),",
        "        field("postalAddress", rawProfile.acquiredAttributes_AcquiredAddress_address),",
        "        field("addressLocality", rawProfile.acquiredAttributes_AcquiredAddress_locality),",
        "        field("addressRegion", rawProfile.acquiredAttributes_AcquiredAddress_administrative_area_level_1),",
        "        field("postalCode", rawProfile.acquiredAttributes_AcquiredAddress_postal_code),",
        "        field("country", rawProfile.acquiredAttributes_AcquiredAddress_country),",
        "        field("driversLicense", rawProfile.acquiredAttributes_AcquiredDriversLicenseNumber_acquiredDriversLicenseNumber),",
        "        field("driversLicenseIssuer", rawProfile.acquiredAttributes_DriversLicenseIssuerCode_DriversLicenseIssuerCode),",
        "          field("DOB", rawProfile.acquiredAttributes_AcquiredDOB_month.asString() + "/" + rawProfile.acquiredAttributes_AcquiredDOB_day.asString() + "/" + rawProfile.acquiredAttributes_AcquiredDOB_year.asString() ),",
        "",
        "        field("IDWScore", rawProfile.acquiredAttributes_IDWScore),",
        "        field("policyDecision", rawProfile.policyDecision_conclusion),",
        "        field("phone", rawProfile.userAttributes_InternationalTelephone_dialCode.asString() + rawProfile.userAttributes_InternationalTelephone_telephone.asString()),",
        "        field("username", userName )",
        "       //field("username", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString() + "." + rawProfile.acquiredAttributes_AcquiredFullName_lname.asString() )",
        "",
        "   )",
        ")",
        "",
      ],
    },
    "312e951f-70c5-49d2-a9ae-93aef909d5df": {
      "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Salesforce",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Salesforce Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.user_id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.zoneInfo)))",
      ],
    },
    "3156d7e9-1589-4ffb-a659-37a1647ee03d": {
      "_id": "3156d7e9-1589-4ffb-a659-37a1647ee03d",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Converts a normalized social profile coming from ADFS into a managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized ADFS Profile to Managed User",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("userName", normalizedProfile.username)))",
        "",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "managedUser.put("accountStatus", (normalizedProfile.roles.asString() == "fidc-volker-dev-admins") ? 'Active' : 'Inactive')",
        "",
        "// if the givenName and familyName is null or empty",
        "// then add a boolean flag to the shared state to indicate names are not present",
        "// this could be used elsewhere",
        "// for eg. this could be used in a scripted decision node to by-pass patching",
        "// the user object with blank values when givenName  and familyName is not present",
        "boolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())",
        "boolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())",
        "sharedState.put("nameEmptyOrNull", noGivenName && noFamilyName)",
        "",
        "return managedUser",
        "",
      ],
    },
    "36863ffb-40ec-48b9-94b1-9a99f71cc3b5": {
      "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OIDC claims",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "39c08084-1238-43e8-857f-2e11005eac49": {
      "_id": "39c08084-1238-43e8-857f-2e11005eac49",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OAuth2 Access Token Modification",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2021 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
      ],
    },
    "3b2f6836-184c-4ee9-8a1d-557cb01837a5": {
      "_id": "3b2f6836-184c-4ee9-8a1d-557cb01837a5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript3",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "3d97c436-42c0-4dd0-a571-ea6f34f752b3": {
      "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Itsme",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Itsme Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("username", rawProfile.email),",
        "        field("email", rawProfile.email)))",
        "return managedUser",
      ],
    },
    "403cf226-6051-4368-8b72-9ba14f9a5140": {
      "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from VKontakte",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "VKontakte Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.first_name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.photo_50),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "424da748-82cc-4b54-be6f-82bd64d82a74": {
      "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Yahoo",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Yahoo Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.locale)))",
      ],
    },
    "472534ec-a25f-468d-a606-3fb1935190df": {
      "_id": "472534ec-a25f-468d-a606-3fb1935190df",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from WeChat",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "WeChat Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.openid),",
        "        field("displayName", rawProfile.nickname),",
        "        field("photoUrl", rawProfile.headimgurl),",
        "        field("username", rawProfile.nickname)))",
      ],
    },
    "484e6246-dbc6-4288-97e6-54e55431402e": {
      "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Apple",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Apple Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " *",
        " * In some common default configurations, the following keys are required to be not empty:",
        " * username, givenName, familyName, email.",
        " *",
        " * From RFC4517: A value of the Directory String syntax is a string of one or more",
        " * arbitrary characters from the Universal Character Set (UCS).",
        " * A zero-length character string is not permitted.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "String email = "change@me.com"",
        "String subjectId = rawProfile.sub",
        "String firstName = " "",
        "String lastName = " "",
        "String username = subjectId",
        "String name",
        "",
        "if (rawProfile.isDefined("email") && rawProfile.email.isNotNull()){ // User can elect to not share their email",
        "    email = rawProfile.email.asString()",
        "    username = email",
        "}",
        "if (rawProfile.isDefined("name") && rawProfile.name.isNotNull()) {",
        "    if (rawProfile.name.isDefined("firstName") && rawProfile.name.firstName.isNotNull()) {",
        "        firstName = rawProfile.name.firstName.asString()",
        "    }",
        "    if (rawProfile.name.isDefined("lastName") && rawProfile.name.lastName.isNotNull()) {",
        "        lastName = rawProfile.name.lastName.asString()",
        "    }",
        "}",
        "",
        "name = (firstName?.trim() ? firstName : "") + (lastName?.trim() ? ((firstName?.trim() ? " " : "") + lastName) : "")",
        "name =  (!name?.trim()) ? " " : name",
        "",
        "return json(object(",
        "        field("id", subjectId),",
        "        field("displayName", name),",
        "        field("email", email),",
        "        field("givenName", firstName),",
        "        field("familyName", lastName),",
        "        field("username", username)))",
      ],
    },
    "5561a45f-bf00-4ec5-bab4-f069bac9a38b": {
      "_id": "5561a45f-bf00-4ec5-bab4-f069bac9a38b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Copy an OTP generated by the "HOTP Generator" node to the IDM profile shared state so it can be patched to the user profile.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CopyOTPToObjectAttributes",
      "script": [
        "/* CopyOTPToObjectAttributes",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Copy an OTP generated by the "HOTP Generator" node to the IDM profile ",
        " * shared state so it can be patched to the user profile.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "if (sharedState.get("objectAttributes")) {",
        "    sharedState.get("objectAttributes").put("description", sharedState.get("oneTimePassword"))",
        "}",
        "else {",
        "    sharedState.put("objectAttributes", {description: sharedState.get("oneTimePassword")});",
        "}",
        "outcome = "true";",
      ],
    },
    "58c824ae-84ed-4724-82cd-db128fc3f6c": {
      "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Converts a normalized social profile into a managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized Profile to Managed User",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("userName", normalizedProfile.username)))",
        "",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "",
        "// if the givenName and familyName is null or empty",
        "// then add a boolean flag to the shared state to indicate names are not present",
        "// this could be used elsewhere",
        "// for eg. this could be used in a scripted decision node to by-pass patching",
        "// the user object with blank values when givenName  and familyName is not present",
        "boolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())",
        "boolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())",
        "sharedState.put("nameEmptyOrNull", noGivenName && noFamilyName)",
        "",
        "return managedUser",
        "",
      ],
    },
    "58d29080-4563-480b-89bb-1e7719776a21": {
      "_id": "58d29080-4563-480b-89bb-1e7719776a21",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Google",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Google Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.locale)))",
      ],
    },
    "5b29c5b7-b161-4a42-a41f-d6c85316b951": {
      "_id": "5b29c5b7-b161-4a42-a41f-d6c85316b951",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "}",
      ],
    },
    "6325cf19-a49b-471e-8d26-7e4df76df0e2": {
      "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30": {
      "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Amazon",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Amazon Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.user_id),",
        "        field("displayName", rawProfile.name),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "703dab1a-1921-4981-98dd-b8e5349d8548": {
      "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
      "context": "AUTHENTICATION_SERVER_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for server side Device Id (Match) Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Device Id (Match) - Server Side",
      "script": [
        "/*",
        " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.",
        " *",
        " * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved",
        " *",
        " * The contents of this file are subject to the terms",
        " * of the Common Development and Distribution License",
        " * (the License). You may not use this file except in",
        " * compliance with the License.",
        " *",
        " * You can obtain a copy of the License at",
        " * https://opensso.dev.java.net/public/CDDLv1.0.html or",
        " * opensso/legal/CDDLv1.0.txt",
        " * See the License for the specific language governing",
        " * permission and limitations under the License.",
        " *",
        " * When distributing Covered Code, include this CDDL",
        " * Header Notice in each file and include the License file",
        " * at opensso/legal/CDDLv1.0.txt.",
        " * If applicable, add the following below the CDDL Header,",
        " * with the fields enclosed by brackets [] replaced by",
        " * your own identifying information:",
        " * "Portions Copyrighted [year] [name of copyright owner]"",
        " *",
        " */",
        "/*",
        " * Portions Copyrighted 2013 Syntegrity.",
        " * Portions Copyrighted 2013-2018 ForgeRock AS.",
        " */",
        "",
        "var ScalarComparator = {}, ScreenComparator = {}, MultiValueComparator = {}, UserAgentComparator = {}, GeolocationComparator = {};",
        "",
        "var config = {",
        "    profileExpiration: 30,              //in days",
        "    maxProfilesAllowed: 5,",
        "    maxPenaltyPoints: 0,",
        "    attributes: {",
        "        screen: {",
        "            required: true,",
        "            comparator: ScreenComparator,",
        "            args: {",
        "                penaltyPoints: 50",
        "            }",
        "        },",
        "        plugins: {",
        "            installedPlugins: {",
        "                required: false,",
        "                comparator: MultiValueComparator,",
        "                args: {",
        "                    maxPercentageDifference: 10,",
        "                    maxDifferences: 5,",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        fonts: {",
        "            installedFonts: {",
        "                required: false,",
        "                comparator: MultiValueComparator,",
        "                args: {",
        "                    maxPercentageDifference: 10,",
        "                    maxDifferences: 5,",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        timezone: {",
        "            timezone: {",
        "                required: false,",
        "                comparator: ScalarComparator,",
        "                args: {",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        userAgent: {",
        "            required: true,",
        "            comparator: UserAgentComparator,",
        "            args: {",
        "                ignoreVersion: true,",
        "                penaltyPoints: 100",
        "            }",
        "        },",
        "        geolocation: {",
        "            required: false,",
        "            comparator: GeolocationComparator,",
        "            args: {",
        "                allowedRange: 100,            //in miles",
        "                penaltyPoints: 100",
        "            }",
        "        }",
        "    }",
        "};",
        "",
        "//---------------------------------------------------------------------------//",
        "//                           Comparator functions                            //",
        "//---------------------------------------------------------------------------//",
        "",
        "var all, any, calculateDistance, calculateIntersection, calculatePercentage, nullOrUndefined, splitAndTrim,",
        "    undefinedLocation;",
        "",
        "// ComparisonResult",
        "",
        "/**",
        " * Constructs an instance of a ComparisonResult with the given penalty points.",
        " *",
        " * @param penaltyPoints (Number) The penalty points for the comparison (defaults to 0).",
        " * @param additionalInfoInCurrentValue (boolean) Whether the current value contains more information",
        " *                                               than the stored value (defaults to false).",
        " */",
        "function ComparisonResult() {",
        "",
        "    var penaltyPoints = 0,",
        "        additionalInfoInCurrentValue = false;",
        "",
        "    if (arguments[0] !== undefined && arguments[1] !== undefined) {",
        "        penaltyPoints = arguments[0];",
        "        additionalInfoInCurrentValue = arguments[1];",
        "    }",
        "",
        "    if (arguments[0] !== undefined && arguments[1] === undefined) {",
        "        if (typeof(arguments[0]) === "boolean") {",
        "            additionalInfoInCurrentValue = arguments[0];",
        "        } else {",
        "            penaltyPoints = arguments[0];",
        "        }",
        "    }",
        "",
        "    this.penaltyPoints = penaltyPoints;",
        "    this.additionalInfoInCurrentValue = additionalInfoInCurrentValue;",
        "",
        "}",
        "",
        "ComparisonResult.ZERO_PENALTY_POINTS = new ComparisonResult(0);",
        "",
        "/**",
        " * Static method for functional programming.",
        " *",
        " * @return boolean true if comparisonResult.isSuccessful().",
        " */",
        "ComparisonResult.isSuccessful =  function(comparisonResult) {",
        "    return comparisonResult.isSuccessful();",
        "};",
        "",
        "",
        "/**",
        " * Static method for functional programming.",
        " *",
        " * @return boolean true if comparisonResult.additionalInfoInCurrentValue.",
        " */",
        "ComparisonResult.additionalInfoInCurrentValue =  function(comparisonResult) {",
        "    return comparisonResult.additionalInfoInCurrentValue;",
        "};",
        "",
        "/**",
        " * Comparison function that can be provided as an argument to array.sort",
        " */",
        "ComparisonResult.compare = function(first, second) {",
        "    if (nullOrUndefined(first) && nullOrUndefined(second)) {",
        "        return 0;",
        "    } else if (nullOrUndefined(first)) {",
        "        return -1;",
        "    } else if (nullOrUndefined(second)) {",
        "        return 1;",
        "    } else {",
        "        if (first.penaltyPoints !== second.penaltyPoints) {",
        "            return first.penaltyPoints - second.penaltyPoints;",
        "        } else {",
        "            return (first.additionalInfoInCurrentValue ? 1 : 0) - (second.additionalInfoInCurrentValue ? 1 : 0);",
        "        }",
        "    }",
        "};",
        "",
        "/**",
        " * Amalgamates the given ComparisonResult into this ComparisonResult.",
        " *",
        " * @param comparisonResult The ComparisonResult to include.",
        " */",
        "ComparisonResult.prototype.addComparisonResult = function(comparisonResult) {",
        "    this.penaltyPoints += comparisonResult.penaltyPoints;",
        "    if (comparisonResult.additionalInfoInCurrentValue) {",
        "        this.additionalInfoInCurrentValue = comparisonResult.additionalInfoInCurrentValue;",
        "    }",
        "};",
        "",
        "/**",
        " * Returns true if no penalty points have been assigned for the comparison.",
        " *",
        " * @return boolean true if the comparison was successful.",
        " */",
        "ComparisonResult.prototype.isSuccessful = function() {",
        "    return nullOrUndefined(this.penaltyPoints) || this.penaltyPoints === 0;",
        "};",
        "",
        "/**",
        " * Compares two simple objects (String|Number) and if they are equal then returns a ComparisonResult with zero",
        " * penalty points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue (String|Number) The current value.",
        " * @param storedValue (String|Number) The stored value.",
        " * @param config: {",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return ComparisonResult.",
        " */",
        "ScalarComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("StringComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("StringComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("StringComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "    if (config.penaltyPoints === 0) {",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (!nullOrUndefined(storedValue)) {",
        "        if (nullOrUndefined(currentValue) || currentValue !== storedValue) {",
        "            return new ComparisonResult(config.penaltyPoints);",
        "        }",
        "    } else if (!nullOrUndefined(currentValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    return ComparisonResult.ZERO_PENALTY_POINTS;",
        "};",
        "",
        "/**",
        " * Compares two screens and if they are equal then returns a ComparisonResult with zero penalty points assigned,",
        " * otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue: {",
        " *            "screenWidth": (Number) The current client screen width.",
        " *            "screenHeight": (Number) The current client screen height.",
        " *            "screenColourDepth": (Number) The current client screen colour depth.",
        " *        }",
        " * @param storedValue: {",
        " *            "screenWidth": (Number) The stored client screen width.",
        " *            "screenHeight": (Number) The stored client screen height.",
        " *            "screenColourDepth": (Number) The stored client screen colour depth.",
        " *        }",
        " * @param config: {",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return ComparisonResult",
        " */",
        "ScreenComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("ScreenComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("ScreenComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("ScreenComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    if (nullOrUndefined(currentValue)) {",
        "        currentValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};",
        "    }",
        "    if (nullOrUndefined(storedValue)) {",
        "        storedValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};",
        "    }",
        "",
        "    var comparisonResults = [",
        "        ScalarComparator.compare(currentValue.screenWidth, storedValue.screenWidth, config),",
        "        ScalarComparator.compare(currentValue.screenHeight, storedValue.screenHeight, config),",
        "        ScalarComparator.compare(currentValue.screenColourDepth, storedValue.screenColourDepth, config)];",
        "",
        "    if (all(comparisonResults, ComparisonResult.isSuccessful)) {",
        "        return new ComparisonResult(any(comparisonResults, ComparisonResult.additionalInfoInCurrentValue));",
        "    } else {",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "};",
        "",
        "/**",
        " * Splits both values using delimiter, trims every value and compares collections of values.",
        " * Returns zero-result for same multi-value attributes.",
        " *",
        " * If collections are not same checks if number of differences is less or equal maxDifferences or",
        " * percentage of difference is less or equal maxPercentageDifference.",
        " *",
        " * If yes then returns zero-result with additional info, else returns penaltyPoints-result.",
        " *",
        " * @param currentValue: (String) The current value.",
        " * @param storedValue: (String) The stored value.",
        " * @param config: {",
        " *            "maxPercentageDifference": (Number) The max difference percentage in the values,",
        " *                                                before the penalty is assigned.",
        " *            "maxDifferences": (Number) The max number of differences in the values,",
        " *                                       before the penalty points are assigned.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        "  *        }",
        " * @return ComparisonResult",
        " */",
        "MultiValueComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("MultiValueComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("MultiValueComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("MultiValueComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    var delimiter = ";",",
        "        currentValues = splitAndTrim(currentValue, delimiter),",
        "        storedValues = splitAndTrim(storedValue, delimiter),",
        "        maxNumberOfElements = Math.max(currentValues.length, storedValues.length),",
        "        numberOfTheSameElements = calculateIntersection(currentValues, storedValues).length,",
        "        numberOfDifferences = maxNumberOfElements - numberOfTheSameElements,",
        "        percentageOfDifferences = calculatePercentage(numberOfDifferences, maxNumberOfElements);",
        "",
        "    if (nullOrUndefined(storedValue) && !nullOrUndefined(currentValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message(numberOfTheSameElements + " of " + maxNumberOfElements + " are same");",
        "    }",
        "",
        "    if (maxNumberOfElements === 0) {",
        "        logger.message("Ignored because no attributes found in both profiles");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (numberOfTheSameElements === maxNumberOfElements) {",
        "        logger.message("Ignored because all attributes are same");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (numberOfDifferences > config.maxDifferences) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Would be ignored if not more than " + config.maxDifferences + " differences");",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "",
        "    if (percentageOfDifferences > config.maxPercentageDifference) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message(percentageOfDifferences + " percents are different");",
        "            logger.message("Would be ignored if not more than " + config.maxPercentageDifference + " percent");",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Ignored because number of differences(" + numberOfDifferences + ") not more than "",
        "            + config.maxDifferences);",
        "        logger.message(percentageOfDifferences + " percents are different");",
        "        logger.message("Ignored because not more than " + config.maxPercentageDifference + " percent");",
        "    }",
        "    return new ComparisonResult(true);",
        "};",
        "",
        "/**",
        " * Compares two User Agent Strings and if they are equal then returns a ComparisonResult with zero penalty",
        " * points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue (String) The current value.",
        " * @param storedValue (String) The stored value.",
        " * @param config: {",
        " *            "ignoreVersion": (boolean) If the version numbers in the User Agent Strings should be ignore",
        " *                                       in the comparison.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return A ComparisonResult.",
        " */",
        "UserAgentComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("UserAgentComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("UserAgentComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("UserAgentComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    if (config.ignoreVersion) {",
        "        // remove version number",
        "        currentValue = nullOrUndefined(currentValue) ? null : currentValue.replace(/[\\d\\.]+/g, "").trim();",
        "        storedValue = nullOrUndefined(storedValue) ? null : storedValue.replace(/[\\d\\.]+/g, "").trim();",
        "    }",
        "",
        "    return ScalarComparator.compare(currentValue, storedValue, config);",
        "};",
        "",
        "/**",
        " * Compares two locations, taking into account a degree of difference.",
        " *",
        " * @param currentValue: {",
        " *            "latitude": (Number) The current latitude.",
        " *            "longitude": (Number) The current longitude.",
        " *        }",
        " * @param storedValue: {",
        " *            "latitude": (Number) The stored latitude.",
        " *            "longitude": (Number) The stored longitude.",
        " *        }",
        " * @param config: {",
        " *            "allowedRange": (Number) The max difference allowed in the two locations, before the penalty is assigned.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        "*         }",
        " * @return ComparisonResult",
        " */",
        "GeolocationComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("GeolocationComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("GeolocationComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("GeolocationComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    // Check for undefined stored or current locations",
        "",
        "    if (undefinedLocation(currentValue) && undefinedLocation(storedValue)) {",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "    if (undefinedLocation(currentValue) && !undefinedLocation(storedValue)) {",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "    if (!undefinedLocation(currentValue) && undefinedLocation(storedValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    // Both locations defined, therefore perform comparison",
        "",
        "    var distance = calculateDistance(currentValue, storedValue);",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Distance between (" + currentValue.latitude + "," + currentValue.longitude + ") and (" +",
        "            storedValue.latitude + "," + storedValue.longitude + ") is " + distance + " miles");",
        "    }",
        "",
        "    if (parseFloat(distance.toPrecision(5)) === 0) {",
        "        logger.message("Location is the same");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (distance <= config.allowedRange) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Tolerated because distance not more then " + config.allowedRange);",
        "        }",
        "        return new ComparisonResult(true);",
        "    } else {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Would be ignored if distance not more then " + config.allowedRange);",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "};",
        "",
        "",
        "//---------------------------------------------------------------------------//",
        "//                    Device Print Logic - DO NOT MODIFY                     //",
        "//---------------------------------------------------------------------------//",
        "",
        "// Utility functions",
        "",
        "/**",
        " * Returns true if evaluating function f on each element of the Array a returns true.",
        " *",
        " * @param a: (Array) The array of elements to evaluate",
        " * @param f: (Function) A single argument function for mapping elements of the array to boolean.",
        " * @return boolean.",
        " */",
        "all = function(a, f) {",
        "    var i;",
        "    for (i = 0; i < a.length; i++) {",
        "        if (f(a[i]) === false) {",
        "            return false;",
        "        }",
        "    }",
        "    return true;",
        "};",
        "",
        "/**",
        " * Returns true if evaluating function f on any element of the Array a returns true.",
        " *",
        " * @param a: (Array) The array of elements to evaluate",
        " * @param f: (Function) A single argument function for mapping elements of the array to boolean.",
        " * @return boolean.",
        " */",
        "any = function(a, f) {",
        "    var i;",
        "    for (i = 0; i < a.length; i++) {",
        "        if (f(a[i]) === true) {",
        "            return true;",
        "        }",
        "    }",
        "    return false;",
        "};",
        "",
        "/**",
        " * Returns true if the provided location is null or has undefined longitude or latitude values.",
        " *",
        " * @param location: {",
        " *            "latitude": (Number) The latitude.",
        " *            "longitude": (Number) The longitude.",
        " *        }",
        " * @return boolean",
        " */",
        "undefinedLocation = function(location) {",
        "    return nullOrUndefined(location) || nullOrUndefined(location.latitude) || nullOrUndefined(location.longitude);",
        "};",
        "",
        "/**",
        " * Returns true if the provided value is null or undefined.",
        " *",
        " * @param value: a value of any type",
        " * @return boolean",
        " */",
        "nullOrUndefined = function(value) {",
        "    return value === null || value === undefined;",
        "};",
        "",
        "/**",
        " * Calculates the distances between the two locations.",
        " *",
        " * @param first: {",
        " *            "latitude": (Number) The first latitude.",
        " *            "longitude": (Number) The first longitude.",
        " *        }",
        " * @param second: {",
        " *            "latitude": (Number) The second latitude.",
        " *            "longitude": (Number) The second longitude.",
        " *        }",
        " * @return Number The distance between the two locations.",
        " */",
        "calculateDistance = function(first, second) {",
        "    var factor = (Math.PI / 180),",
        "        theta,",
        "        dist;",
        "    function degreesToRadians(degrees) {",
        "        return degrees * factor;",
        "    }",
        "    function radiansToDegrees(radians) {",
        "        return radians / factor;",
        "    }",
        "    theta = first.longitude - second.longitude;",
        "    dist = Math.sin(degreesToRadians(first.latitude)) * Math.sin(degreesToRadians(second.latitude))",
        "        + Math.cos(degreesToRadians(first.latitude)) * Math.cos(degreesToRadians(second.latitude))",
        "        * Math.cos(degreesToRadians(theta));",
        "    dist = Math.acos(dist);",
        "    dist = radiansToDegrees(dist);",
        "    dist = dist * 60 * 1.1515;",
        "    return dist;",
        "};",
        "",
        "/**",
        " * Converts a String holding a delimited sequence of values into an array.",
        " *",
        " * @param text (String) The String representation of a delimited sequence of values.",
        " * @param delimiter (String) The character delimiting values within the text String.",
        " * @return (Array) The comma separated values.",
        " */",
        "splitAndTrim = function(text, delimiter) {",
        "",
        "    var results = [],",
        "        i,",
        "        values,",
        "        value;",
        "    if (text === null) {",
        "        return results;",
        "    }",
        "",
        "    values = text.split(delimiter);",
        "    for (i = 0; i < values.length; i++) {",
        "        value = values[i].trim();",
        "        if (value !== "") {",
        "            results.push(value);",
        "        }",
        "    }",
        "",
        "    return results;",
        "};",
        "",
        "/**",
        " * Converts value to a percentage of range.",
        " *",
        " * @param value (Number) The actual number to be converted to a percentage.",
        " * @param range (Number) The total number of values (i.e. represents 100%).",
        " * @return (Number) The percentage.",
        " */",
        "calculatePercentage = function(value, range) {",
        "    if (range === 0) {",
        "        return 0;",
        "    }",
        "    return parseFloat((value / range).toPrecision(2)) * 100;",
        "};",
        "",
        "/**",
        " * Creates a new array containing only those elements found in both arrays received as arguments.",
        " *",
        " * @param first (Array) The first array.",
        " * @param second (Array) The second array.",
        " * @return (Array) The elements that found in first and second.",
        " */",
        "calculateIntersection = function(first, second) {",
        "    return first.filter(function(element) {",
        "        return second.indexOf(element) !== -1;",
        "    });",
        "};",
        "",
        "function getValue(obj, attributePath) {",
        "    var value = obj,",
        "        i;",
        "    for (i = 0; i < attributePath.length; i++) {",
        "        if (value === undefined) {",
        "            return null;",
        "        }",
        "        value = value[attributePath[i]];",
        "    }",
        "    return value;",
        "}",
        "",
        "",
        "function isLeafNode(attributeConfig) {",
        "    return attributeConfig.comparator !== undefined;",
        "}",
        "",
        "function getAttributePaths(attributeConfig, attributePath) {",
        "",
        "    var attributePaths = [],",
        "        attributeName,",
        "        attrPaths,",
        "        attrPath,",
        "        i;",
        "",
        "    for (attributeName in attributeConfig) {",
        "        if (attributeConfig.hasOwnProperty(attributeName)) {",
        "",
        "            if (isLeafNode(attributeConfig[attributeName])) {",
        "                attrPath = attributePath.slice();",
        "                attrPath.push(attributeName);",
        "                attributePaths.push(attrPath);",
        "            } else {",
        "                attrPath = attributePath.slice();",
        "                attrPath.push(attributeName);",
        "                attrPaths = getAttributePaths(attributeConfig[attributeName], attrPath);",
        "                for (i = 0; i < attrPaths.length; i++) {",
        "                    attributePaths.push(attrPaths[i]);",
        "                }",
        "            }",
        "        }",
        "    }",
        "",
        "    return attributePaths;",
        "}",
        "",
        "function getDevicePrintAttributePaths(attributeConfig) {",
        "    return getAttributePaths(attributeConfig, []);",
        "}",
        "",
        "function hasRequiredAttributes(devicePrint, attributeConfig) {",
        "",
        "    var attributePaths = getDevicePrintAttributePaths(attributeConfig),",
        "        i,",
        "        attrValue,",
        "        attrConfig;",
        "",
        "    for (i = 0; i < attributePaths.length; i++) {",
        "",
        "        attrValue = getValue(devicePrint, attributePaths[i]);",
        "        attrConfig = getValue(attributeConfig, attributePaths[i]);",
        "",
        "        if (attrConfig.required && attrValue === undefined) {",
        "            logger.warning("Device Print profile missing required attribute, " + attributePaths[i]);",
        "            return false;",
        "        }",
        "    }",
        "",
        "    logger.message("device print has required attributes");",
        "    return true;",
        "}",
        "",
        "function compareDevicePrintProfiles(attributeConfig, devicePrint, devicePrintProfiles, maxPenaltyPoints) {",
        "",
        "    var attributePaths = getDevicePrintAttributePaths(attributeConfig),",
        "        dao = sharedState.get('_DeviceIdDao'),",
        "        results,",
        "        j,",
        "        aggregatedComparisonResult,",
        "        i,",
        "        currentValue,",
        "        storedValue,",
        "        attrConfig,",
        "        comparisonResult,",
        "        selectedComparisonResult,",
        "        selectedProfile,",
        "        curDevicePrintProfile,",
        "        vals;",
        "",
        "    results = [];",
        "    for (j = 0; j < devicePrintProfiles.length; j++) {",
        "        curDevicePrintProfile = JSON.parse(org.forgerock.json.JsonValue.json(devicePrintProfiles[j]));",
        "        aggregatedComparisonResult = new ComparisonResult();",
        "        for (i = 0; i < attributePaths.length; i++) {",
        "",
        "            currentValue = getValue(devicePrint, attributePaths[i]);",
        "            storedValue = getValue(curDevicePrintProfile.devicePrint, attributePaths[i]);",
        "            attrConfig = getValue(attributeConfig, attributePaths[i]);",
        "",
        "            if (storedValue === null) {",
        "                comparisonResult = new ComparisonResult(attrConfig.penaltyPoints);",
        "            } else {",
        "                comparisonResult = attrConfig.comparator.compare(currentValue, storedValue, attrConfig.args);",
        "            }",
        "",
        "            if (logger.messageEnabled()) {",
        "                logger.message("Comparing attribute path: " + attributePaths[i]",
        "                    + ", Comparison result: successful=" + comparisonResult.isSuccessful() + ", penaltyPoints="",
        "                    + comparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "                    + comparisonResult.additionalInfoInCurrentValue);",
        "            }",
        "            aggregatedComparisonResult.addComparisonResult(comparisonResult);",
        "        }",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Aggregated comparison result: successful="",
        "                + aggregatedComparisonResult.isSuccessful() + ", penaltyPoints="",
        "                + aggregatedComparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "                + aggregatedComparisonResult.additionalInfoInCurrentValue);",
        "        }",
        "",
        "        results.push({",
        "            key: aggregatedComparisonResult,",
        "            value: devicePrintProfiles[j]",
        "        });",
        "    }",
        "",
        "    if (results.length === 0) {",
        "        return null;",
        "    }",
        "",
        "    results.sort(function(a, b) {",
        "        return ComparisonResult.compare(a.key, b.key);",
        "    });",
        "    selectedComparisonResult = results[0].key;",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Selected comparison result: successful=" + selectedComparisonResult.isSuccessful()",
        "            + ", penaltyPoints=" + selectedComparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "            + selectedComparisonResult.additionalInfoInCurrentValue);",
        "    }",
        "",
        "    selectedProfile = null;",
        "    if (selectedComparisonResult.penaltyPoints <= maxPenaltyPoints) {",
        "        selectedProfile = results[0].value;",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Selected profile: " + selectedProfile +",
        "                " with " + selectedComparisonResult.penaltyPoints + " penalty points");",
        "        }",
        "    }",
        "",
        "    if (selectedProfile === null) {",
        "        return false;",
        "    }",
        "",
        "    /* update profile */",
        "    selectedProfile.put("selectionCounter",",
        "        java.lang.Integer.valueOf(parseInt(selectedProfile.get("selectionCounter"), 10) + 1));",
        "    selectedProfile.put("lastSelectedDate", java.lang.Long.valueOf(new Date().getTime()));",
        "    selectedProfile.put("devicePrint", devicePrint);",
        "",
        "    vals = [];",
        "    for (i = 0; i < devicePrintProfiles.length; i++) {",
        "        vals.push(org.forgerock.json.JsonValue.json(devicePrintProfiles[i]));",
        "    }",
        "",
        "    dao.saveDeviceProfiles(username, realm, vals);",
        "",
        "    return true;",
        "}",
        "",
        "function matchDevicePrint() {",
        "",
        "    if (!username) {",
        "        logger.error("Username not set. Cannot compare user's device print profiles.");",
        "        authState = FAILED;",
        "    } else {",
        "",
        "        if (logger.messageEnabled()) {",
        "            logger.message("client devicePrint: " + clientScriptOutputData);",
        "        }",
        "",
        "        var getProfiles = function () {",
        "",
        "                function isExpiredProfile(devicePrintProfile) {",
        "                    var expirationDate = new Date(),",
        "                        lastSelectedDate;",
        "                    expirationDate.setDate(expirationDate.getDate() - config.profileExpiration);",
        "",
        "                    lastSelectedDate = new Date(devicePrintProfile.lastSelectedDate);",
        "",
        "                    return lastSelectedDate < expirationDate;",
        "                }",
        "",
        "                function getNotExpiredProfiles() {",
        "                    var profile,",
        "                        dao = sharedState.get('_DeviceIdDao'),",
        "                        results = [],",
        "                        profiles,",
        "                        iter;",
        "",
        "                    profiles = dao.getDeviceProfiles(username, realm);",
        "",
        "                    if (profiles) {",
        "                        iter = profiles.iterator();",
        "",
        "                        while (iter.hasNext()) {",
        "                            profile = iter.next().getObject();",
        "                            if (!isExpiredProfile(profile)) {",
        "                                results.push(profile);",
        "                            }",
        "                        }",
        "                    }",
        "                    if (logger.messageEnabled()) {",
        "                        logger.message("stored non-expired profiles: " + results);",
        "                    }",
        "                    return results;",
        "                }",
        "",
        "                return getNotExpiredProfiles();",
        "            },",
        "            devicePrint = JSON.parse(clientScriptOutputData),",
        "            devicePrintProfiles = getProfiles();",
        "",
        "        if (!hasRequiredAttributes(devicePrint, config.attributes)) {",
        "            logger.message("devicePrint.hasRequiredAttributes: false");",
        "            // Will fail this module but fall-through to next module. Which should be OTP.",
        "            authState = FAILED;",
        "        } else if (compareDevicePrintProfiles(config.attributes, devicePrint, devicePrintProfiles, config.maxPenaltyPoints)) {",
        "            logger.message("devicePrint.hasValidProfile: true");",
        "            authState = SUCCESS;",
        "        } else {",
        "            logger.message("devicePrint.hasValidProfile: false");",
        "            sharedState.put('devicePrintProfile', JSON.stringify(devicePrint));",
        "            // Will fail this module but fall-through to next module. Which should be OTP.",
        "            authState = FAILED;",
        "        }",
        "    }",
        "}",
        "",
        "matchDevicePrint();",
      ],
    },
    "739bdc48-fd24-4c52-b353-88706d75558a": {
      "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Check Username",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "73cecbfc-dad0-4395-be6a-6858ee3a80e5": {
      "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Microsoft",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Microsoft Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "{",
        "    "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#users/$entity",",
        "    "@odata.id": "https://graph.microsoft.com/v2/711ffa9c-5972-4713-ace3-688c9732614a/directoryObjects/7d7759e2-36d8-4e64-b173-3f890d7d46d6/Microsoft.DirectoryServices.User",",
        "    "businessPhones": [",
        "        "18014735451"",
        "    ],",
        "    "displayName": "Volker Scheuber",",
        "    "givenName": "Volker",",
        "    "jobTitle": null,",
        "    "mail": "vscheuber@vscheuber.onmicrosoft.com",",
        "    "mobilePhone": null,",
        "    "officeLocation": null,",
        "    "preferredLanguage": null,",
        "    "surname": "Scheuber",",
        "    "userPrincipalName": "vscheuber@vscheuber.onmicrosoft.com",",
        "    "id": "7d7759e2-36d8-4e64-b173-3f890d7d46d6"",
        "}",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.message("Kauai Microsoft Profile Normalization: rawProfile={}", rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.displayName),",
        "        field("givenName", rawProfile.givenName),",
        "        field("familyName", rawProfile.surname),",
        "        field("email", rawProfile.userPrincipalName),",
        "        field("username", rawProfile.userPrincipalName),",
        "        field("groups", rawProfile.groups)))",
      ],
    },
    "7e3d7067-d50f-4674-8c76-a3e13a810c33": {
      "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
      "context": "AUTHENTICATION_SERVER_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for server side Scripted Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Module - Server Side",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var START_TIME = 9;  // 9am",
        "var END_TIME   = 17; // 5pm",
        "var longitude, latitude;",
        "var localTime;",
        "",
        "logger.message("Starting scripted authentication");",
        "logger.message("User: " + username);",
        "",
        "var userPostalAddress = getUserPostalAddress();",
        "logger.message("User address: " + userPostalAddress);",
        "",
        "getLongitudeLatitudeFromUserPostalAddress();",
        "getLocalTime();",
        "",
        "logger.message("Current time at the users location: " + localTime.getHours());",
        "if (localTime.getHours() < START_TIME || localTime.getHours() > END_TIME) {",
        "    logger.error("Login forbidden outside work hours!");",
        "    authState = FAILED;",
        "} else {",
        "    logger.message("Authentication allowed!");",
        "    authState = SUCCESS;",
        "}",
        "",
        "function getLongitudeLatitudeFromUserPostalAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userPostalAddress));",
        "      request.setMethod("GET");",
        "      //the above URI has to be extended with an API_KEY if used in a frequent manner",
        "      //see documentation: https://developers.google.com/maps/documentation/geocoding/intro",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        latitude = result.geometry.location.lat;",
        "        longitude = result.geometry.location.lng;",
        "      ",
        "           logger.message("latitude:" + latitude + " longitude:" + longitude);",
        "    }",
        "}",
        "",
        "function getLocalTime() {",
        "",
        "    var now = new Date().getTime() / 1000;",
        "    var location = "location=" + latitude + "," + longitude;",
        "    var timestamp = "timestamp=" + now;",
        "        ",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("https://maps.googleapis.com/maps/api/timezone/json?" + location + "&" + timestamp);",
        "      request.setMethod("GET");",
        "      //the above URI has to be extended with an API_KEY if used in a frequent manner",
        "      //see documentation: https://developers.google.com/maps/documentation/timezone/intro",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var timezone = JSON.parse(response.getEntity().getString());",
        "    var localTimestamp = parseInt(now) + parseInt(timezone.dstOffset) + parseInt(timezone.rawOffset);",
        "    localTime = new Date(localTimestamp*1000);",
        "}",
        "",
        "function getUserPostalAddress() {",
        "    var userAddressSet = idRepository.getAttribute(username, "postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    return userAddressSet.iterator().next()",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "809330cf-874c-4d57-a8f1-5882c6dd855b": {
      "_id": "809330cf-874c-4d57-a8f1-5882c6dd855b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Converts a normalized social profile for iddataweb into a Managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized idddataweb Profile to Managed User",
      "script": [
        "/* Normalized idddataweb Profile to Managed User",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS. Not for production use.",
        " * Modified by Stephen Payne, 2021-Mar-30",
        " */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "import org.forgerock.json.JsonValue",
        "logger.error("Normalized_Profile_IDDataWeb: Start " + normalizedProfile);",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("userName", normalizedProfile.username)))",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "if (normalizedProfile.DOB.isNotNull()) managedUser.put("frIndexedString2", normalizedProfile.DOB)",
        "",
        "return managedUser",
        "",
      ],
    },
    "85523e71-2d77-4577-b078-6f9674cc54e2": {
      "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "8862ca8f-7770-4af5-a888-ac0df0947f36": {
      "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from LinkedIn",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "LinkedIn Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("givenName", rawProfile.firstName.localized.get(0)),",
        "        field("familyName", rawProfile.lastName.localized.get(0)),",
        "        field("photoUrl", rawProfile.profilePicture.displayImage),",
        "        field("email", rawProfile.elements.get(0).get("handle~").emailAddress),",
        "        field("username", rawProfile.elements.get(0).get("handle~").emailAddress)))",
      ],
    },
    "8e298710-b55e-4085-a464-88a375a4004b": {
      "_id": "8e298710-b55e-4085-a464-88a375a4004b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Twitter",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twitter Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id_str),",
        "        field("displayName", rawProfile.name),",
        "        field("photoUrl", rawProfile.profile_image_url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.screen_name)))",
      ],
    },
    "90c4eca5-05f0-42f5-b9bf-88b693eabbbd": {
      "_id": "90c4eca5-05f0-42f5-b9bf-88b693eabbbd",
      "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Attribute Mapper Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.",
        " *",
        " * Defined variables:",
        " * session - SSOToken (1)",
        " *           The single sign-on session.",
        " * hostedEntityId - String (primitive).",
        " *                  The hosted entity ID.",
        " * remoteEntityId - String (primitive).",
        " *                  The remote entity ID.",
        " * realm - String (primitive).",
        " *         The name of the realm the user is authenticating to.",
        " * logger - Always present, the debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER",
        " * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)",
        " *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.",
        " *",
        " * Throws SAML2Exception:",
        " *      - on failing to map the IDP attributes.",
        " *",
        " * Return - a list of SAML Attribute (3) objects.",
        " *",
        " * Class reference:",
        " * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.",
        " * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.",
        " */",
        "",
        "/**",
        " * Default SAML2 IDP Attribute Mapper.",
        " */",
        "function getAttributes() {",
        "    var frJava = JavaImporter(",
        "        com.sun.identity.saml2.common.SAML2Exception",
        "    );",
        "",
        "    const debugMethod = "ScriptedIDPAttributeMapper.getAttributes:: ";",
        "",
        "    try {",
        "",
        "        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {",
        "            logger.error(debugMethod + "Invalid session.");",
        "            return null;",
        "        }",
        "",
        "        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);",
        "        logger.message(debugMethod + "Remote SP attribute map = {}", configMap);",
        "        if (configMap == null || configMap.isEmpty()) {",
        "            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);",
        "            if (configMap == null || configMap.isEmpty()) {",
        "                logger.message(debugMethod + "Configuration map is not defined.");",
        "                return null;",
        "            }",
        "            logger.message(debugMethod + "Hosted IDP attribute map = {}", configMap);",
        "        }",
        "",
        "        var attributes = new java.util.ArrayList();",
        "        var stringValueMap = new java.util.HashSet();",
        "        var binaryValueMap;",
        "        var localAttribute;",
        "",
        "        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.",
        "        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {",
        "            try {",
        "                // Resolve attributes to be read from the datastore.",
        "                var stringAttributes = new java.util.HashSet();",
        "                var binaryAttributes = new java.util.HashSet();",
        "                var keyIter = configMap.keySet().iterator();",
        "                while (keyIter.hasNext()) {",
        "                    var key = keyIter.next();",
        "                    localAttribute = configMap.get(key);",
        "                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                            // add it to the list of attributes to treat as being binary",
        "                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));",
        "                        } else {",
        "                            stringAttributes.add(localAttribute);",
        "                        }",
        "                    }",
        "                }",
        "",
        "                if (!stringAttributes.isEmpty()) {",
        "                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);",
        "                }",
        "                if (!binaryAttributes.isEmpty()) {",
        "                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);",
        "                }",
        "            } catch (error) {",
        "                logger.error(debugMethod + "Error accessing the datastore. " + error);",
        "                //continue to check in ssotoken.",
        "            }",
        "        }",
        "",
        "        var keyIter = configMap.keySet().iterator();",
        "        while (keyIter.hasNext()) {",
        "            var key = keyIter.next()",
        "            var nameFormat = null;",
        "            var samlAttribute = key;",
        "            localAttribute = configMap.get(key);",
        "            // check if samlAttribute has format nameFormat|samlAttribute",
        "            var samlAttributes = String(new java.lang.String(samlAttribute));",
        "            var tokens = samlAttributes.split('|');",
        "",
        "            if (tokens.length > 1) {",
        "                nameFormat = tokens[0];",
        "                samlAttribute = tokens[1];",
        "            }",
        "",
        "            var attributeValues = new java.util.HashSet();",
        "            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                // Remove the static flag before using it as the static value",
        "                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);",
        "                attributeValues = new java.util.HashSet([localAttribute]);",
        "                logger.message(debugMethod + "Adding static value {} for attribute named {}", localAttribute, samlAttribute);",
        "            } else {",
        "                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                    // Remove the flag as not used for lookup",
        "                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);",
        "                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,",
        "                        binaryValueMap);",
        "                } else {",
        "                    if (stringValueMap != null && !stringValueMap.isEmpty()) {",
        "                        attributeValues = stringValueMap.get(localAttribute);",
        "                    } else {",
        "                        logger.message(debugMethod + "{} string value map was empty or null.", localAttribute);",
        "                    }",
        "                }",
        "",
        "                // If all else fails, try to get the value from the users ssoToken",
        "                if (attributeValues == null || attributeValues.isEmpty()) {",
        "                    logger.message(debugMethod + "User profile does not have value for {}, checking SSOToken.", localAttribute);",
        "                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));",
        "                }",
        "            }",
        "",
        "            if (attributeValues == null || attributeValues.isEmpty()) {",
        "                logger.message(debugMethod + "{} not found in user profile or SSOToken.", localAttribute);",
        "            } else {",
        "                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));",
        "            }",
        "        }",
        "",
        "        return attributes;",
        "",
        "    } catch (error) {",
        "        logger.error(debugMethod + "Error mapping IDP attributes. " + error);",
        "        throw new frJava.SAML2Exception(error);",
        "    }",
        "}",
        "",
        "getAttributes();",
      ],
    },
    "91554b10-79a5-4aa8-aca1-59481a734c19": {
      "_id": "91554b10-79a5-4aa8-aca1-59481a734c19",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Twilio SMS OTP Sender",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio SMS OTP Sender",
      "script": [
        "/* Twilio SMS OTP Sender",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script will send an SMS containing the OTP to the phone number in the user's profile.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node and HOTP Generator node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - sent",
        " * - failed",
        " */",
        "logger.warning("Twilio SMS OTP Sender: start");",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext()) {",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "       /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     */",
        "    var TWILIO_API_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "    var TWILIO_API_TOKEN = "d36a719c94b4be08592d69ec4f80a5bb";",
        "    var TWILIO_API_FROM = "+13176443107";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "  ",
        "    // Twilio SMS Message API Configuration",
        "    var TWILIO_API_URI = "https://api.twilio.com/2010-04-01/Accounts/".concat(TWILIO_API_SID).concat("/Messages.json");    ",
        "    var TWILIO_API_TO = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "    var TWILIO_API_BODY = "OTP for account ".concat(sharedState.get("username")).concat(": ").concat(sharedState.get("oneTimePassword"));",
        "    //logger.warning("Twilio SMS OTP Sender: To: ".concat(TWILIO_API_TO));",
        "    //logger.warning("Twilio SMS OTP Sender: Message: ".concat(TWILIO_API_BODY));",
        "",
        "    var AUTHZ = "Basic ".concat(Base64.encode(TWILIO_API_SID.concat(':').concat(TWILIO_API_TOKEN)));",
        "    //logger.warning("Twilio SMS OTP Sender: AUTHZ - ".concat(AUTHZ));",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(TWILIO_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    request.getHeaders().add("Authorization", AUTHZ);",
        "    var params = request.getForm();",
        "    params.add("From", TWILIO_API_FROM);",
        "    params.add("Body", TWILIO_API_BODY);",
        "    params.add("To", TWILIO_API_TO);",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.warning("Twilio SMS OTP Sender: JSON result: " + JSON.stringify(result));",
        "",
        "    if (result["error_code"]) {",
        "        outcome = "failed";",
        "        logger.error("Twilio SMS OTP Sender: error_code = ".concat(result["error_code"]));",
        "        logger.error("Twilio SMS OTP Sender: error_message = ".concat(result["error_message"]));",
        "        logger.error("Twilio SMS OTP Sender: outcome = failed");",
        "    } else if (result["code"]) {",
        "        outcome = "failed";",
        "        logger.error("Twilio SMS OTP Sender: code = ".concat(result["code"]));",
        "        logger.error("Twilio SMS OTP Sender: message = ".concat(result["message"]));",
        "    } else {",
        "        outcome = "sent";",
        "        logger.warning("Twilio SMS OTP Sender: outcome = sent");",
        "    }",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Twilio SMS OTP Sender: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state!'");",
        "      logger.error("Twilio SMS OTP Sender: outcome = failed");",
        "}",
      ],
    },
    "91d197de-5916-4dca-83b5-9a4df26e7159": {
      "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from WordPress",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "WordPress Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.username),",
        "        field("displayName", rawProfile.display_name),",
        "        field("photoUrl", rawProfile.avatar_URL),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.username)))",
      ],
    },
    "9399ac8b-3a6e-423b-95a2-6e0fd07262b1": {
      "_id": "9399ac8b-3a6e-423b-95a2-6e0fd07262b1",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "APIProtection: Get Key And Secret",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "APIProtection: Get Key And Secret",
      "script": [
        "logger.warning("APIProtection: Get Key And Secret: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var KEY_HEADER_NAME = "x-api-key";",
        "var SECRET_HEADER_NAME = "x-api-secret";",
        "var USERNAME_HEADER_NAME = "X-OpenAM-Username";",
        "var PASSWORD_HEADER_NAME = "X-OpenAM-Password";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "false";",
        "",
        "var key = getHeader(KEY_HEADER_NAME) || readValue(KEY_HEADER_NAME) || null;",
        "var secret = getHeader(SECRET_HEADER_NAME) || readTransientValue(SECRET_HEADER_NAME) || null;",
        "",
        "var username = sharedState.get("username") || null;",
        "var password = transientState.get("password") || null;",
        "",
        "if (key && secret) {",
        "    logger.warning("APIProtection: Get Key And Secret: key=".concat(key));",
        "  ",
        "      storeValue(KEY_HEADER_NAME, key);",
        "      storeValue("username", username);",
        "      sharedState.put("username", key);",
        "      ",
        "      storeTransientValue(SECRET_HEADER_NAME, secret);",
        "      storeTransientValue("password", password);",
        "      transientState.put("password", secret);",
        "  ",
        "    outcome = "true";",
        "}",
        "",
        "logger.warning("APIProtection: Get Key And Secret: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Returns the value of the requested header",
        " */",
        "function getHeader(headerName) {",
        "      if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "        return requestHeaders.get(headerName).get(0).toString();",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store value for APIProtection script use",
        " */",
        "function storeValue(name, value) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "            storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("APIProtection", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read value from storage for APIProtection script use",
        " */",
        "function readValue(name) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store transient value for APIProtection script use",
        " */",
        "function storeTransientValue(name, value) {",
        "    var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "              transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        transientState.put("APIProtection", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read transient value from storage for APIProtection script use",
        " */",
        "function readTransientValue(name) {",
        "      var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage) {",
        "          if (transientStorage.get) {",
        "            return transientState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return transientStorage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
      ],
    },
    "9535446c-0ff6-4a76-8576-616599119d64": {
      "_id": "9535446c-0ff6-4a76-8576-616599119d64",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Remove button from page.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Remove Button",
      "script": [
        "/* Remove Button",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Hide buttons on the journey page.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "    var script = "Array.prototype.slice.call(document.getElementsByTagName('button')).forEach(function (e) {e.style.display = 'none'})"",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    var message = " "",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                message",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "}());",
      ],
    },
    "98a87024-3d07-4c75-b1ea-43ff905e9def": {
      "_id": "98a87024-3d07-4c75-b1ea-43ff905e9def",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Reset the IDM profile shared state so it can be patched to the user profile.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ResetOTPProfileAttribute",
      "script": [
        "/* ResetOTPProfileAttribute",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Reset the IDM profile shared state so it can be patched to the user profile.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "if (sharedState.get("objectAttributes")) {",
        "    sharedState.get("objectAttributes").put("description", "")",
        "}",
        "else {",
        "    sharedState.put("objectAttributes", {description: ""});",
        "}",
        "outcome = "true";",
      ],
    },
    "9de3eb62-f131-4fac-a294-7bd170fd4acb": {
      "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for Scripted Policy Conditions",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy Condition",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "a186232a-683d-48ce-8893-d6f92652ec82": {
      "_id": "a186232a-683d-48ce-8893-d6f92652ec82",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Analyze an IP address using the IPQualityScore (IPQS) service.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IPQS IP Address",
      "script": [
        "/* IPQS IP Address",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Analyze an IP address using the IPQualityScore (IPQS) service.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - high",
        " * - suspicious",
        " * - low",
        " * - unknown",
        " */",
        "(function () {",
        "    logger.warning("IPQS IP Address: start");",
        "",
        "    outcome = "unknown";",
        "",
        "    var ip = getClientIPAddress();",
        "    logger.warning("IPQS IP Address: ip=".concat(ip));",
        "",
        "    if (ip) {",
        "",
        "        // IPQS API Configuration",
        "        var IPQS_API_KEY = systemEnv.getProperty("esv.ipqs.api.key");",
        "        var IPQS_OPTIONS = "strictness=0&allow_public_access_points=true&user_agent=".concat(encodeURIComponent(getHeader("user-agent"))).concat("&user_language=").concat(encodeURIComponent(getHeader("accept-language")));",
        "        var IPQS_API_URI = "https://ipqualityscore.com/api/json/ip/".concat(IPQS_API_KEY).concat("/").concat(ip).concat("?").concat(IPQS_OPTIONS);",
        "",
        "        var request = new org.forgerock.http.protocol.Request();",
        "        request.setMethod('GET');",
        "        request.setUri(IPQS_API_URI);",
        "",
        "        var response = httpClient.send(request).get();",
        "        var result = JSON.parse(response.getEntity().getString());",
        "        logger.warning("IPQS IP Address: JSON result: ".concat(JSON.stringify(result)));",
        "",
        "        // preserve result in transient state",
        "        transientState.put("IPQS_IP_Address", JSON.stringify(result));",
        "",
        "        if (result.fraud_score >= 85) {",
        "            outcome = "high";",
        "        } ",
        "        else if (result.fraud_score >= 75) {",
        "            outcome = "suspicious";",
        "        }",
        "        else {",
        "            outcome = "low";",
        "        }",
        "",
        "    } else {",
        "        logger.error("IPQS IP Address: no client ip!");",
        "    }",
        "",
        "    logger.warning("OIPQS IP Address: End (outcome=".concat(outcome).concat(")"));",
        "",
        "    /*",
        "     * !!! ASSUMES ID CLOUD !!!",
        "     *",
        "     * Returns the client's IP address",
        "     */",
        "    function getClientIPAddress() {",
        "        return getHeader("x-forwarded-for").split(',')[0];",
        "    }",
        "",
        "    /*",
        "     * Returns the value of the requested header",
        "     */",
        "    function getHeader(headerName) {",
        "        return requestHeaders.get(headerName).get(0);",
        "    }",
        "",
        "        /* Sample IPQS REST API Response",
        "        {",
        "            "success": true,",
        "            "message": "Success",",
        "            "fraud_score": 100,",
        "            "country_code": "US",",
        "            "region": "Washington",",
        "            "city": "Seattle",",
        "            "ISP": "Emerald Onion",",
        "            "ASN": 396507,",
        "            "operating_system": "Mac 10.16",",
        "            "browser": "Firefox 85.0",",
        "            "organization": "Emerald Onion",",
        "            "latitude": 47.6,",
        "            "longitude": -122.33,",
        "            "is_crawler": false,",
        "            "timezone": "America\\/Chicago",",
        "            "mobile": false,",
        "            "host": "2620:18c:0:192::232",",
        "            "proxy": true,",
        "            "vpn": true,",
        "            "tor": true,",
        "            "active_vpn": false,",
        "            "active_tor": true,",
        "            "device_brand": "N\\/A",",
        "            "device_model": "N\\/A",",
        "            "recent_abuse": true,",
        "            "bot_status": false,",
        "            "connection_type": "Premium required.",",
        "            "abuse_velocity": "Premium required.",",
        "            "request_id": "4uTO78pDxyr3PP"",
        "        }",
        "    */",
        "}());",
      ],
    },
    "a7a78773-445b-4eca-bb93-409e86bced81": {
      "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("username", rawProfile.login)))",
      ],
    },
    "a873fcd8-8f17-4675-9dd6-54ab1c11e2df": {
      "_id": "a873fcd8-8f17-4675-9dd6-54ab1c11e2df",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Record that MFA has been performed for this journey and no longer needs to be performed. This allows journeys and inner journeys to check that flag before performing MFA multiple times.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Record MFA",
      "script": [
        "/* MFA Status",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Record that MFA has been performed for this journey and no longer needs ",
        " * to be performed. This allows journeys and inner journeys to check that ",
        " * flag before performing MFA multiple times.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "sharedState.put("mfaPerformed", "true");",
      ],
    },
    "ac9fc25e-3ad9-4f80-a796-2d9093795439": {
      "_id": "ac9fc25e-3ad9-4f80-a796-2d9093795439",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if MFA has already been performed for this journey. This allows journeys and inner journeys not to perform MFA multiple times.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MFA Status",
      "script": [
        "/* MFA Status",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if MFA has already been performed for this journey. ",
        " * This allows journeys and inner journeys not to perform MFA multiple times.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "outcome = "false";",
        "if (sharedState.get("mfaPerformed")=="true") {",
        "      outcome = "true";",
        "}",
      ],
    },
    "b63981d8-cb73-4e47-8749-e58654dcaa31": {
      "_id": "b63981d8-cb73-4e47-8749-e58654dcaa31",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Phone Validator - Line Type",
      "script": [
        "/* Phone Validator - Line Type",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
        " * Get your own API Key at https://www.phonevalidator.com",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - CELL PHONE",
        " * - LANDLINE",
        " * - VOIP",
        " * - TOLL-FREE",
        " * - UNKNOWN",
        " * - failed",
        " */",
        "logger.warning("Phone Validator - Line Type: start");",
        "",
        "if (getSharedObjectAttribute("telephoneNumber") || (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext())) {",
        "",
        "    /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     *",
        "       * Phone Validator - Line Type API Configuration",
        "       * Get your own API Key at https://www.phonevalidator.com",
        "     */",
        "    var PV_API_KEY = "849d564a-594d-4bde-b691-afe5ddadd547";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "      var PV_API_TYPE = "basic";",
        "    var PV_API_PHONE = getSharedObjectAttribute("telephoneNumber") || idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "    var PV_API_URI = "https://www.phonevalidator.com/api/v2/phonesearch?apikey=".concat(PV_API_KEY).concat("&phone=").concat(PV_API_PHONE).concat("&type=").concat(PV_API_TYPE);    ",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(PV_API_URI);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "",
        "    if (result["StatusCode"]=="200") {",
        "        outcome = result["PhoneBasic"]["LineType"];",
        "    } else {",
        "        outcome = "failed";",
        "    }",
        "    logger.error("Phone Validator - Line Type: StatusCode = ".concat(result["StatusCode"]));",
        "    logger.error("Phone Validator - Line Type: StatusMessage = ".concat(result["StatusMessage"]));",
        "    logger.error("Phone Validator - Line Type: outcome = ".concat(outcome));",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Phone Validator - Line Type: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state or put a valid cell phone number into sharedState.objectAttributes.telephoneNumber!'");",
        "    logger.error("Phone Validator - Line Type: outcome = ".concat(outcome));",
        "}",
        "",
        "/*",
        " * Read attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function getSharedObjectAttribute(name) {",
        "    var storage = sharedState.get("objectAttributes");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("objectAttributes").get(name);",
        "        }",
        "          else {",
        "            return storage.name;",
        "        }",
        "    }",
        "    return null;",
        "}",
      ],
    },
    "b7259916-71ed-4675-8c5a-de86a80e4aed": {
      "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript2",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "bae1d54a-e97d-4997-aa5d-c027f21af82c": {
      "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Facebook",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Facebook Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "c234ba0b-58a1-4cfd-9567-09edde980745": {
      "_id": "c234ba0b-58a1-4cfd-9567-09edde980745",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 1433147666269,
      "default": true,
      "description": "Internal token modification script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRock Internal: OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "// Script is intentionally empty",
        "",
      ],
    },
    "c827d2b4-3608-4693-868e-bbcf86bd87c7": {
      "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for client side Scripted Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Module - Client Side",
      "script": [
        "/*",
        " * Copyright 2016-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/* Default Authentication client side script to use as a template for new scripts */",
      ],
    },
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "cf3515f0-8278-4ee3-a530-1bad7424c416": {
      "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OIDC claims",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
      ],
    },
    "d22f9a0c-426a-4466-b95e-d0f125b0d5fa": {
      "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OAuth2 Access Token Modification",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2021 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "(function () {",
        "  // Adds new fields containing the session property values.",
        "  // NOTE: session may not be available for non-interactive authorization grants.",
        "  if (session) {",
        "    try {",
        "      accessToken.setField('ip_address', session.getProperty('Host'));",
        "    } catch (e) {",
        "      logger.error('Unable to retrieve session property value. ' + e);",
        "    }",
        "  }",
        "}());",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
      ],
    },
    "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3": {
      "_id": "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Social Identity Provider Profile Transformation for ForgeRock OIDC Providers",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ST_healthcare-idc-social-transformation",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock. Not for production use.",
        " * Modified by Stephen Payne",
        " */",
        "/* Social Identity Provider Profile Transformation script for Healthcare ID Cloud */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.error("ST_healthcare-idc-social-transformation Healthcare ID Cloud Identity Provider Profile Transformation script: Start");",
        "",
        "logger.error("ST_healthcare-idc-social-transformation Profile Transformation script: Start");",
        "logger.error("ST_healthcare-idc-social-transformationy: givenName " + rawProfile.givenName);",
        "logger.error("ST_healthcare-idc-social-transformation: sn: " +rawProfile.familyName);",
        "logger.error("ST_healthcare-idc-social-transformation: id: " +rawProfile.id);",
        "logger.error("ST_healthcare-idc-social-transformation: mail: " + rawProfile.email);",
        "logger.error("ST_healthcare-idc-social-transformation: cn: " + rawProfile.displayName);",
        "logger.error("ST_healthcare-idc-social-transformation: userName: " + rawProfile.username);",
        "logger.error("ST_healthcare-idc-social-transformation: id: " + rawProfile.id.asString());",
        "//logger.error("ST_healthcare-idc-social-transformation: iplanet-am-user-alias-list: " + selectedIdp + '-' + rawProfile.id.asString() );",
        "//logger.error("ST_healthcare-idc-social-transformation: selectedIdp: " + selectedIdp);",
        "if (rawProfile.fhirUser.isNotNull()) logger.error("ST_healthcare-idc-social-transformation: fhirUser: " + rawProfile.fhirUser);",
        "if (rawProfile.IAL.isNotNull()) logger.error("ST_healthcare-idc-social-transformatio: IAL: " + rawProfile.IAL);",
        "",
        "",
        "",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("IAL", rawProfile.IAL),  ",
        "        field("telephoneNumber", rawProfile.phone_number),",
        "        field("fhirUser", rawProfile.fhirUser),",
        "        field("userType", rawProfile.userType),",
        "        )",
        ")",
      ],
    },
    "dbe0bf9a-72aa-49d5-8483-9db147985a47": {
      "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from ADFS",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ADFS Profile Normalization (JS)",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script returns the social identity profile information for the authenticating user",
        " * in a standard form expected by the Social Provider Handler Node.",
        " *",
        " * Defined variables:",
        " * rawProfile - The social identity provider profile information for the authenticating user.",
        " *              JsonValue (1).",
        " * logger - The debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * realm - String (primitive).",
        " *         The name of the realm the user is authenticating to.",
        " * requestHeaders - TreeMap (2).",
        " *                  The object that provides methods for accessing headers in the login request:",
        " *                  https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * requestParameters - TreeMap (2).",
        " *                     The object that contains the authentication request parameters.",
        " * selectedIdp - String (primitive).",
        " *               The social identity provider name. For example: google.",
        " * sharedState - LinkedHashMap (3).",
        " *               The object that holds the state of the authentication tree and allows data exchange between the stateless nodes:",
        " *               https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.",
        " * transientState - LinkedHashMap (3).",
        " *                  The object for storing sensitive information that must not leave the server unencrypted,",
        " *                  and that may not need to persist between authentication requests during the authentication session:",
        " *                  https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.",
        " *",
        " * Return - a JsonValue (1).",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *",
        " *          This script's last statement should result in a JsonValue (1) with the following keys:",
        " *          {",
        " *              {"displayName": "corresponding-social-identity-provider-value"},",
        " *              {"email": "corresponding-social-identity-provider-value"},",
        " *              {"familyName": "corresponding-social-identity-provider-value"},",
        " *              {"givenName": "corresponding-social-identity-provider-value"},",
        " *              {"id": "corresponding-social-identity-provider-value"},",
        " *              {"locale": "corresponding-social-identity-provider-value"},",
        " *              {"photoUrl": "corresponding-social-identity-provider-value"},",
        " *              {"username": "corresponding-social-identity-provider-value"}",
        " *          }",
        " *",
        " *          The consumer of this data defines which keys are required and which are optional.",
        " *          For example, the script associated with the Social Provider Handler Node and,",
        " *          ultimately, the managed object created/updated with this data",
        " *          will expect certain keys to be populated.",
        " *          In some common default configurations, the following keys are required to be not empty:",
        " *          username, givenName, familyName, email.",
        " *",
        " *          From RFC4517: A value of the Directory String syntax is a string of one or more",
        " *          arbitrary characters from the Universal Character Set (UCS).",
        " *          A zero-length character string is not permitted.",
        " *",
        " * (1) JsonValue - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/json/JsonValue.html.",
        " * (2) TreeMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html.",
        " * (3) LinkedHashMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " */",
        "",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.json.JsonValue",
        "    );",
        "",
        "    var normalizedProfileData = frJava.JsonValue.json(frJava.JsonValue.object());",
        "  ",
        "      //logger.message('Seguin rawProfile: '+rawProfile);",
        "",
        "    normalizedProfileData.put('id', rawProfile.get('sub').asString());",
        "    normalizedProfileData.put('displayName', rawProfile.get('givenName').asString() + ' ' + rawProfile.get('sn').asString());",
        "    normalizedProfileData.put('email', rawProfile.get('mail').asString());",
        "    normalizedProfileData.put('givenName', rawProfile.get('givenName').asString());",
        "    normalizedProfileData.put('familyName', rawProfile.get('sn').asString());",
        "    normalizedProfileData.put('username', rawProfile.get('upn').asString());",
        "    normalizedProfileData.put('roles', rawProfile.get('roles').asString());",
        "  ",
        "      //logger.message('Seguin normalizedProfileData: '+normalizedProfileData);",
        "",
        "    return normalizedProfileData;",
        "}());",
      ],
    },
    "e0666b8b-f625-4047-89d8-e7e91151027f": {
      "_id": "e0666b8b-f625-4047-89d8-e7e91151027f",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Twilio Voice OTP Sender",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio Voice OTP Sender",
      "script": [
        "/* Twilio Voice OTP Sender",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script will deliver the OTP via voice to the phone number in the user's profile.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node and HOTP Generator node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - sent",
        " * - failed",
        " */",
        "logger.warning("Twilio Voice OTP Sender: start");",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext()) {",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "    /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     */",
        "    var TWILIO_API_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "    var TWILIO_API_TOKEN = "d36a719c94b4be08592d69ec4f80a5bb";",
        "    var TWILIO_API_FROM = "+13176443107";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "  ",
        "    // Twilio SMS Message API Configuration",
        "    var TWILIO_API_URI = "https://api.twilio.com/2010-04-01/Accounts/".concat(TWILIO_API_SID).concat("/Calls.json");    ",
        "    var TWILIO_API_TO = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "      var OTP = sharedState.get("oneTimePassword").split("").join("; ");",
        "    var TWILIO_API_TWIML = "<Response><Pause length='1'/><Say voice='alice'>Your one-time password is ".concat(OTP).concat("</Say><Pause length='1'/><Say>Your one-time password is ").concat(OTP).concat("</Say><Pause length='1'/><Say>Goodbye</Say></Response>");",
        "    //logger.warning("Twilio Voice OTP Sender: To: ".concat(TWILIO_API_TO));",
        "    //logger.warning("Twilio Voice OTP Sender: Twiml: ".concat(TWILIO_API_TWIML));",
        "",
        "    var AUTHZ = "Basic ".concat(Base64.encode(TWILIO_API_SID.concat(':').concat(TWILIO_API_TOKEN)));",
        "    //logger.warning("Twilio SMS OTP Sender: AUTHZ - ".concat(AUTHZ));",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(TWILIO_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    request.getHeaders().add("Authorization", AUTHZ);",
        "    var params = request.getForm();",
        "    params.add("From", TWILIO_API_FROM);",
        "    params.add("Twiml", TWILIO_API_TWIML);",
        "    params.add("To", TWILIO_API_TO);",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.warning("Twilio SMS OTP Sender: JSON result: " + JSON.stringify(result));",
        "",
        "    if (result["status"]=="queued") {",
        "        outcome = result["status"];",
        "        logger.error("Twilio Voice OTP Sender: status = ".concat(result["status"]));",
        "        logger.error("Twilio Voice OTP Sender: subresource_uris = ".concat(result["subresource_uris"]));",
        "        logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "    } else {",
        "        outcome = "failed";",
        "        logger.error("Twilio Voice OTP Sender: status = ".concat(result["status"]));",
        "        logger.error("Twilio Voice OTP Sender: code = ".concat(result["code"]));",
        "        logger.error("Twilio Voice OTP Sender: more_info = ".concat(result["more_info"]));",
        "        logger.error("Twilio Voice OTP Sender: message = ".concat(result["message"]));",
        "        logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "    }",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Twilio Voice OTP Sender: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state!'");",
        "    logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "}",
      ],
    },
    "e1db8a0a-0329-4962-a5bf-ecffaca376ae": {
      "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
      ],
    },
    "e232cff3-2460-47cd-80b2-36c86c0d0f06": {
      "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
      "script": [
        "(function () {",
        "  if (scopes.contains('fr:autoaccess:*') || scopes.contains('fr:iga:*')) {",
        "    var fr = JavaImporter(",
        "      com.sun.identity.idm.IdType",
        "    );",
        "    var groups = [];",
        "    identity.getMemberships(fr.IdType.GROUP).toArray().forEach(function (group) {",
        "      groups.push(group.getAttribute('cn').toArray()[0]);",
        "    });",
        "    accessToken.setField('groups', groups);",
        "  }",
        "}());",
        "",
      ],
    },
    "ed685f9f-5909-4726-86e8-22bd38b47663": {
      "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Converts a normalized social profile into an Identity",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized Profile to Identity",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue identity = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("cn", normalizedProfile.displayName),",
        "        field("userName", normalizedProfile.username),",
        "        field("iplanet-am-user-alias-list", selectedIdp + '-' + normalizedProfile.id.asString())))",
        "",
        "return identity",
      ],
    },
    "f1a2764b-d05a-4480-8f5f-78fda7814227": {
      "_id": "f1a2764b-d05a-4480-8f5f-78fda7814227",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "APIProtection: Reset State",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "APIProtection: Reset States",
      "script": [
        "logger.message("APIProtection: Reset States: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " *",
        " * Outcomes:",
        " * - "true"",
        " */",
        "var KEY_HEADER_NAME = "x-api-key";",
        "var SECRET_HEADER_NAME = "x-api-secret";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "true";",
        "",
        "if (sharedState.get("username") == readValue(KEY_HEADER_NAME)) {",
        "    logger.warning("APIProtection: Reset States: resetting username to:".concat(readValue("username")));",
        "      sharedState.put("username", readValue("username"));",
        "}",
        "",
        "if (transientState.get("password") == readTransientValue(SECRET_HEADER_NAME)) {",
        "    logger.warning("APIProtection: Reset States: resetting password");",
        "      transientState.put("password", readTransientValue("password"));",
        "}",
        "",
        "logger.warning("APIProtection: Reset States: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Read value from storage for APIProtection script use",
        " */",
        "function readValue(name) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Read transient value from storage for APIProtection script use",
        " */",
        "function readTransientValue(name) {",
        "      var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage) {",
        "          if (transientStorage.get) {",
        "            return transientState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return transientStorage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
      ],
    },
  },
}
`;

exports[`ScriptOps readScript() 1: Read script by id 'c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d' 1`] = `
{
  "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "null",
  "creationDate": 0,
  "default": false,
  "description": "Check if username has already been collected.",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "null",
  "lastModifiedDate": 0,
  "name": "FrodoTestScript1",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;

exports[`ScriptOps readScriptByName() 1: Read script by name 'FrodoTestScript1' 1`] = `
{
  "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "null",
  "creationDate": 0,
  "default": false,
  "description": "Check if username has already been collected.",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "null",
  "lastModifiedDate": 0,
  "name": "FrodoTestScript1",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;

exports[`ScriptOps readScripts() 1: Read scripts 1`] = `
[
  {
    "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from GitHub",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "GitHub Profile Normalization (VS)",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci53YXJuaW5nKCJHaXRIdWIgcmF3UHJvZmlsZTogIityYXdQcm9maWxlKQoKcmV0dXJuIGpzb24ob2JqZWN0KAogICAgICAgIGZpZWxkKCJpZCIsIHJhd1Byb2ZpbGUuaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIHJhd1Byb2ZpbGUuZmlyc3RfbmFtZSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmxhc3RfbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5waWN0dXJlLmRhdGEudXJsKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLmVtYWlsKSkp",
  },
  {
    "_id": "3156d7e9-1589-4ffb-a659-37a1647ee03d",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Converts a normalized social profile coming from ADFS into a managed user",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized ADFS Profile to Managed User",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgbWFuYWdlZFVzZXIgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlck5hbWUiLCBub3JtYWxpemVkUHJvZmlsZS51c2VybmFtZSkpKQoKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgicG9zdGFsQWRkcmVzcyIsIG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MpCmlmIChub3JtYWxpemVkUHJvZmlsZS5hZGRyZXNzTG9jYWxpdHkuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgiY2l0eSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NMb2NhbGl0eSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24uaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgic3RhdGVQcm92aW5jZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24pCmlmIChub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInBvc3RhbENvZGUiLCBub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlKQppZiAobm9ybWFsaXplZFByb2ZpbGUuY291bnRyeS5pc05vdE51bGwoKSkgbWFuYWdlZFVzZXIucHV0KCJjb3VudHJ5Iiwgbm9ybWFsaXplZFByb2ZpbGUuY291bnRyeSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBob25lLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInRlbGVwaG9uZU51bWJlciIsIG5vcm1hbGl6ZWRQcm9maWxlLnBob25lKQptYW5hZ2VkVXNlci5wdXQoImFjY291bnRTdGF0dXMiLCAobm9ybWFsaXplZFByb2ZpbGUucm9sZXMuYXNTdHJpbmcoKSA9PSAiZmlkYy12b2xrZXItZGV2LWFkbWlucyIpID8gJ0FjdGl2ZScgOiAnSW5hY3RpdmUnKQoKLy8gaWYgdGhlIGdpdmVuTmFtZSBhbmQgZmFtaWx5TmFtZSBpcyBudWxsIG9yIGVtcHR5Ci8vIHRoZW4gYWRkIGEgYm9vbGVhbiBmbGFnIHRvIHRoZSBzaGFyZWQgc3RhdGUgdG8gaW5kaWNhdGUgbmFtZXMgYXJlIG5vdCBwcmVzZW50Ci8vIHRoaXMgY291bGQgYmUgdXNlZCBlbHNld2hlcmUKLy8gZm9yIGVnLiB0aGlzIGNvdWxkIGJlIHVzZWQgaW4gYSBzY3JpcHRlZCBkZWNpc2lvbiBub2RlIHRvIGJ5LXBhc3MgcGF0Y2hpbmcKLy8gdGhlIHVzZXIgb2JqZWN0IHdpdGggYmxhbmsgdmFsdWVzIHdoZW4gZ2l2ZW5OYW1lICBhbmQgZmFtaWx5TmFtZSBpcyBub3QgcHJlc2VudApib29sZWFuIG5vR2l2ZW5OYW1lID0gbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmFzU3RyaW5nKCk/LnRyaW0oKSkKYm9vbGVhbiBub0ZhbWlseU5hbWUgPSBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZmFtaWx5TmFtZS5hc1N0cmluZygpPy50cmltKCkpCnNoYXJlZFN0YXRlLnB1dCgibmFtZUVtcHR5T3JOdWxsIiwgbm9HaXZlbk5hbWUgJiYgbm9GYW1pbHlOYW1lKQoKcmV0dXJuIG1hbmFnZWRVc2VyCg==",
  },
  {
    "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Default alpha realm script for OIDC claims",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha OIDC Claims Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTQtMjAyMSBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUwogKiBvciB3aXRoIG9uZSBvZiBpdHMgYWZmaWxpYXRlcy4gQWxsIHVzZSBzaGFsbCBiZSBleGNsdXNpdmVseSBzdWJqZWN0CiAqIHRvIHN1Y2ggbGljZW5zZSBiZXR3ZWVuIHRoZSBsaWNlbnNlZSBhbmQgRm9yZ2VSb2NrIEFTLgogKi8KCi8qCiAqIFRoaXMgc2NyaXB0IGNvbXB1dGVzIGNsYWltIHZhbHVlcyByZXR1cm5lZCBpbiBJRCB0b2tlbnMgYW5kL29yIGF0IHRoZSBVc2VySW5mbyBFbmRwb2ludC4KICogVGhlIGNsYWltIHZhbHVlcyBhcmUgY29tcHV0ZWQgZm9yOgogKiB0aGUgY2xhaW1zIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICogdGhlIGNsYWltcyBwcm92aWRlZCBieSB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIsCiAqIGFuZCB0aGUgY2xhaW1zIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHZpYSB0aGUgY2xhaW1zIHBhcmFtZXRlci4KICoKICogSW4gdGhlIENPTkZJR1VSQVRJT04gQU5EIENVU1RPTUlaQVRJT04gc2VjdGlvbiwgeW91IGNhbgogKiBkZWZpbmUgdGhlIHNjb3BlLXRvLWNsYWltcyBtYXBwaW5nLCBhbmQKICogYXNzaWduIHRvIGVhY2ggY2xhaW0gYSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IHdpbGwgY29tcHV0ZSB0aGUgY2xhaW0gdmFsdWUuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzIChjbGFzcyByZWZlcmVuY2VzIGFyZSBwcm92aWRlZCBiZWxvdyk6CiAqIHNjb3BlcyAtIFNldDxTdHJpbmc+ICg2KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogKiBjbGFpbXMgLSBNYXA8U3RyaW5nLCBPYmplY3Q+ICg1KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogY2xhaW1PYmplY3RzIC0gTGlzdDxDbGFpbT4gKDcsIDIpLgogKiAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogcmVxdWVzdGVkQ2xhaW1zIC0gTWFwPFN0cmluZywgU2V0PFN0cmluZz4+ICg1KS4KICogICAgICAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIG5vdCBlbXB0eSBpZiB0aGUgcmVxdWVzdCBjb250YWlucyB0aGUgY2xhaW1zIHBhcmFtZXRlciBhbmQgdGhlIHNlcnZlciBoYXMgZW5hYmxlZAogKiAgICAgICAgICAgICAgICAgICBjbGFpbXNfcGFyYW1ldGVyX3N1cHBvcnRlZC4gQSBtYXAgb2YgdGhlIHJlcXVlc3RlZCBjbGFpbXMgdG8gcG9zc2libGUgdmFsdWVzLCBvdGhlcndpc2UgZW1wdHk7CiAqICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZCBjbGFpbXMgd2l0aCBubyByZXF1ZXN0ZWQgdmFsdWVzIHdpbGwgaGF2ZSBhIGtleSBidXQgbm8gdmFsdWUgaW4gdGhlIG1hcC4gQSBrZXkgd2l0aAogKiAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSB2YWx1ZSBpbiBpdHMgU2V0ICg2KSBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiByZXF1ZXN0ZWRUeXBlZENsYWltcyAtIExpc3Q8Q2xhaW0+ICg3LCAyKS4KICogICAgICAgICAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIHJlcXVlc3RlZCBjbGFpbXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdGVkIGNsYWltcyB3aXRoIG5vIHJlcXVlc3RlZCB2YWx1ZXMgd2lsbCBoYXZlIGEgY2xhaW0gd2l0aCBubyB2YWx1ZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgQSBjbGFpbSB3aXRoIGEgc2luZ2xlIHZhbHVlIGluZGljYXRlcyB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiBjbGFpbXNMb2NhbGVzIC0gTGlzdDxTdHJpbmc+ICg3KS4KICogICAgICAgICAgICAgICAgIFRoZSB2YWx1ZXMgZnJvbSB0aGUgJ2NsYWltc19sb2NhbGVzJyBwYXJhbWV0ZXIuCiAqICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjQ2xhaW1zTGFuZ3VhZ2VzQW5kU2NyaXB0cyBmb3IgdGhlIE9JREMgc3BlY2lmaWNhdGlvbiBkZXRhaWxzLgogKiByZXF1ZXN0UHJvcGVydGllcyAtIFVubW9kaWZpYWJsZSBNYXAgKDUpLgogKiAgICAgICAgICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCBjb250YWlucyBhIG1hcCBvZiByZXF1ZXN0IHByb3BlcnRpZXM6CiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFVyaSAtIFRoZSByZXF1ZXN0IFVSSS4KICogICAgICAgICAgICAgICAgICAgICByZWFsbSAtIFRoZSByZWFsbSB0aGF0IHRoZSByZXF1ZXN0IHJlbGF0ZXMgdG8uCiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBhcmFtcyAtIEEgbWFwIG9mIHRoZSByZXF1ZXN0IHBhcmFtcyBhbmQvb3IgcG9zdGVkIGRhdGEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVhY2ggdmFsdWUgaXMgYSBsaXN0IG9mIG9uZSBvciBtb3JlIHByb3BlcnRpZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsZWFzZSBub3RlIHRoYXQgdGhlc2Ugc2hvdWxkIGJlIGhhbmRsZWQgaW4gYWNjb3JkYW5jZSB3aXRoIE9XQVNQIGJlc3QgcHJhY3RpY2VzOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL293YXNwLm9yZy93d3ctY29tbXVuaXR5L3Z1bG5lcmFiaWxpdGllcy9VbnNhZmVfdXNlX29mX1JlZmxlY3Rpb24uCiAqIGNsaWVudFByb3BlcnRpZXMgLSBVbm1vZGlmaWFibGUgTWFwICg1KS4KICogICAgICAgICAgICAgICAgICAgIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzcGVjaWZpZWQgaW4gdGhlIHJlcXVlc3Qgd2FzIGlkZW50aWZpZWQsIGNvbnRhaW5zIGEgbWFwIG9mIGNsaWVudCBwcm9wZXJ0aWVzOgogKiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQgLSBUaGUgY2xpZW50J3MgVVJJIGZvciB0aGUgcmVxdWVzdCBsb2NhbGUuCiAqICAgICAgICAgICAgICAgICAgICBhbGxvd2VkR3JhbnRUeXBlcyAtIExpc3Qgb2YgdGhlIGFsbG93ZWQgZ3JhbnQgdHlwZXMgKG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuR3JhbnRUeXBlKSBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRSZXNwb25zZVR5cGVzIC0gTGlzdCBvZiB0aGUgYWxsb3dlZCByZXNwb25zZSB0eXBlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRTY29wZXMgLSBMaXN0IG9mIHRoZSBhbGxvd2VkIHNjb3BlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXMgLSBBIG1hcCBvZiB0aGUgY3VzdG9tIHByb3BlcnRpZXMgb2YgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0cyBvciBtYXBzIHdpbGwgYmUgaW5jbHVkZWQgYXMgc3ViLW1hcHM7IGZvciBleGFtcGxlOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbU1hcFtLZXkxXT1WYWx1ZTEgd2lsbCBiZSByZXR1cm5lZCBhcyBjdXN0b21NYXAgLT4gS2V5MSAtPiBWYWx1ZTEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG8gYWRkIGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGEgY2xpZW50LCB1cGRhdGUgdGhlIEN1c3RvbSBQcm9wZXJ0aWVzIGZpZWxkCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gQU0gQ29uc29sZSA+IFJlYWxtIE5hbWUgPiBBcHBsaWNhdGlvbnMgPiBPQXV0aCAyLjAgPiBDbGllbnRzID4gQ2xpZW50IElEID4gQWR2YW5jZWQuCiAqIGlkZW50aXR5IC0gQU1JZGVudGl0eSAoMykuCiAqICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVzb3VyY2Ugb3duZXIuCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoNCkuCiAqICAgICAgICAgICBQcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdC4KICogc2NyaXB0TmFtZSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSBzY3JpcHQuCiAqIGxvZ2dlciAtIEFsd2F5cyBwcmVzZW50LCB0aGUgIk9BdXRoMlByb3ZpZGVyIiBkZWJ1ZyBsb2dnZXIgaW5zdGFuY2U6CiAqICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICAgICAgICAgIENvcnJlc3BvbmRpbmcgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLk9JRENfQ0xBSU1TLgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDgpLgogKiAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIENsaWVudCBpbnN0YW5jZToKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1odHRwLWNsaWVudC5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWh0dHAtY2xpZW50LgogKiAgICAgICAgICAgICAgSW4gb3JkZXIgdG8gdXNlIHRoZSBjbGllbnQsIHlvdSBtYXkgbmVlZCB0byBhZGQKICogICAgICAgICAgICAgIG9yZy5mb3JnZXJvY2suaHR0cC5DbGllbnQsCiAqICAgICAgICAgICAgICBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuKiwKICogICAgICAgICAgICAgIGFuZCBvcmcuZm9yZ2Vyb2NrLnV0aWwucHJvbWlzZS5Qcm9taXNlSW1wbAogKiAgICAgICAgICAgICAgdG8gdGhlIGFsbG93ZWQgSmF2YSBjbGFzc2VzIGluIHRoZSBzY3JpcHRpbmcgZW5naW5lIGNvbmZpZ3VyYXRpb24sIGFzIGRlc2NyaWJlZCBpbjoKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHQtZW5naW5lLXNlY3VyaXR5Lmh0bWwKICoKICogUmV0dXJuIC0gYSBuZXcgVXNlckluZm9DbGFpbXMoTWFwPFN0cmluZywgT2JqZWN0PiB2YWx1ZXMsIE1hcDxTdHJpbmcsIExpc3Q8U3RyaW5nPj4gY29tcG9zaXRlU2NvcGVzKSAoMSkgb2JqZWN0LgogKiAgICAgICAgICBUaGUgcmVzdWx0IG9mIHRoZSBsYXN0IHN0YXRlbWVudCBpbiB0aGUgc2NyaXB0IGlzIHJldHVybmVkIHRvIHRoZSBzZXJ2ZXIuCiAqICAgICAgICAgIEN1cnJlbnRseSwgdGhlIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhwcmVzc2lvbiAoYWxzbyBrbm93biBhcyBTZWxmLUV4ZWN1dGluZyBBbm9ueW1vdXMgRnVuY3Rpb24pCiAqICAgICAgICAgIGlzIHRoZSBsYXN0IChhbmQgb25seSkgc3RhdGVtZW50IGluIHRoaXMgc2NyaXB0LCBhbmQgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlY29tZSB0aGUgc2NyaXB0IHJlc3VsdC4KICogICAgICAgICAgRG8gbm90IHVzZSAicmV0dXJuIHZhcmlhYmxlIiBzdGF0ZW1lbnQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uCiAqICAgICAgICAgIFNlZSBSRVNVTFRTIHNlY3Rpb24gZm9yIGFkZGl0aW9uYWwgZGV0YWlscy4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgVXNlckluZm9DbGFpbXMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb2F1dGgyL2NvcmUvVXNlckluZm9DbGFpbXMuaHRtbC4KICogKDIpIENsYWltIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbCkuCiAqICAgICAgICAgQW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGhhcyBtZXRob2RzIHRvIGFjY2VzcwogKiAgICAgICAgIHRoZSBjbGFpbSBuYW1lLCByZXF1ZXN0ZWQgdmFsdWVzLCBsb2NhbGUsIGFuZCB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwuCiAqICgzKSBBTUlkZW50aXR5IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L2lkbS9BTUlkZW50aXR5Lmh0bWwuCiAqICg0KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3MvY29tL2lwbGFuZXQvc3NvL1NTT1Rva2VuLmh0bWwuCiAqICg1KSBNYXAgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL0hhc2hNYXAuaHRtbCwKICogICAgICAgICAgIG9yIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2phdmEvamF2YXNlLzExL2RvY3MvYXBpL2phdmEuYmFzZS9qYXZhL3V0aWwvTGlua2VkSGFzaE1hcC5odG1sLgogKiAoNikgU2V0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9IYXNoU2V0Lmh0bWwuCiAqICg3KSBMaXN0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9BcnJheUxpc3QuaHRtbC4KICogKDgpIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgoqLwoKKGZ1bmN0aW9uICgpIHsKICAgIC8vIFNFVFVQCgogICAgLyoqCiAgICAgKiBDbGFpbSBwcm9jZXNzaW5nIHV0aWxpdGllcy4KICAgICAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHJldXNhYmxlIGZ1bmN0aW9ucyBmb3IgcHJvY2Vzc2luZyBjbGFpbXMuCiAgICAgKiBAc2VlIENMQUlNIFBST0NFU1NJTkcgVVRJTElUSUVTIHNlY3Rpb24gZm9yIGRldGFpbHMuCiAgICAgKi8KICAgIHZhciB1dGlscyA9IGdldFV0aWxzKCk7CgogICAgLy8gQ09ORklHVVJBVElPTiBBTkQgQ1VTVE9NSVpBVElPTgoKICAgIC8qKgogICAgICogT0F1dGggMi4wIHNjb3BlIHZhbHVlcyAoc2NvcGVzKSBjYW4gYmUgdXNlZCBieSB0aGUgQ2xpZW50IHRvIHJlcXVlc3QgT0lEQyBjbGFpbXMuCiAgICAgKgogICAgICogQ2FsbCB0aGlzIGNvbmZpZ3VyYXRpb24gbWV0aG9kLCBhbmQgcGFzcyBpbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQKICAgICAqIGFuIG9iamVjdCB0aGF0IG1hcHMgYSBzY29wZSB2YWx1ZSB0byBhbiBhcnJheSBvZiBjbGFpbSBuYW1lcwogICAgICogdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgYW5kIHJldHVybmVkIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfQogICAgICogZm9yIHRoZSBzY29wZSB2YWx1ZXMgdGhhdCBjb3VsZCBiZSB1c2VkIHRvIHJlcXVlc3QgY2xhaW1zIGFzIGRlZmluZWQgaW4gdGhlIE9JREMgc3BlY2lmaWNhdGlvbi4KICAgICAqCiAgICAgKiBCZWxvdywgZmluZCBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHdvcmsgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiBjaG9vc2UgdGhlIGNsYWltIG5hbWVzIHJldHVybmVkIGZvciBhIHNjb3BlLgogICAgICovCiAgICB1dGlscy5zZXRTY29wZUNsYWltc01hcCh7CiAgICAgICAgcHJvZmlsZTogWwogICAgICAgICAgICAnbmFtZScsCiAgICAgICAgICAgICdmYW1pbHlfbmFtZScsCiAgICAgICAgICAgICdnaXZlbl9uYW1lJywKICAgICAgICAgICAgJ3pvbmVpbmZvJywKICAgICAgICAgICAgJ2xvY2FsZScKICAgICAgICBdLAogICAgICAgIGVtYWlsOiBbJ2VtYWlsJ10sCiAgICAgICAgYWRkcmVzczogWydhZGRyZXNzJ10sCiAgICAgICAgcGhvbmU6IFsncGhvbmVfbnVtYmVyJ10KICAgIH0pOwoKICAgIC8qKgogICAgICogSW4gdGhpcyBzY3JpcHQsIGVhY2ggY2xhaW0KICAgICAqIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICAgICAqIHByb3ZpZGVkIGJ5IHRoZSBhdXRob3JpemF0aW9uIHNlcnZlciwgYW5kCiAgICAgKiByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudCB2aWEgdGhlIGNsYWltcyBwYXJhbWV0ZXIKICAgICAqIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IGEgZnVuY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGFpbSBuYW1lLgogICAgICoKICAgICAqIENhbGwgdGhpcyBjb25maWd1cmF0aW9uIG1ldGhvZCwgYW5kIHBhc3MgaW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50CiAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIGEgY2xhaW0gbmFtZSB0byBhIHJlc29sdmVyIGZ1bmN0aW9uLAogICAgICogd2hpY2ggd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGV4ZWN1dGVkIGZvciBlYWNoIGNsYWltIHByb2Nlc3NlZCBieSB0aGUgc2NyaXB0LgogICAgICoKICAgICAqIFRoZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgdGhlIHJlcXVlc3RlZCBjbGFpbSBpbmZvcm1hdGlvbgogICAgICogaW4gYW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9CiAgICAgKiBmb3IgZGV0YWlscyBvbiB0aGUgQ2xhaW0gY2xhc3MuCiAgICAgKgogICAgICogSWYgdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIHJldHVybnMgYSB2YWx1ZSwKICAgICAqIG90aGVyIHRoYW4gdW5kZWZpbmVkIG9yIG51bGwsCiAgICAgKiB0aGUgY2xhaW0gd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgc2NyaXB0J3MgcmVzdWx0cy4KICAgICAqCiAgICAgKiBUaGUgQ2xhaW0gaW5zdGFuY2UgcHJvdmlkZXMgbWV0aG9kcyB0byBjaGVjawogICAgICogd2hhdCB0aGUgbmFtZSBvZiB0aGUgY2xhaW0gaXMsCiAgICAgKiB3aGljaCB2YWx1ZXMgdGhlIGNsYWltIHJlcXVlc3QgY29udGFpbnMsCiAgICAgKiB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwsIGFuZAogICAgICogd2hpY2ggbG9jYWxlIHRoZSBjbGFpbSBpcyBhc3NvY2lhdGVkIHdpdGguCiAgICAgKiBUaGUgcmVzb2x2ZXIgZnVuY3Rpb24gY2FuIGNvbnNpZGVyIHRoaXMgaW5mb3JtYXRpb24gd2hlbiBjb21wdXRpbmcgYW5kIHJldHVybmluZyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgKgogICAgICogQmVsb3csIGZpbmQgYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdGhhdCBpcyBleHBlY3RlZCB0byB3b3JrIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LgogICAgICogQSByZXVzYWJsZSBmdW5jdGlvbiwgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKFN0cmluZyBhdHRyaWJ1dGUtbmFtZSksCiAgICAgKiBpcyBjYWxsZWQgdG8gcmV0dXJuIGEgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICogQHNlZSBDTEFJTSBSRVNPTFZFUlMgc2VjdGlvbiBmb3IgdGhlIGltcGxlbWVudGF0aW9uIGRldGFpbHMgYW5kIGV4YW1wbGVzLgogICAgICogRm9yIHRoZSBhZGRyZXNzIGNsYWltLCBhbiBleGFtcGxlIG9mIGEgY2xhaW0gcmVzb2x2ZXIgdGhhdCB1c2VzIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIgaXMgcHJvdmlkZWQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiByZXVzZSB0aGUgcHJlZGVmaW5lZCB1dGlscyBtZXRob2RzIHdpdGggeW91ciBjdXN0b20gYXJndW1lbnRzLgogICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBjdXN0b20gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIGEgY2xhaW0gbmFtZSwKICAgICAqIHRoYXQgd2lsbCBjb21wdXRlIGFuZCByZXR1cm4gdGhlIGNsYWltIHZhbHVl4oCUYXMgc2hvd24gaW4gdGhlIGNvbW1lbnRlZCBvdXQgZXhhbXBsZSBiZWxvdy4KICAgICAqLwogICAgdXRpbHMuc2V0Q2xhaW1SZXNvbHZlcnMoewogICAgICAgIC8qCiAgICAgICAgLy8gQW4gZXhhbXBsZSBvZiBhIHNpbXBsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IGlzIGRlZmluZWQgZm9yIGEgY2xhaW0KICAgICAgICAvLyBkaXJlY3RseSBpbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3Q6CiAgICAgICAgY3VzdG9tLWNsYWltLW5hbWU6IGZ1bmN0aW9uIChyZXF1ZXN0ZWRDbGFpbSkgewogICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGluaXRpYWxseSwgdGhlIGNsYWltIHZhbHVlIGNvbWVzIHN0cmFpZ2h0IGZyb20gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlOgogICAgICAgICAgICB2YXIgY2xhaW1WYWx1ZSA9IGlkZW50aXR5LmdldEF0dHJpYnV0ZSgnY3VzdG9tLWF0dHJpYnV0ZS1uYW1lJykudG9BcnJheSgpWzBdCgogICAgICAgICAgICAvLyBPcHRpb25hbGx5LCBwcm92aWRlIGFkZGl0aW9uYWwgbG9naWMgZm9yIHByb2Nlc3NpbmcgKGZpbHRlcmluZywgZm9ybWF0dGluZywgZXRjLikgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAgICAvLyBZb3UgY2FuIHVzZToKICAgICAgICAgICAgLy8gcmVxdWVzdGVkQ2xhaW0uZ2V0TmFtZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldFZhbHVlcygpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldExvY2FsZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmlzRXNzZW50aWFsKCkKCiAgICAgICAgICAgIHJldHVybiBjbGFpbVZhbHVlCiAgICAgICAgfSwKICAgICAgICAqLwogICAgICAgIC8qKgogICAgICAgICAqIFRoZSB1c2Ugb2YgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIHNob3dzIGhvdwogICAgICAgICAqIGFuIGFyZ3VtZW50IHBhc3NlZCB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNsYWltIHJlc29sdmVyCiAgICAgICAgICogYmVjb21lcyBhdmFpbGFibGUgdG8gdGhlIHJlc29sdmVyIGZ1bmN0aW9uICh2aWEgaXRzIGxleGljYWwgY29udGV4dCkuCiAgICAgICAgICovCiAgICAgICAgbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdjbicpLAogICAgICAgIGZhbWlseV9uYW1lOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3NuJyksCiAgICAgICAgZ2l2ZW5fbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdnaXZlbm5hbWUnKSwKICAgICAgICB6b25laW5mbzogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWR0aW1lem9uZScpLAogICAgICAgIGxvY2FsZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWRsb2NhbGUnKSwKICAgICAgICBlbWFpbDogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdtYWlsJyksCiAgICAgICAgYWRkcmVzczogdXRpbHMuZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXIoCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBUaGUgcGFzc2VkIGluIHVzZXIgcHJvZmlsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiBjYW4gYmUgdXNlZCBieSB0aGUgYWRkcmVzcyBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiB0byBvYnRhaW4gdGhlIGNsYWltIHZhbHVlIHRvIGJlIGZvcm1hdHRlZCBhcyBwZXIgdGhlIE9JREMgc3BlY2lmaWNhdGlvbjoKICAgICAgICAgICAgICogQHNlZSBodHRwczovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNBZGRyZXNzQ2xhaW0uCiAgICAgICAgICAgICAqLwogICAgICAgICAgICB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3Bvc3RhbGFkZHJlc3MnKQogICAgICAgICksCiAgICAgICAgcGhvbmVfbnVtYmVyOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3RlbGVwaG9uZW51bWJlcicpCiAgICB9KTsKCiAgICAvLyBDTEFJTSBQUk9DRVNTSU5HIFVUSUxJVElFUwoKICAgIC8qKgogICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgcmV1c2FibGUgY2xhaW0gcHJvY2Vzc2luZyB1dGlsaXRpZXMuCiAgICAgKiBAc2VlIFBVQkxJQyBNRVRIT0RTIHNlY3Rpb24gYW5kIHRoZSByZXR1cm4gc3RhdGVtZW50IGZvciB0aGUgbGlzdCBvZiBleHBvcnRlZCBmdW5jdGlvbnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFV0aWxzICgpIHsKICAgICAgICAvLyBJTVBPUlQgSkFWQQoKICAgICAgICAvKioKICAgICAgICAgKiBQcm92aWRlcyBKYXZhIHNjcmlwdGluZyBmdW5jdGlvbmFsaXR5LgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9Qcm9qZWN0cy9SaGluby9TY3JpcHRpbmdfSmF2YSNqYXZhaW1wb3J0ZXJfY29uc3RydWN0b3J9LgogICAgICAgICAqLwogICAgICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgICAgIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiwKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltcywKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltLAoKICAgICAgICAgICAgamF2YS51dGlsLkxpbmtlZEhhc2hNYXAsCiAgICAgICAgICAgIGphdmEudXRpbC5BcnJheUxpc3QKICAgICAgICApOwoKICAgICAgICAvLyBTRVQgVVAgQ09ORklHVVJBVElPTgoKICAgICAgICAvKioKICAgICAgICAgKiBQbGFjZWhvbGRlciBmb3IgYSBjb25maWd1cmF0aW9uIG9wdGlvbiB0aGF0IGNvbnRhaW5zCiAgICAgICAgICogYW4gb2JqZWN0IHRoYXQgbWFwcyB0aGUgc3VwcG9ydGVkIHNjb3BlIHZhbHVlcyAoc2NvcGVzKQogICAgICAgICAqIGFuZCB0aGUgY29ycmVzcG9uZGluZyBjbGFpbSBuYW1lcyBmb3IgZWFjaCBzY29wZSB2YWx1ZS4KICAgICAgICAgKi8KICAgICAgICB2YXIgc2NvcGVDbGFpbXNNYXA7CgogICAgICAgIC8qKgogICAgICAgICAqIFBsYWNlaG9sZGVyIGZvciBhIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRoYXQgY29udGFpbnMKICAgICAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAqLwogICAgICAgIHZhciBjbGFpbVJlc29sdmVyczsKCiAgICAgICAgLyoqCiAgICAgICAgICogQSAocHVibGljKSBtZXRob2QgdGhhdCBhY2NlcHRzIGFuIG9iamVjdCB0aGF0IG1hcHMgdGhlIHN1cHBvcnRlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMgZWFjaCBzdXBwb3J0ZWQgc2NvcGUgdmFsdWUgdG8gYW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMsCiAgICAgICAgICogaW4gb3JkZXIgdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgZm9yIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfSBmb3IgZGV0YWlscy4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLnByb2ZpbGVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHByb2ZpbGUgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMuZW1haWxdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGVtYWlsIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLmFkZHJlc3NdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGFkZHJlc3Mgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMucGhvbmVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHBob25lIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNldFNjb3BlQ2xhaW1zTWFwKHBhcmFtcykgewogICAgICAgICAgICBzY29wZUNsYWltc01hcCA9IHBhcmFtczsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEEgKHB1YmxpYykgbWV0aG9kIHRoYXQgYWNjZXB0cyBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMKICAgICAgICAgKiBlYWNoIHN1cHBvcnRlZCBjbGFpbSBuYW1lIHRvIGEgZnVuY3Rpb24gdGhhdCBjb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2V0Q2xhaW1SZXNvbHZlcnMocGFyYW1zKSB7CiAgICAgICAgICAgIGNsYWltUmVzb2x2ZXJzID0gcGFyYW1zOwogICAgICAgIH0KCiAgICAgICAgLy8gQ0xBSU0gUkVTT0xWRVJTCgogICAgICAgIC8qKgogICAgICAgICAqIENsYWltIHJlc29sdmVycyBhcmUgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHBhcmFtIHsqfQogICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAqLwoKICAgICAgICAvKioKICAgICAgICAgKiBEZWZpbmVzIGEgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIC0gTmFtZSBvZiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGRldGVybWluZSB0aGUgY2xhaW0gdmFsdWUKICAgICAgICAgKiBiYXNlZCBvbiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZSBhbmQgdGhlIChyZXF1ZXN0ZWQpIGNsYWltIHByb3BlcnRpZXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIChhdHRyaWJ1dGVOYW1lKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXNvbHZlcyBhIGNsYWltIHdpdGggYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAgICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGUgaWRlbnRpdHkgYXR0cmlidXRlIGlzIG5vdCBwb3B1bGF0ZWQsCiAgICAgICAgICAgICAqIE9SIGlmIHRoZSBjbGFpbSBoYXMgcmVxdWVzdGVkIHZhbHVlcyB0aGF0IGRvIG5vdCBjb250YWluIHRoZSBpZGVudGl0eSBhdHRyaWJ1dGUgdmFsdWUuCiAgICAgICAgICAgICAqIEFUVEVOVElPTjogdGhlIGFmb3JlbWVudGlvbmVkIGNvbXBhcmlzb24gaXMgY2FzZS1zZW5zaXRpdmUuCiAgICAgICAgICAgICAqIEBwYXJhbSB7b3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltfSBjbGFpbQogICAgICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciBkZXRhaWxzLgogICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfEhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUNsYWltKGNsYWltKSB7CiAgICAgICAgICAgICAgICB2YXIgdXNlclByb2ZpbGVWYWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkpIHsKICAgICAgICAgICAgICAgICAgICB1c2VyUHJvZmlsZVZhbHVlID0gZ2V0Q2xhaW1WYWx1ZUZyb21TZXQoY2xhaW0sIGlkZW50aXR5LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSk7CgogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyUHJvZmlsZVZhbHVlICYmICF1c2VyUHJvZmlsZVZhbHVlLmlzRW1wdHkoKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsYWltLmdldFZhbHVlcygpIHx8IGNsYWltLmdldFZhbHVlcygpLmlzRW1wdHkoKSB8fCBjbGFpbS5nZXRWYWx1ZXMoKS5jb250YWlucyh1c2VyUHJvZmlsZVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJQcm9maWxlVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW07CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSBjbGFpbSB2YWx1ZSBvYnRhaW5lZCB3aXRoIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIuCiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZUNsYWltIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGFjY2VwdCBhIGNsYWltIGFzIGFuIGFyZ3VtZW50LAogICAgICAgICAqIHJ1biB0aGUgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIHRoZSBjbGFpbSBhbmQgb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwKICAgICAgICAgKiBhbmQgYXBwbHkgYWRkaXRpb25hbCBmb3JtYXR0aW5nIHRvIHRoZSB2YWx1ZSBiZWZvcmUgcmV0dXJuaW5nIGl0LgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldEFkZHJlc3NDbGFpbVJlc29sdmVyIChyZXNvbHZlQ2xhaW0pIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIENyZWF0ZXMgYW4gYWRkcmVzcyBjbGFpbSBvYmplY3QgZnJvbSBhIHZhbHVlIHJldHVybmVkIGJ5IGEgY2xhaW0gcmVzb2x2ZXIsCiAgICAgICAgICAgICAqIGFuZCByZXR1cm5zIHRoZSBhZGRyZXNzIGNsYWltIG9iamVjdCBhcyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0FkZHJlc3NDbGFpbX0uCiAgICAgICAgICAgICAqIFRoZSBjbGFpbSB2YWx1ZSBpcyBvYnRhaW5lZCB3aXRoIGEgY2xhaW0gcmVzb2x2aW5nIGZ1bmN0aW9uIGF2YWlsYWJsZSBmcm9tIHRoZSBjbG9zdXJlLgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfHVuZGVmaW5lZH0gVGhlIGFkZHJlc3MgY2xhaW0gb2JqZWN0IGNyZWF0ZWQgZnJvbSBhIGNsYWltIHZhbHVlLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUFkZHJlc3NDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NPYmplY3Q7CgogICAgICAgICAgICAgICAgaWYgKGlzQ2xhaW1WYWx1ZVZhbGlkKGNsYWltVmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc09iamVjdCA9IG5ldyBmckphdmEuTGlua2VkSGFzaE1hcCgpOwoKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzT2JqZWN0LnB1dCgnZm9ybWF0dGVkJywgY2xhaW1WYWx1ZSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRyZXNzT2JqZWN0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFkZHJlc3NDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgYW4gZXNzZW50aWFsIGNsYWltIHJlc29sdmVyIGJhc2VkIG9uIGEgY2xhaW0gdmFsdWUgb2J0YWluZWQgd2l0aCBhbm90aGVyIGNsYWltIHJlc29sdmVyLgogICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVDbGFpbSAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHJldHVybnMge2Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBhY2NlcHQgYSBjbGFpbSBhcyBhbiBhcmd1bWVudCwKICAgICAgICAgKiBydW4gdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIGZvciB0aGUgY2xhaW0gYW5kIG9idGFpbiB0aGUgY2xhaW0gdmFsdWUsCiAgICAgICAgICogYW5kIGFwcGx5IGFkZGl0aW9uYWwgbG9naWMgZm9yIGVzc2VudGlhbCBjbGFpbXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0RXNzZW50aWFsQ2xhaW1SZXNvbHZlciAocmVzb2x2ZUNsYWltKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXR1cm5zIGEgY2xhaW0gdmFsdWUgb3IgdGhyb3dzIGFuIGVycm9yLgogICAgICAgICAgICAgKiBUaGUgY2xhaW0gdmFsdWUgaXMgb2J0YWluZWQgd2l0aCBhIGNsYWltIHJlc29sdmluZyBmdW5jdGlvbiBhdmFpbGFibGUgZnJvbSB0aGUgY2xvc3VyZS4KICAgICAgICAgICAgICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgY2xhaW0gaXMgZXNzZW50aWFsIGFuZCBubyB2YWx1ZSBpcyByZXR1cm5lZCBmb3IgdGhlIGNsYWltLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBVc2Ugb2YgdGhpcyByZXNvbHZlciBpcyBvcHRpb25hbC4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjSW5kaXZpZHVhbENsYWltc1JlcXVlc3RzfSBzdGF0aW5nOgogICAgICAgICAgICAgKiAiTm90ZSB0aGF0IGV2ZW4gaWYgdGhlIENsYWltcyBhcmUgbm90IGF2YWlsYWJsZSBiZWNhdXNlIHRoZSBFbmQtVXNlciBkaWQgbm90IGF1dGhvcml6ZSB0aGVpciByZWxlYXNlIG9yIHRoZXkgYXJlIG5vdCBwcmVzZW50LAogICAgICAgICAgICAgKiB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXIgTVVTVCBOT1QgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBDbGFpbXMgYXJlIG5vdCByZXR1cm5lZCwgd2hldGhlciB0aGV5IGFyZSBFc3NlbnRpYWwgb3IgVm9sdW50YXJ5LAogICAgICAgICAgICAgKiB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZCBpbiB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHNwZWNpZmljIGNsYWltLiIKICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHBhcmFtIHtvcmcuZm9yZ2Vyb2NrLm9wZW5pZGNvbm5lY3QuQ2xhaW19IGNsYWltCiAgICAgICAgICAgICAqIEFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgdG8gb2J0YWluIGluZm9ybWF0aW9uL3JlcXVpcmVtZW50cyBhc3NvY2lhdGVkIHdpdGggYSBjbGFpbS4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqLwogICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRXNzZW50aWFsQ2xhaW0oY2xhaW0pIHsKICAgICAgICAgICAgICAgIHZhciBjbGFpbVZhbHVlID0gcmVzb2x2ZUNsYWltKGNsYWltKTsKCiAgICAgICAgICAgICAgICBpZiAoY2xhaW0uaXNFc3NlbnRpYWwoKSAmJiAhaXNDbGFpbVZhbHVlVmFsaWQoY2xhaW1WYWx1ZSkpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZnJKYXZhLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uKCdDb3VsZCBub3QgcHJvdmlkZSB2YWx1ZSBmb3IgZXNzZW50aWFsIGNsYWltOiAnICsgY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1WYWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVFc3NlbnRpYWxDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFByb3ZpZGVzIGRlZmF1bHQgcmVzb2x1dGlvbiBmb3IgYSBjbGFpbS4KICAgICAgICAgKiBVc2UgaXQgaWYgYSBjbGFpbS1zcGVjaWZpYyByZXNvbHZlciBpcyBub3QgZGVmaW5lZCBpbiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHJldHVybnMgeyp9IEEgc2luZ2xlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNsYWltLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbnlDbGFpbSAoY2xhaW0pIHsKICAgICAgICAgICAgaWYgKGNsYWltLmdldFZhbHVlcygpLnNpemUoKSA9PT0gMSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNsYWltLmdldFZhbHVlcygpLnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gVVRJTElUSUVTCgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgY2xhaW0gdmFsdWUgZnJvbSBhIHNldC4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIGEgc2luZ2xlIHZhbHVlLCByZXR1cm5zIHRoZSB2YWx1ZS4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIG11bHRpcGxlIHZhbHVlcywgcmV0dXJucyB0aGUgc2V0LgogICAgICAgICAqIE90aGVyd2lzZSwgcmV0dXJucyB1bmRlZmluZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHBhcmFtIHtqYXZhLnV0aWwuSGFzaFNldH0gc2V0IFRoZSBzZXTigJRmb3IgZXhhbXBsZSwgYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8amF2YS51dGlsLkhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldENsYWltVmFsdWVGcm9tU2V0IChjbGFpbSwgc2V0KSB7CiAgICAgICAgICAgIGlmIChzZXQgJiYgc2V0LnNpemUoKSkgewogICAgICAgICAgICAgICAgaWYgKHNldC5zaXplKCkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0LnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChsb2dnZXIud2FybmluZ0VuYWJsZWQoKSkgewogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoJ09JREMgQ2xhaW1zIHNjcmlwdC4gR290IGFuIGVtcHR5IHNldCBmb3IgY2xhaW06ICcgKyBjbGFpbS5nZXROYW1lKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0NsYWltVmFsdWVWYWxpZCAoY2xhaW1WYWx1ZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGNsYWltVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IGNsYWltVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICAvLyBDTEFJTSBQUk9DRVNTSU5HCgogICAgICAgIC8qKgogICAgICAgICAqIENvbnN0cnVjdHMgYW5kIHJldHVybnMgYW4gb2JqZWN0IHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMKICAgICAgICAgKiBhbmQgdGhlIHJlcXVlc3RlZCBzY29wZXMgbWFwcGVkIHRvIHRoZSBjbGFpbSBuYW1lcy4KICAgICAgICAgKiBAcmV0dXJucyB7b3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltc30gVGhlIG9iamVjdCB0byBiZSByZXR1cm5lZCB0byB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIuCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICAgICAqIEBzZWUgUkVTVUxUUyBzZWN0aW9uIGZvciB0aGUgdXNlIG9mIHRoaXMgZnVuY3Rpb24uCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlckluZm9DbGFpbXMgKCkgewogICAgICAgICAgICByZXR1cm4gbmV3IGZySmF2YS5Vc2VySW5mb0NsYWltcyhnZXRDb21wdXRlZENsYWltcygpLCBnZXRDb21wb3NpdGVTY29wZXMoKSk7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIChyZXF1ZXN0ZWQpIGNsYWltIG5hbWVzIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMuCiAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfQogICAgICAgICAqIEEgbWFwIG9mIHRoZSByZXF1ZXN0ZWQgY2xhaW0gbmFtZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIHZhbHVlcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wdXRlZENsYWltcyAoKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29tcGxldGUgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZyb206CiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgZGVyaXZlZCBmcm9tIHRoZSBzY29wZXMsCiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgcHJvdmlkZWQgYnkgdGhlIGF1dGhvcml6YXRpb24gc2VydmVyLAogICAgICAgICAgICAgKiBhbmQgdGhlIGNsYWltcyByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudC4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5BcnJheUxpc3R9CiAgICAgICAgICAgICAqIFJldHVybnMgYSBjb21wbGV0ZSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGF2YWlsYWJsZSB0byB0aGUgc2NyaXB0LgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgdGhlIGNsYWltIG9iamVjdCBkZXRhaWxzLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhaW1zKCkgewogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIFVzZXMgdGhlIHNjb3BlQ2xhaW1zTWFwIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRvIGRlcml2ZSB0aGUgY2xhaW0gbmFtZXM7CiAgICAgICAgICAgICAgICAgKiBubyBvdGhlciBwcm9wZXJ0aWVzIG9mIGEgY2xhaW0gZGVyaXZlZCBmcm9tIGEgc2NvcGUgYXJlIHBvcHVsYXRlZC4KICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuQXJyYXlMaXN0fQogICAgICAgICAgICAgICAgICogQSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciB0aGUgY2xhaW0gb2JqZWN0IGRldGFpbHMuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRTY29wZVRvQ2xhaW1zKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoc2NvcGUpICE9PSAnb3BlbmlkJyAmJiBzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zTWFwW3Njb3BlXS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFpbXMuYWRkKG5ldyBmckphdmEuQ2xhaW0oY2xhaW1OYW1lKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGNsYWltcy5hZGRBbGwoY29udmVydFNjb3BlVG9DbGFpbXMoKSk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKGNsYWltT2JqZWN0cyk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKHJlcXVlc3RlZFR5cGVkQ2xhaW1zKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQ29tcHV0ZXMgYW5kIHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgICAgICogVG8gb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwgdXNlcyB0aGUgcmVzb2x2ZXIgZnVuY3Rpb24gc3BlY2lmaWVkIGZvciB0aGUgY2xhaW0gaW4gdGhlIGNsYWltUmVzb2x2ZXJzIGNvbmZpZ3VyYXRpb24gb2JqZWN0LgogICAgICAgICAgICAgKiBAc2VlIGNsYWltUmVzb2x2ZXJzCiAgICAgICAgICAgICAqIElmIG5vIHJlc29sdmVyIGZ1bmN0aW9uIGlzIGZvdW5kLCB1c2VzIHRoZSBkZWZhdWx0IGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMgeyp9IENsYWltIHZhbHVlLgogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqIFJldGhyb3dzIHRoaXMgZXhjZXB0aW9uIGlmIGEgY2xhaW0gcmVzb2x2ZXIgdGhyb3dzIGl0LgogICAgICAgICAgICAgKiBZb3UgY2FuIHRocm93IG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiBmcm9tIHlvdXIgY3VzdG9tIGNsYWltIHJlc29sdmVyCiAgICAgICAgICAgICAqIGlmIHlvdSB3YW50IHRvIHRlcm1pbmF0ZSB0aGUgY2xhaW0gcHJvY2Vzc2luZy4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIHJlc29sdmVDbGFpbTsKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNsYWltID0gY2xhaW1SZXNvbHZlcnNbY2xhaW0uZ2V0TmFtZSgpXSB8fCByZXNvbHZlQW55Q2xhaW07CgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnT0lEQyBDbGFpbXMgc2NyaXB0IGV4Y2VwdGlvbi4gVW5hYmxlIHRvIHJlc29sdmUgT0lEQyBDbGFpbS4gJyArIGU7CgogICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoZSkuaW5kZXhPZignb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5leGNlcHRpb25zLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uJykgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobG9nZ2VyLndhcm5pbmdFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY29tcHV0ZWRDbGFpbXMgPSBuZXcgZnJKYXZhLkxpbmtlZEhhc2hNYXAoKTsKCiAgICAgICAgICAgIGdldENsYWltcygpLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSBjb21wdXRlQ2xhaW0oY2xhaW0pOwoKICAgICAgICAgICAgICAgIGlmIChpc0NsYWltVmFsdWVWYWxpZChjbGFpbVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkQ2xhaW1zLnB1dChjbGFpbS5nZXROYW1lKCksIGNsYWltVmFsdWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAgICAgKiBJZiBhIGNsYWltIGhhcyBiZWVuIHByb2Nlc3NlZCwgYnV0IGFwcGVhcnMgaW4gdGhlIGxpc3QgYWdhaW4sCiAgICAgICAgICAgICAgICAgICAgICogYW5kIGl0cyB2YWx1ZSBjYW5ub3QgYmUgY29tcHV0ZWQgdW5kZXIgdGhlIG5ldyBjb25kaXRpb25zLAogICAgICAgICAgICAgICAgICAgICAqIHRoZSBjbGFpbSBpcyByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHJlc3VsdC4KICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAqIEZvciBleGFtcGxlLCBhIGNsYWltIGNvdWxkIGJlIG1hcHBlZCB0byBhIHNjb3BlIGFuZCBmb3VuZCBpbiB0aGUgdXNlciBwcm9maWxlLAogICAgICAgICAgICAgICAgICAgICAqIGJ1dCBhbHNvIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHdpdGggcmVxdWlyZWQgdmFsdWVzIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIGNvbXB1dGVkIG9uZS4KICAgICAgICAgICAgICAgICAgICAgKiBAc2VlIHtsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0luZGl2aWR1YWxDbGFpbXNSZXF1ZXN0c30uCiAgICAgICAgICAgICAgICAgICAgICogZm9yIHRoZSByZWxldmFudCBPSURDIHNwZWNpZmljYXRpb24gZGV0YWlscy4KICAgICAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgICAgICBjb21wdXRlZENsYWltcy5yZW1vdmUoY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRDbGFpbXM7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIHJlcXVlc3RlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLgogICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuTGlua2VkSGFzaE1hcH0KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wb3NpdGVTY29wZXMgKCkgewogICAgICAgICAgICB2YXIgY29tcG9zaXRlU2NvcGVzID0gbmV3IGZySmF2YS5MaW5rZWRIYXNoTWFwKCk7CgogICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICB2YXIgc2NvcGVDbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICBzY29wZUNsYWltc01hcFtzY29wZV0uZm9yRWFjaChmdW5jdGlvbiAoY2xhaW1OYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zLmFkZChjbGFpbU5hbWUpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltcy5zaXplKCkpIHsKICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVTY29wZXMucHV0KHNjb3BlLCBzY29wZUNsYWltcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZVNjb3BlczsKICAgICAgICB9CgogICAgICAgIC8vIFBVQkxJQyBNRVRIT0RTCgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNldFNjb3BlQ2xhaW1zTWFwOiBzZXRTY29wZUNsYWltc01hcCwKICAgICAgICAgICAgc2V0Q2xhaW1SZXNvbHZlcnM6IHNldENsYWltUmVzb2x2ZXJzLAogICAgICAgICAgICBnZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXI6IGdldFVzZXJQcm9maWxlQ2xhaW1SZXNvbHZlciwKICAgICAgICAgICAgZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXI6IGdldEFkZHJlc3NDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyOiBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRVc2VySW5mb0NsYWltczogZ2V0VXNlckluZm9DbGFpbXMKICAgICAgICB9OwogICAgfQoKICAgIC8vIFJFU1VMVFMKCiAgICAvKioKICAgICAqIFRoaXMgc2NyaXB0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuVXNlckluZm9DbGFpbXMgY2xhc3MKICAgICAqIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMgYW5kCiAgICAgKiB0aGUgcmVxdWVzdGVkIHNjb3BlcyBtYXBwZWQgdG8gdGhlIGNsYWltIG5hbWVzLgogICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICoKICAgICAqIEFzc2lnbmluZyBpdCB0byBhIHZhcmlhYmxlIGdpdmVzIHlvdSBhbiBvcHBvcnR1bml0eQogICAgICogdG8gbG9nIHRoZSBjb250ZW50IG9mIHRoZSByZXR1cm5lZCB2YWx1ZSBkdXJpbmcgZGV2ZWxvcG1lbnQuCiAgICAgKi8KICAgIHZhciB1c2VySW5mb0NsYWltcyA9IHV0aWxzLmdldFVzZXJJbmZvQ2xhaW1zKCk7CgogICAgLyoKICAgIGxvZ2dlci5lcnJvcihzY3JpcHROYW1lICsgJyByZXN1bHRzOicpCiAgICBsb2dnZXIuZXJyb3IoJ1ZhbHVlczogJyArIHVzZXJJbmZvQ2xhaW1zLmdldFZhbHVlcygpKQogICAgbG9nZ2VyLmVycm9yKCdTY29wZXM6ICcgKyB1c2VySW5mb0NsYWltcy5nZXRDb21wb3NpdGVTY29wZXMoKSkKICAgICovCgogICAgcmV0dXJuIHVzZXJJbmZvQ2xhaW1zOwp9KCkpOw==",
  },
  {
    "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Amazon",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Amazon Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJfaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQ==",
  },
  {
    "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
    "context": "AUTHENTICATION_CLIENT_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for client side Scripted Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Module - Client Side",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTYtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qIERlZmF1bHQgQXV0aGVudGljYXRpb24gY2xpZW50IHNpZGUgc2NyaXB0IHRvIHVzZSBhcyBhIHRlbXBsYXRlIGZvciBuZXcgc2NyaXB0cyAqLw==",
  },
  {
    "_id": "58d29080-4563-480b-89bb-1e7719776a21",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Google",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Google Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImxvY2FsZSIsIHJhd1Byb2ZpbGUubG9jYWxlKSkp",
  },
  {
    "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Used by endUserUIClient",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
    "script": "KGZ1bmN0aW9uICgpIHsKICBpZiAoc2NvcGVzLmNvbnRhaW5zKCdmcjphdXRvYWNjZXNzOionKSB8fCBzY29wZXMuY29udGFpbnMoJ2ZyOmlnYToqJykpIHsKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgY29tLnN1bi5pZGVudGl0eS5pZG0uSWRUeXBlCiAgICApOwogICAgdmFyIGdyb3VwcyA9IFtdOwogICAgaWRlbnRpdHkuZ2V0TWVtYmVyc2hpcHMoZnIuSWRUeXBlLkdST1VQKS50b0FycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgZ3JvdXBzLnB1c2goZ3JvdXAuZ2V0QXR0cmlidXRlKCdjbicpLnRvQXJyYXkoKVswXSk7CiAgICB9KTsKICAgIGFjY2Vzc1Rva2VuLnNldEZpZWxkKCdncm91cHMnLCBncm91cHMpOwogIH0KfSgpKTsK",
  },
  {
    "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from VKontakte",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "VKontakte Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGhvdG9fNTApLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpKSk=",
  },
  {
    "_id": "a873fcd8-8f17-4675-9dd6-54ab1c11e2df",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Record that MFA has been performed for this journey and no longer needs to be performed. This allows journeys and inner journeys to check that flag before performing MFA multiple times.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Record MFA",
    "script": "LyogTUZBIFN0YXR1cwogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBSZWNvcmQgdGhhdCBNRkEgaGFzIGJlZW4gcGVyZm9ybWVkIGZvciB0aGlzIGpvdXJuZXkgYW5kIG5vIGxvbmdlciBuZWVkcyAKICogdG8gYmUgcGVyZm9ybWVkLiBUaGlzIGFsbG93cyBqb3VybmV5cyBhbmQgaW5uZXIgam91cm5leXMgdG8gY2hlY2sgdGhhdCAKICogZmxhZyBiZWZvcmUgcGVyZm9ybWluZyBNRkEgbXVsdGlwbGUgdGltZXMuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICovCm91dGNvbWUgPSAidHJ1ZSI7CnNoYXJlZFN0YXRlLnB1dCgibWZhUGVyZm9ybWVkIiwgInRydWUiKTs=",
  },
  {
    "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Yahoo",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Yahoo Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImxvY2FsZSIsIHJhd1Byb2ZpbGUubG9jYWxlKSkp",
  },
  {
    "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
    "context": "POLICY_CONDITION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for Scripted Policy Conditions",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Policy Condition",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qKgogKiBUaGlzIGlzIGEgUG9saWN5IENvbmRpdGlvbiBleGFtcGxlIHNjcmlwdC4gSXQgZGVtb25zdHJhdGVzIGhvdyB0byBhY2Nlc3MgYSB1c2VyJ3MgaW5mb3JtYXRpb24sCiAqIHVzZSB0aGF0IGluZm9ybWF0aW9uIGluIGV4dGVybmFsIEhUVFAgY2FsbHMgYW5kIG1ha2UgYSBwb2xpY3kgZGVjaXNpb24gYmFzZWQgb24gdGhlIG91dGNvbWUuCiAqLwoKdmFyIHVzZXJBZGRyZXNzLCB1c2VySVAsIHJlc291cmNlSG9zdDsKCmlmICh2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkpIHsKCiAgICB2YXIgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9IGdldENvdW50cnlGcm9tVXNlckFkZHJlc3MoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJDb3VudHJ5IHJldHJpZXZlZCBmcm9tIHVzZXIncyBhZGRyZXNzOiAiICsgY291bnRyeUZyb21Vc2VyQWRkcmVzcyk7CiAgICB2YXIgY291bnRyeUZyb21Vc2VySVAgPSBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpOwogICAgbG9nZ2VyLm1lc3NhZ2UoIkNvdW50cnkgcmV0cmlldmVkIGZyb20gdXNlcidzIElQOiAiICsgY291bnRyeUZyb21Vc2VySVApOwogICAgdmFyIGNvdW50cnlGcm9tUmVzb3VyY2VVUkkgPSBnZXRDb3VudHJ5RnJvbVJlc291cmNlVVJJKCk7CiAgICBsb2dnZXIubWVzc2FnZSgiQ291bnRyeSByZXRyaWV2ZWQgZnJvbSByZXNvdXJjZSBVUkk6ICIgKyBjb3VudHJ5RnJvbVJlc291cmNlVVJJKTsKCiAgICBpZiAoY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21Vc2VySVAgJiYgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21SZXNvdXJjZVVSSSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIFN1Y2NlZWRlZCIpOwogICAgICAgIHJlc3BvbnNlQXR0cmlidXRlcy5wdXQoImNvdW50cnlPZk9yaWdpbiIsIFtjb3VudHJ5RnJvbVVzZXJBZGRyZXNzXSk7CiAgICAgICAgYXV0aG9yaXplZCA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIEZhaWxlZCIpOwogICAgICAgIGF1dGhvcml6ZWQgPSBmYWxzZTsKICAgIH0KCn0gZWxzZSB7CiAgICBsb2dnZXIubWVzc2FnZSgiUmVxdWlyZWQgcGFyYW1ldGVycyBub3QgZm91bmQuIEF1dGhvcml6YXRpb24gRmFpbGVkLiIpOwogICAgYXV0aG9yaXplZCA9IGZhbHNlOwp9CgovKioKICogVXNlIHRoZSB1c2VyJ3MgYWRkcmVzcyB0byBsb29rdXAgdGhlaXIgY291bnRyeSBvZiByZXNpZGVuY2UuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgdXNlcidzIGNvdW50cnkgb2YgcmVzaWRlbmNlLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21Vc2VyQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlckFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgZ2VvY29kZSA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvY29kZS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGdlb2NvZGUucmVzdWx0c1tpXTsKICAgICAgICB2YXIgajsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgcmVzdWx0LmFkZHJlc3NfY29tcG9uZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAocmVzdWx0LmFkZHJlc3NfY29tcG9uZW50c1tpXS50eXBlc1swXSA9PSAiY291bnRyeSIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuYWRkcmVzc19jb21wb25lbnRzW2ldLmxvbmdfbmFtZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLyoqCiAqIFVzZSB0aGUgdXNlcidzIElQIHRvIGxvb2t1cCB0aGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqLwpmdW5jdGlvbiBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgdXNlcklQKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3VudHJ5OwogICAgfQp9CgovKioKICogVXNlIHRoZSByZXF1ZXN0ZWQgcmVzb3VyY2UncyBob3N0IG5hbWUgdG8gbG9va3VwIHRoZSBjb3VudHJ5IHdoZXJlIHRoZSByZXNvdXJjZSBpcyBob3N0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBpbiB3aGljaCB0aGUgcmVzb3VyY2UgaXMgaG9zdGVkLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21SZXNvdXJjZVVSSSgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlc291cmNlSG9zdCkpOwogICAgICByZXF1ZXN0LnNldE1ldGhvZCgiR0VUIik7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgbG9nUmVzcG9uc2UocmVzcG9uc2UpOwoKICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gcmVzdWx0LmNvdW50cnk7CiAgICB9Cn0KCi8qKgogKiBSZXRyaWV2ZSBhbmQgdmFsaWRhdGUgdGhlIHZhcmlhYmxlcyByZXF1aXJlZCB0byBtYWtlIHRoZSBleHRlcm5hbCBIVFRQIGNhbGxzLgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2lsbCBiZSB0cnVlIGlmIHZhbGlkYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAqLwpmdW5jdGlvbiB2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkgewogICAgdmFyIHVzZXJBZGRyZXNzU2V0ID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlKCJwb3N0YWxBZGRyZXNzIik7CiAgICBpZiAodXNlckFkZHJlc3NTZXQgPT0gbnVsbCB8fCB1c2VyQWRkcmVzc1NldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gYWRkcmVzcyBzcGVjaWZpZWQgZm9yIHVzZXI6ICIgKyB1c2VybmFtZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdXNlckFkZHJlc3MgPSB1c2VyQWRkcmVzc1NldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIGFkZHJlc3M6ICIgKyB1c2VyQWRkcmVzcyk7CgogICAgaWYgKCFlbnZpcm9ubWVudCkgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJObyBlbnZpcm9ubWVudCBwYXJhbWV0ZXJzIHNwZWNpZmllZCBpbiB0aGUgZXZhbHVhdGlvbiByZXF1ZXN0LiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB2YXIgaXBTZXQgPSBlbnZpcm9ubWVudC5nZXQoIklQIik7CiAgICBpZiAoaXBTZXQgPT0gbnVsbCB8fCBpcFNldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gSVAgc3BlY2lmaWVkIGluIHRoZSBldmFsdWF0aW9uIHJlcXVlc3QgZW52aXJvbm1lbnQgcGFyYW1ldGVycy4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICB1c2VySVAgPSBpcFNldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIElQOiAiICsgdXNlcklQKTsKCiAgICBpZiAoIXJlc291cmNlVVJJKSB7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk5vIHJlc291cmNlIFVSSSBzcGVjaWZpZWQuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmVzb3VyY2VIb3N0ID0gcmVzb3VyY2VVUkkubWF0Y2goL14oLio6XC9cLykod3d3XC4pPyhbQS1aYS16MC05XC1cLl0rKSg6WzAtOV0rKT8oLiopJC8pWzNdOwogICAgbG9nZ2VyLm1lc3NhZ2UoIlJlc291cmNlIGhvc3Q6ICIgKyByZXNvdXJjZUhvc3QpOwoKICAgIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBsb2dSZXNwb25zZShyZXNwb25zZSkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgUkVTVCBDYWxsLiBTdGF0dXM6ICIgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICIsIEJvZHk6ICIgKyByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7Cn0=",
  },
  {
    "_id": "f1a2764b-d05a-4480-8f5f-78fda7814227",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "APIProtection: Reset State",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "APIProtection: Reset States",
    "script": "bG9nZ2VyLm1lc3NhZ2UoIkFQSVByb3RlY3Rpb246IFJlc2V0IFN0YXRlczogc3RhcnQiKTsKCi8qCiAqIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqCiAqIE91dGNvbWVzOgogKiAtICJ0cnVlIgogKi8KdmFyIEtFWV9IRUFERVJfTkFNRSA9ICJ4LWFwaS1rZXkiOwp2YXIgU0VDUkVUX0hFQURFUl9OQU1FID0gIngtYXBpLXNlY3JldCI7Ci8qCiAqIEVORCBTQ1JJUFQgQ09ORklHVVJBVElPTgogKi8KCm91dGNvbWUgPSAidHJ1ZSI7CgppZiAoc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpID09IHJlYWRWYWx1ZShLRVlfSEVBREVSX05BTUUpKSB7CiAgICBsb2dnZXIud2FybmluZygiQVBJUHJvdGVjdGlvbjogUmVzZXQgU3RhdGVzOiByZXNldHRpbmcgdXNlcm5hbWUgdG86Ii5jb25jYXQocmVhZFZhbHVlKCJ1c2VybmFtZSIpKSk7CiAgICAgIHNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCByZWFkVmFsdWUoInVzZXJuYW1lIikpOwp9CgppZiAodHJhbnNpZW50U3RhdGUuZ2V0KCJwYXNzd29yZCIpID09IHJlYWRUcmFuc2llbnRWYWx1ZShTRUNSRVRfSEVBREVSX05BTUUpKSB7CiAgICBsb2dnZXIud2FybmluZygiQVBJUHJvdGVjdGlvbjogUmVzZXQgU3RhdGVzOiByZXNldHRpbmcgcGFzc3dvcmQiKTsKICAgICAgdHJhbnNpZW50U3RhdGUucHV0KCJwYXNzd29yZCIsIHJlYWRUcmFuc2llbnRWYWx1ZSgicGFzc3dvcmQiKSk7Cn0KCmxvZ2dlci53YXJuaW5nKCJBUElQcm90ZWN0aW9uOiBSZXNldCBTdGF0ZXM6IGZpbmlzaCBbb3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIl0iKSk7CgovKgogKiBSZWFkIHZhbHVlIGZyb20gc3RvcmFnZSBmb3IgQVBJUHJvdGVjdGlvbiBzY3JpcHQgdXNlCiAqLwpmdW5jdGlvbiByZWFkVmFsdWUobmFtZSkgewogICAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgiQVBJUHJvdGVjdGlvbiIpOwogICAgaWYgKHN0b3JhZ2UpIHsKICAgICAgICAgIGlmIChzdG9yYWdlLmdldCkgewogICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIikuZ2V0KG5hbWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLm5hbWU7CiAgICAgICAgfQogICAgfQogICAgICByZXR1cm4gbnVsbDsKfQoKLyoKICogUmVhZCB0cmFuc2llbnQgdmFsdWUgZnJvbSBzdG9yYWdlIGZvciBBUElQcm90ZWN0aW9uIHNjcmlwdCB1c2UKICovCmZ1bmN0aW9uIHJlYWRUcmFuc2llbnRWYWx1ZShuYW1lKSB7CiAgICAgIHZhciB0cmFuc2llbnRTdG9yYWdlID0gdHJhbnNpZW50U3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIik7CiAgICBpZiAodHJhbnNpZW50U3RvcmFnZSkgewogICAgICAgICAgaWYgKHRyYW5zaWVudFN0b3JhZ2UuZ2V0KSB7CiAgICAgICAgICAgIHJldHVybiB0cmFuc2llbnRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKS5nZXQobmFtZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaWVudFN0b3JhZ2UubmFtZTsKICAgICAgICB9CiAgICB9CiAgICAgIHJldHVybiBudWxsOwp9",
  },
  {
    "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from LinkedIn",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "LinkedIn Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5maXJzdE5hbWUubG9jYWxpemVkLmdldCgwKSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmxhc3ROYW1lLmxvY2FsaXplZC5nZXQoMCkpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucHJvZmlsZVBpY3R1cmUuZGlzcGxheUltYWdlKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVsZW1lbnRzLmdldCgwKS5nZXQoImhhbmRsZX4iKS5lbWFpbEFkZHJlc3MpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZWxlbWVudHMuZ2V0KDApLmdldCgiaGFuZGxlfiIpLmVtYWlsQWRkcmVzcykpKQ==",
  },
  {
    "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Itsme",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Itsme Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAtMjAyMSBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKaW1wb3J0IG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUKCkpzb25WYWx1ZSBtYW5hZ2VkVXNlciA9IGpzb24ob2JqZWN0KAogICAgICAgIGZpZWxkKCJpZCIsIHJhd1Byb2ZpbGUuc3ViKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmdpdmVuX25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5mYW1pbHlfbmFtZSksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQpyZXR1cm4gbWFuYWdlZFVzZXI=",
  },
  {
    "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript4",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Salesforce",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Salesforce Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJfaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIHJhd1Byb2ZpbGUuZ2l2ZW5fbmFtZSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmZhbWlseV9uYW1lKSwKICAgICAgICBmaWVsZCgicGhvdG9VcmwiLCByYXdQcm9maWxlLnBpY3R1cmUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJsb2NhbGUiLCByYXdQcm9maWxlLnpvbmVJbmZvKSkp",
  },
  {
    "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from ADFS",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ADFS Profile Normalization (JS)",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMKICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGlzIHNjcmlwdCByZXR1cm5zIHRoZSBzb2NpYWwgaWRlbnRpdHkgcHJvZmlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1dGhlbnRpY2F0aW5nIHVzZXIKICogaW4gYSBzdGFuZGFyZCBmb3JtIGV4cGVjdGVkIGJ5IHRoZSBTb2NpYWwgUHJvdmlkZXIgSGFuZGxlciBOb2RlLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICogcmF3UHJvZmlsZSAtIFRoZSBzb2NpYWwgaWRlbnRpdHkgcHJvdmlkZXIgcHJvZmlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1dGhlbnRpY2F0aW5nIHVzZXIuCiAqICAgICAgICAgICAgICBKc29uVmFsdWUgKDEpLgogKiBsb2dnZXIgLSBUaGUgZGVidWcgbG9nZ2VyIGluc3RhbmNlOgogKiAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiByZWFsbSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcmVhbG0gdGhlIHVzZXIgaXMgYXV0aGVudGljYXRpbmcgdG8uCiAqIHJlcXVlc3RIZWFkZXJzIC0gVHJlZU1hcCAoMikuCiAqICAgICAgICAgICAgICAgICAgVGhlIG9iamVjdCB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgZm9yIGFjY2Vzc2luZyBoZWFkZXJzIGluIHRoZSBsb2dpbiByZXF1ZXN0OgogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2F1dGhlbnRpY2F0aW9uLWd1aWRlL3NjcmlwdGluZy1hcGktbm9kZS5odG1sI3NjcmlwdGluZy1hcGktbm9kZS1yZXF1ZXN0SGVhZGVycy4KICogcmVxdWVzdFBhcmFtZXRlcnMgLSBUcmVlTWFwICgyKS4KICogICAgICAgICAgICAgICAgICAgICBUaGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgcGFyYW1ldGVycy4KICogc2VsZWN0ZWRJZHAgLSBTdHJpbmcgKHByaW1pdGl2ZSkuCiAqICAgICAgICAgICAgICAgVGhlIHNvY2lhbCBpZGVudGl0eSBwcm92aWRlciBuYW1lLiBGb3IgZXhhbXBsZTogZ29vZ2xlLgogKiBzaGFyZWRTdGF0ZSAtIExpbmtlZEhhc2hNYXAgKDMpLgogKiAgICAgICAgICAgICAgIFRoZSBvYmplY3QgdGhhdCBob2xkcyB0aGUgc3RhdGUgb2YgdGhlIGF1dGhlbnRpY2F0aW9uIHRyZWUgYW5kIGFsbG93cyBkYXRhIGV4Y2hhbmdlIGJldHdlZW4gdGhlIHN0YXRlbGVzcyBub2RlczoKICogICAgICAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hdXRoLW5vZGVzL2NvcmUtYWN0aW9uLmh0bWwjYWNjZXNzaW5nLXRyZWUtc3RhdGUuCiAqIHRyYW5zaWVudFN0YXRlIC0gTGlua2VkSGFzaE1hcCAoMykuCiAqICAgICAgICAgICAgICAgICAgVGhlIG9iamVjdCBmb3Igc3RvcmluZyBzZW5zaXRpdmUgaW5mb3JtYXRpb24gdGhhdCBtdXN0IG5vdCBsZWF2ZSB0aGUgc2VydmVyIHVuZW5jcnlwdGVkLAogKiAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG1heSBub3QgbmVlZCB0byBwZXJzaXN0IGJldHdlZW4gYXV0aGVudGljYXRpb24gcmVxdWVzdHMgZHVyaW5nIHRoZSBhdXRoZW50aWNhdGlvbiBzZXNzaW9uOgogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2F1dGgtbm9kZXMvY29yZS1hY3Rpb24uaHRtbCNhY2Nlc3NpbmctdHJlZS1zdGF0ZS4KICoKICogUmV0dXJuIC0gYSBKc29uVmFsdWUgKDEpLgogKiAgICAgICAgICBUaGUgcmVzdWx0IG9mIHRoZSBsYXN0IHN0YXRlbWVudCBpbiB0aGUgc2NyaXB0IGlzIHJldHVybmVkIHRvIHRoZSBzZXJ2ZXIuCiAqICAgICAgICAgIEN1cnJlbnRseSwgdGhlIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhwcmVzc2lvbiAoYWxzbyBrbm93biBhcyBTZWxmLUV4ZWN1dGluZyBBbm9ueW1vdXMgRnVuY3Rpb24pCiAqICAgICAgICAgIGlzIHRoZSBsYXN0IChhbmQgb25seSkgc3RhdGVtZW50IGluIHRoaXMgc2NyaXB0LCBhbmQgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlY29tZSB0aGUgc2NyaXB0IHJlc3VsdC4KICogICAgICAgICAgRG8gbm90IHVzZSAicmV0dXJuIHZhcmlhYmxlIiBzdGF0ZW1lbnQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uCiAqCiAqICAgICAgICAgIFRoaXMgc2NyaXB0J3MgbGFzdCBzdGF0ZW1lbnQgc2hvdWxkIHJlc3VsdCBpbiBhIEpzb25WYWx1ZSAoMSkgd2l0aCB0aGUgZm9sbG93aW5nIGtleXM6CiAqICAgICAgICAgIHsKICogICAgICAgICAgICAgIHsiZGlzcGxheU5hbWUiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiZW1haWwiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiZmFtaWx5TmFtZSI6ICJjb3JyZXNwb25kaW5nLXNvY2lhbC1pZGVudGl0eS1wcm92aWRlci12YWx1ZSJ9LAogKiAgICAgICAgICAgICAgeyJnaXZlbk5hbWUiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiaWQiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsibG9jYWxlIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0sCiAqICAgICAgICAgICAgICB7InBob3RvVXJsIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0sCiAqICAgICAgICAgICAgICB7InVzZXJuYW1lIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0KICogICAgICAgICAgfQogKgogKiAgICAgICAgICBUaGUgY29uc3VtZXIgb2YgdGhpcyBkYXRhIGRlZmluZXMgd2hpY2gga2V5cyBhcmUgcmVxdWlyZWQgYW5kIHdoaWNoIGFyZSBvcHRpb25hbC4KICogICAgICAgICAgRm9yIGV4YW1wbGUsIHRoZSBzY3JpcHQgYXNzb2NpYXRlZCB3aXRoIHRoZSBTb2NpYWwgUHJvdmlkZXIgSGFuZGxlciBOb2RlIGFuZCwKICogICAgICAgICAgdWx0aW1hdGVseSwgdGhlIG1hbmFnZWQgb2JqZWN0IGNyZWF0ZWQvdXBkYXRlZCB3aXRoIHRoaXMgZGF0YQogKiAgICAgICAgICB3aWxsIGV4cGVjdCBjZXJ0YWluIGtleXMgdG8gYmUgcG9wdWxhdGVkLgogKiAgICAgICAgICBJbiBzb21lIGNvbW1vbiBkZWZhdWx0IGNvbmZpZ3VyYXRpb25zLCB0aGUgZm9sbG93aW5nIGtleXMgYXJlIHJlcXVpcmVkIHRvIGJlIG5vdCBlbXB0eToKICogICAgICAgICAgdXNlcm5hbWUsIGdpdmVuTmFtZSwgZmFtaWx5TmFtZSwgZW1haWwuCiAqCiAqICAgICAgICAgIEZyb20gUkZDNDUxNzogQSB2YWx1ZSBvZiB0aGUgRGlyZWN0b3J5IFN0cmluZyBzeW50YXggaXMgYSBzdHJpbmcgb2Ygb25lIG9yIG1vcmUKICogICAgICAgICAgYXJiaXRyYXJ5IGNoYXJhY3RlcnMgZnJvbSB0aGUgVW5pdmVyc2FsIENoYXJhY3RlciBTZXQgKFVDUykuCiAqICAgICAgICAgIEEgemVyby1sZW5ndGggY2hhcmFjdGVyIHN0cmluZyBpcyBub3QgcGVybWl0dGVkLgogKgogKiAoMSkgSnNvblZhbHVlIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL2pzb24vSnNvblZhbHVlLmh0bWwuCiAqICgyKSBUcmVlTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9UcmVlTWFwLmh0bWwuCiAqICgzKSBMaW5rZWRIYXNoTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9MaW5rZWRIYXNoTWFwLmh0bWwuCiAqLwoKKGZ1bmN0aW9uICgpIHsKICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZQogICAgKTsKCiAgICB2YXIgbm9ybWFsaXplZFByb2ZpbGVEYXRhID0gZnJKYXZhLkpzb25WYWx1ZS5qc29uKGZySmF2YS5Kc29uVmFsdWUub2JqZWN0KCkpOwogIAogICAgICAvL2xvZ2dlci5tZXNzYWdlKCdTZWd1aW4gcmF3UHJvZmlsZTogJytyYXdQcm9maWxlKTsKCiAgICBub3JtYWxpemVkUHJvZmlsZURhdGEucHV0KCdpZCcsIHJhd1Byb2ZpbGUuZ2V0KCdzdWInKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2Rpc3BsYXlOYW1lJywgcmF3UHJvZmlsZS5nZXQoJ2dpdmVuTmFtZScpLmFzU3RyaW5nKCkgKyAnICcgKyByYXdQcm9maWxlLmdldCgnc24nKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2VtYWlsJywgcmF3UHJvZmlsZS5nZXQoJ21haWwnKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2dpdmVuTmFtZScsIHJhd1Byb2ZpbGUuZ2V0KCdnaXZlbk5hbWUnKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2ZhbWlseU5hbWUnLCByYXdQcm9maWxlLmdldCgnc24nKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ3VzZXJuYW1lJywgcmF3UHJvZmlsZS5nZXQoJ3VwbicpLmFzU3RyaW5nKCkpOwogICAgbm9ybWFsaXplZFByb2ZpbGVEYXRhLnB1dCgncm9sZXMnLCByYXdQcm9maWxlLmdldCgncm9sZXMnKS5hc1N0cmluZygpKTsKICAKICAgICAgLy9sb2dnZXIubWVzc2FnZSgnU2VndWluIG5vcm1hbGl6ZWRQcm9maWxlRGF0YTogJytub3JtYWxpemVkUHJvZmlsZURhdGEpOwoKICAgIHJldHVybiBub3JtYWxpemVkUHJvZmlsZURhdGE7Cn0oKSk7",
  },
  {
    "_id": "98a87024-3d07-4c75-b1ea-43ff905e9def",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Reset the IDM profile shared state so it can be patched to the user profile.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ResetOTPProfileAttribute",
    "script": "LyogUmVzZXRPVFBQcm9maWxlQXR0cmlidXRlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFJlc2V0IHRoZSBJRE0gcHJvZmlsZSBzaGFyZWQgc3RhdGUgc28gaXQgY2FuIGJlIHBhdGNoZWQgdG8gdGhlIHVzZXIgcHJvZmlsZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KaWYgKHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpKSB7CiAgICBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKS5wdXQoImRlc2NyaXB0aW9uIiwgIiIpCn0KZWxzZSB7CiAgICBzaGFyZWRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCB7ZGVzY3JpcHRpb246ICIifSk7Cn0Kb3V0Y29tZSA9ICJ0cnVlIjs=",
  },
  {
    "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from GitHub",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Okta Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci53YXJuaW5nKCJPa3RhIHJhd1Byb2ZpbGU6ICIrcmF3UHJvZmlsZSkKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZS5kYXRhLnVybCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5wcmVmZXJyZWRfdXNlcm5hbWUpKSk=",
  },
  {
    "_id": "90c4eca5-05f0-42f5-b9bf-88b693eabbbd",
    "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Saml2 IDP Attribute Mapper Script",
    "script": "",
  },
  {
    "_id": "809330cf-874c-4d57-a8f1-5882c6dd855b",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Converts a normalized social profile for iddataweb into a Managed user",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized idddataweb Profile to Managed User",
    "script": "LyogTm9ybWFsaXplZCBpZGRkYXRhd2ViIFByb2ZpbGUgdG8gTWFuYWdlZCBVc2VyCiAqIENvcHlyaWdodCAyMDIyIEZvcmdlUm9jayBBUy4gQWxsIFJpZ2h0cyBSZXNlcnZlZAogKgogKiBVc2Ugb2YgdGhpcyBjb2RlIHJlcXVpcmVzIGEgY29tbWVyY2lhbCBzb2Z0d2FyZSBsaWNlbnNlIHdpdGggRm9yZ2VSb2NrIEFTLgogKiBvciB3aXRoIG9uZSBvZiBpdHMgYWZmaWxpYXRlcy4gQWxsIHVzZSBzaGFsbCBiZSBleGNsdXNpdmVseSBzdWJqZWN0CiAqIHRvIHN1Y2ggbGljZW5zZSBiZXR3ZWVuIHRoZSBsaWNlbnNlZSBhbmQgRm9yZ2VSb2NrIEFTLiBOb3QgZm9yIHByb2R1Y3Rpb24gdXNlLgogKiBNb2RpZmllZCBieSBTdGVwaGVuIFBheW5lLCAyMDIxLU1hci0zMAogKi8KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKaW1wb3J0IG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUKbG9nZ2VyLmVycm9yKCJOb3JtYWxpemVkX1Byb2ZpbGVfSUREYXRhV2ViOiBTdGFydCAiICsgbm9ybWFsaXplZFByb2ZpbGUpOwoKSnNvblZhbHVlIG1hbmFnZWRVc2VyID0ganNvbihvYmplY3QoCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmdpdmVuTmFtZSksCiAgICAgICAgZmllbGQoInNuIiwgbm9ybWFsaXplZFByb2ZpbGUuZmFtaWx5TmFtZSksCiAgICAgICAgZmllbGQoInVzZXJOYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUudXNlcm5hbWUpKSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgicG9zdGFsQWRkcmVzcyIsIG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MpCmlmIChub3JtYWxpemVkUHJvZmlsZS5hZGRyZXNzTG9jYWxpdHkuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgiY2l0eSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NMb2NhbGl0eSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24uaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgic3RhdGVQcm92aW5jZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24pCmlmIChub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInBvc3RhbENvZGUiLCBub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlKQppZiAobm9ybWFsaXplZFByb2ZpbGUuY291bnRyeS5pc05vdE51bGwoKSkgbWFuYWdlZFVzZXIucHV0KCJjb3VudHJ5Iiwgbm9ybWFsaXplZFByb2ZpbGUuY291bnRyeSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBob25lLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInRlbGVwaG9uZU51bWJlciIsIG5vcm1hbGl6ZWRQcm9maWxlLnBob25lKQppZiAobm9ybWFsaXplZFByb2ZpbGUuRE9CLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoImZySW5kZXhlZFN0cmluZzIiLCBub3JtYWxpemVkUHJvZmlsZS5ET0IpCgpyZXR1cm4gbWFuYWdlZFVzZXIK",
  },
  {
    "_id": "472534ec-a25f-468d-a606-3fb1935190df",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from WeChat",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "WeChat Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLm9wZW5pZCksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uaWNrbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5oZWFkaW1ndXJsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLm5pY2tuYW1lKSkp",
  },
  {
    "_id": "39c08084-1238-43e8-857f-2e11005eac49",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Default alpha realm script for OAuth2 Access Token Modification",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha OAuth2 Access Token Modification Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTktMjAyMSBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMKICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGlzIHNjcmlwdCBsZXRzIHlvdSBtb2RpZnkgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIGFuIE9BdXRoMiBhY2Nlc3MgdG9rZW4KICogd2l0aCBtZXRob2RzIHByb3ZpZGVkIGJ5IHRoZSBBY2Nlc3NUb2tlbiAoMSkgaW50ZXJmYWNlLgogKiBUaGUgY2hhbmdlcyBtYWRlIHRvIE9BdXRoMiBhY2Nlc3MgdG9rZW5zIHdpbGwgZGlyZWN0bHkgaW1wYWN0IHRoZSBzaXplIG9mIHRoZSBDVFMgdG9rZW5zLAogKiBhbmQsIHNpbWlsYXJseSwgdGhlIHNpemUgb2YgdGhlIEpXVHMgaWYgY2xpZW50LWJhc2VkIE9BdXRoMiB0b2tlbnMgYXJlIHV0aWxpemVkLgogKiBXaGVuIGFkZGluZy91cGRhdGluZyBmaWVsZHMgbWFrZSBzdXJlIHRoYXQgdGhlIHRva2VuIHNpemUgcmVtYWlucyB3aXRoaW4gY2xpZW50L3VzZXItYWdlbnQgbGltaXRzLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICogYWNjZXNzVG9rZW4gLSBBY2Nlc3NUb2tlbiAoMSkuCiAqICAgICAgICAgICAgICAgVGhlIGFjY2VzcyB0b2tlbiB0byBiZSB1cGRhdGVkLgogKiAgICAgICAgICAgICAgIE11dGFibGUgb2JqZWN0LCBhbGwgY2hhbmdlcyB0byB0aGUgYWNjZXNzIHRva2VuIHdpbGwgYmUgcmVmbGVjdGVkLgogKiBzY29wZXMgLSBTZXQ8U3RyaW5nPiAoNikuCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICogcmVxdWVzdFByb3BlcnRpZXMgLSBVbm1vZGlmaWFibGUgTWFwICg1KS4KICogICAgICAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgY29udGFpbnMgYSBtYXAgb2YgcmVxdWVzdCBwcm9wZXJ0aWVzOgogKiAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RVcmkgLSBUaGUgcmVxdWVzdCBVUkkuCiAqICAgICAgICAgICAgICAgICAgICAgcmVhbG0gLSBUaGUgcmVhbG0gdGhhdCB0aGUgcmVxdWVzdCByZWxhdGVzIHRvLgogKiAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RQYXJhbXMgLSBBIG1hcCBvZiB0aGUgcmVxdWVzdCBwYXJhbXMgYW5kL29yIHBvc3RlZCBkYXRhLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFYWNoIHZhbHVlIGlzIGEgbGlzdCBvZiBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGVhc2Ugbm90ZSB0aGF0IHRoZXNlIHNob3VsZCBiZSBoYW5kbGVkIGluIGFjY29yZGFuY2Ugd2l0aCBPV0FTUCBiZXN0IHByYWN0aWNlczoKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9vd2FzcC5vcmcvd3d3LWNvbW11bml0eS92dWxuZXJhYmlsaXRpZXMvVW5zYWZlX3VzZV9vZl9SZWZsZWN0aW9uLgogKiBjbGllbnRQcm9wZXJ0aWVzIC0gVW5tb2RpZmlhYmxlIE1hcCAoNSkuCiAqICAgICAgICAgICAgICAgICAgICBQcmVzZW50IGlmIHRoZSBjbGllbnQgc3BlY2lmaWVkIGluIHRoZSByZXF1ZXN0IHdhcyBpZGVudGlmaWVkLCBjb250YWlucyBhIG1hcCBvZiBjbGllbnQgcHJvcGVydGllczoKICogICAgICAgICAgICAgICAgICAgIGNsaWVudElkIC0gVGhlIGNsaWVudCdzIFVSSSBmb3IgdGhlIHJlcXVlc3QgbG9jYWxlLgogKiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZEdyYW50VHlwZXMgLSBMaXN0IG9mIHRoZSBhbGxvd2VkIGdyYW50IHR5cGVzIChvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLkdyYW50VHlwZSkgZm9yIHRoZSBjbGllbnQuCiAqICAgICAgICAgICAgICAgICAgICBhbGxvd2VkUmVzcG9uc2VUeXBlcyAtIExpc3Qgb2YgdGhlIGFsbG93ZWQgcmVzcG9uc2UgdHlwZXMgZm9yIHRoZSBjbGllbnQuCiAqICAgICAgICAgICAgICAgICAgICBhbGxvd2VkU2NvcGVzIC0gTGlzdCBvZiB0aGUgYWxsb3dlZCBzY29wZXMgZm9yIHRoZSBjbGllbnQuCiAqICAgICAgICAgICAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzIC0gQSBtYXAgb2YgdGhlIGN1c3RvbSBwcm9wZXJ0aWVzIG9mIHRoZSBjbGllbnQuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdHMgb3IgbWFwcyB3aWxsIGJlIGluY2x1ZGVkIGFzIHN1Yi1tYXBzOyBmb3IgZXhhbXBsZToKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21NYXBbS2V5MV09VmFsdWUxIHdpbGwgYmUgcmV0dXJuZWQgYXMgY3VzdG9tTWFwIC0+IEtleTEgLT4gVmFsdWUxLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvIGFkZCBjdXN0b20gcHJvcGVydGllcyB0byBhIGNsaWVudCwgdXBkYXRlIHRoZSBDdXN0b20gUHJvcGVydGllcyBmaWVsZAogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIEFNIENvbnNvbGUgPiBSZWFsbSBOYW1lID4gQXBwbGljYXRpb25zID4gT0F1dGggMi4wID4gQ2xpZW50cyA+IENsaWVudCBJRCA+IEFkdmFuY2VkLgogKiBpZGVudGl0eSAtIEFNSWRlbnRpdHkgKDMpLgogKiAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgaWRlbnRpdHkgb2YgdGhlIHJlc291cmNlIG93bmVyLgogKiBzZXNzaW9uIC0gU1NPVG9rZW4gKDQpLgogKiAgICAgICAgICAgUHJlc2VudCBpZiB0aGUgcmVxdWVzdCBjb250YWlucyB0aGUgc2Vzc2lvbiBjb29raWUsIHRoZSB1c2VyJ3Mgc2Vzc2lvbiBvYmplY3QuCiAqIHNjcmlwdE5hbWUgLSBTdHJpbmcgKHByaW1pdGl2ZSkuCiAqICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgc2NyaXB0LgogKiBsb2dnZXIgLSBBbHdheXMgcHJlc2VudCwgdGhlICJPQXV0aDJQcm92aWRlciIgZGVidWcgbG9nZ2VyIGluc3RhbmNlOgogKiAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiAgICAgICAgICBDb3JyZXNwb25kaW5nIGxvZyBmaWxlcyB3aWxsIGJlIHByZWZpeGVkIHdpdGg6IHNjcmlwdHMuT0FVVEgyX0FDQ0VTU19UT0tFTl9NT0RJRklDQVRJT04uCiAqIGh0dHBDbGllbnQgLSBIVFRQIENsaWVudCAoOCkuCiAqICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIEhUVFAgQ2xpZW50IGluc3RhbmNlOgogKiAgICAgICAgICAgICAgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvc2NyaXB0aW5nLWd1aWRlL3NjcmlwdGluZy1hcGktZ2xvYmFsLWh0dHAtY2xpZW50Lmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtaHR0cC1jbGllbnQuCiAqCiAqIFJldHVybiAtIG5vIHZhbHVlIGlzIGV4cGVjdGVkLCBjaGFuZ2VzIHNoYWxsIGJlIG1hZGUgdG8gdGhlIGFjY2Vzc1Rva2VuIHBhcmFtZXRlciBkaXJlY3RseS4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgQWNjZXNzVG9rZW4gLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb2F1dGgyL2NvcmUvQWNjZXNzVG9rZW4uaHRtbC4KICogKDMpIEFNSWRlbnRpdHkgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvaWRtL0FNSWRlbnRpdHkuaHRtbC4KICogKDQpIFNTT1Rva2VuIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9jb20vaXBsYW5ldC9zc28vU1NPVG9rZW4uaHRtbC4KICogKDUpIE1hcCAtIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2phdmEvamF2YXNlLzExL2RvY3MvYXBpL2phdmEuYmFzZS9qYXZhL3V0aWwvSGFzaE1hcC5odG1sLAogKiAgICAgICAgICAgb3IgaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9MaW5rZWRIYXNoTWFwLmh0bWwuCiAqICg2KSBTZXQgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL0hhc2hTZXQuaHRtbC4KICogKDgpIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgogKi8KCi8qIEVYQU1QTEUKKGZ1bmN0aW9uICgpIHsKICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlJlcXVlc3QsCiAgICAgICAgb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlJlc3BvbnNlCiAgICApOwoKICAgIC8vIEFsd2F5cyBpbmNsdWRlcyB0aGlzIGZpZWxkIGluIHRoZSB0b2tlbi4KICAgIGFjY2Vzc1Rva2VuLnNldEZpZWxkKCdrZXkxJywgJ3ZhbHVlMScpOwoKICAgIC8vIFJlY2VpdmVzIGFuZCBhZGRzIHRvIHRoZSBhY2Nlc3MgdG9rZW4gYWRkaXRpb25hbCB2YWx1ZXMgYnkgcGVyZm9ybWluZyBhIFJFU1QgY2FsbCB0byBhbiBleHRlcm5hbCBzZXJ2aWNlLgogICAgLy8gV0FSTklORzogQmVsb3csIHlvdSB3aWxsIGZpbmQgYSByZWZlcmVuY2UgdG8gYSB0aGlyZC1wYXJ0eSBzaXRlLCB3aGljaCBpcyBwcm92aWRlZCBvbmx5IGFzIGFuIGV4YW1wbGUuCiAgICB2YXIgdXJpID0gJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cyc7CgogICAgdHJ5IHsKICAgICAgICB2YXIgcmVxdWVzdCA9IG5ldyBmckphdmEuUmVxdWVzdCgpOwoKICAgICAgICAvLyBZb3UgY2FuIGNoYWluIG1ldGhvZHMgdGhhdCByZXR1cm4gdGhlIHJlcXVlc3Qgb2JqZWN0LgogICAgICAgIHJlcXVlc3Quc2V0VXJpKHVyaSkKICAgICAgICAgICAgLnNldE1ldGhvZCgnUE9TVCcpCiAgICAgICAgICAgIC5zZXRFbnRpdHkoSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgdXBkYXRlZEZpZWxkczogewogICAgICAgICAgICAgICAgICAgIGtleTI6ICd2YWx1ZTInLAogICAgICAgICAgICAgICAgICAgIGtleTM6ICd2YWx1ZTMnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgLy8gWW91IGNhbiBjYWxsIGEgbWV0aG9kIHdoZW4gY2hhaW5pbmcgaXMgbm90IHBvc3NpYmxlLgogICAgICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnKTsKCiAgICAgICAgLy8gU2VuZHMgdGhlIHJlcXVlc3QgYW5kIHJlY2VpdmVzIHRoZSByZXNwb25zZS4KICAgICAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0T3JUaHJvdygpOwoKICAgICAgICAvLyBDaGVja3MgaWYgdGhlIHJlc3BvbnNlIHN0YXR1cyBpcyBhcyBleHBlY3RlZC4KICAgICAgICBpZiAocmVzcG9uc2UuZ2V0U3RhdHVzKCkgPT09IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5TdGF0dXMuQ1JFQVRFRCkgewogICAgICAgICAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CgogICAgICAgICAgICAvLyBTZXQgbXVsdGlwbGUgdG9rZW4gZmllbGRzIGF0IG9uY2UuCiAgICAgICAgICAgIGFjY2Vzc1Rva2VuLnNldEZpZWxkcyhyZXN1bHQudXBkYXRlZEZpZWxkcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdVbmFibGUgdG8gb2J0YWluIGFjY2VzcyB0b2tlbiBtb2RpZmljYXRpb25zLiBTdGF0dXM6ICcgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICcuIENvbnRlbnQ6ICcgKyByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGxvZ2dlci5lcnJvcignVGhlIHJlcXVlc3QgcHJvY2Vzc2luZyB3YXMgaW50ZXJydXB0ZWQuICcgKyBlKTsKCiAgICAgICAgLy8gVGhlIGFjY2VzcyB0b2tlbiByZXF1ZXN0IGZhaWxzIHdpdGggdGhlIEhUVFAgNTAwIGVycm9yIGluIHRoaXMgY2FzZS4KICAgICAgICB0aHJvdyAoJ1VuYWJsZSB0byBvYnRhaW4gcmVzcG9uc2UgZnJvbTogJyArIHVyaSk7CiAgICB9CgogICAgLy8gQWRkcyBuZXcgZmllbGRzIGNvbnRhaW5pbmcgaWRlbnRpdHkgYXR0cmlidXRlIHZhbHVlcyB0byB0aGUgYWNjZXNzIHRva2VuLgogICAgYWNjZXNzVG9rZW4uc2V0RmllbGQoJ21haWwnLCBpZGVudGl0eS5nZXRBdHRyaWJ1dGUoJ21haWwnKSk7CiAgICBhY2Nlc3NUb2tlbi5zZXRGaWVsZCgncGhvbmUnLCBpZGVudGl0eS5nZXRBdHRyaWJ1dGUoJ3RlbGVwaG9uZU51bWJlcicpLnRvQXJyYXkoKVswXSk7CgogICAgLy8gQWRkcyBuZXcgZmllbGRzIGNvbnRhaW5pbmcgdGhlIHNlc3Npb24gcHJvcGVydHkgdmFsdWVzLgogICAgLy8gTk9URTogc2Vzc2lvbiBtYXkgbm90IGJlIGF2YWlsYWJsZSBmb3Igbm9uLWludGVyYWN0aXZlIGF1dGhvcml6YXRpb24gZ3JhbnRzLgogICAgaWYgKHNlc3Npb24pIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBhY2Nlc3NUb2tlbi5zZXRGaWVsZCgnaXBBZGRyZXNzJywgc2Vzc2lvbi5nZXRQcm9wZXJ0eSgnSG9zdCcpKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIHJldHJpZXZlIHNlc3Npb24gcHJvcGVydHkgdmFsdWUuICcgKyBlKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gUmVtb3ZlcyBhIG5hdGl2ZSBmaWVsZCBmcm9tIHRoZSB0b2tlbiBlbnRyeSwgdGhhdCB3YXMgc2V0IGJ5IEFNLgogICAgLy8gV0FSTklORzogcmVtb3ZpbmcgbmF0aXZlIGZpZWxkcyBmcm9tIHRoZSB0b2tlbiBtYXkgcmVzdWx0IGluIGxvc3Mgb2YgZnVuY3Rpb25hbGl0eS4KICAgIC8vIGFjY2Vzc1Rva2VuLnJlbW92ZVRva2VuTmFtZSgpCgogICAgLy8gTm8gcmV0dXJuIHZhbHVlIGlzIGV4cGVjdGVkLiBMZXQgaXQgYmUgdW5kZWZpbmVkLgp9KCkpOwoqLw==",
  },
  {
    "_id": "8e298710-b55e-4085-a464-88a375a4004b",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Twitter",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twitter Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkX3N0ciksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgicGhvdG9VcmwiLCByYXdQcm9maWxlLnByb2ZpbGVfaW1hZ2VfdXJsKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnNjcmVlbl9uYW1lKSkp",
  },
  {
    "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Converts a normalized social profile into a managed user",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized Profile to Managed User",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgbWFuYWdlZFVzZXIgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlck5hbWUiLCBub3JtYWxpemVkUHJvZmlsZS51c2VybmFtZSkpKQoKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgicG9zdGFsQWRkcmVzcyIsIG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MpCmlmIChub3JtYWxpemVkUHJvZmlsZS5hZGRyZXNzTG9jYWxpdHkuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgiY2l0eSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NMb2NhbGl0eSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24uaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgic3RhdGVQcm92aW5jZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24pCmlmIChub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInBvc3RhbENvZGUiLCBub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlKQppZiAobm9ybWFsaXplZFByb2ZpbGUuY291bnRyeS5pc05vdE51bGwoKSkgbWFuYWdlZFVzZXIucHV0KCJjb3VudHJ5Iiwgbm9ybWFsaXplZFByb2ZpbGUuY291bnRyeSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBob25lLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInRlbGVwaG9uZU51bWJlciIsIG5vcm1hbGl6ZWRQcm9maWxlLnBob25lKQoKLy8gaWYgdGhlIGdpdmVuTmFtZSBhbmQgZmFtaWx5TmFtZSBpcyBudWxsIG9yIGVtcHR5Ci8vIHRoZW4gYWRkIGEgYm9vbGVhbiBmbGFnIHRvIHRoZSBzaGFyZWQgc3RhdGUgdG8gaW5kaWNhdGUgbmFtZXMgYXJlIG5vdCBwcmVzZW50Ci8vIHRoaXMgY291bGQgYmUgdXNlZCBlbHNld2hlcmUKLy8gZm9yIGVnLiB0aGlzIGNvdWxkIGJlIHVzZWQgaW4gYSBzY3JpcHRlZCBkZWNpc2lvbiBub2RlIHRvIGJ5LXBhc3MgcGF0Y2hpbmcKLy8gdGhlIHVzZXIgb2JqZWN0IHdpdGggYmxhbmsgdmFsdWVzIHdoZW4gZ2l2ZW5OYW1lICBhbmQgZmFtaWx5TmFtZSBpcyBub3QgcHJlc2VudApib29sZWFuIG5vR2l2ZW5OYW1lID0gbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmFzU3RyaW5nKCk/LnRyaW0oKSkKYm9vbGVhbiBub0ZhbWlseU5hbWUgPSBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZmFtaWx5TmFtZS5hc1N0cmluZygpPy50cmltKCkpCnNoYXJlZFN0YXRlLnB1dCgibmFtZUVtcHR5T3JOdWxsIiwgbm9HaXZlbk5hbWUgJiYgbm9GYW1pbHlOYW1lKQoKcmV0dXJuIG1hbmFnZWRVc2VyCg==",
  },
  {
    "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for a scripted decision node",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Authentication Tree Decision Node Script",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9ICJ0cnVlIjs=",
  },
  {
    "_id": "91554b10-79a5-4aa8-aca1-59481a734c19",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Twilio SMS OTP Sender",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio SMS OTP Sender",
    "script": "LyogVHdpbGlvIFNNUyBPVFAgU2VuZGVyCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFRoaXMgc2NyaXB0IHdpbGwgc2VuZCBhbiBTTVMgY29udGFpbmluZyB0aGUgT1RQIHRvIHRoZSBwaG9uZSBudW1iZXIgaW4gdGhlIHVzZXIncyBwcm9maWxlLgogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIElkZW50aWZ5IEV4aXN0aW5nIFVzZXIgbm9kZSBhbmQgSE9UUCBHZW5lcmF0b3Igbm9kZSBiZWZvcmUgaXQgaXMgYmVpbmcgY2FsbGVkLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHNlbnQKICogLSBmYWlsZWQKICovCmxvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IHN0YXJ0Iik7CgppZiAoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSAmJiBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHNoYXJlZFN0YXRlLmdldCgiX2lkIiksICJ0ZWxlcGhvbmVOdW1iZXIiKS5pdGVyYXRvcigpLmhhc05leHQoKSkgewogICAgdmFyIEJhc2U2ND17X2tleVN0cjoiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0iLGVuY29kZTpmdW5jdGlvbihpbnB1dCl7dmFyIG91dHB1dD0iIjt2YXIgY2hyMSxjaHIyLGNocjMsZW5jMSxlbmMyLGVuYzMsZW5jNDt2YXIgaT0wO2lucHV0PUJhc2U2NC5fdXRmOF9lbmNvZGUoaW5wdXQpO3doaWxlKGk8aW5wdXQubGVuZ3RoKXtjaHIxPWlucHV0LmNoYXJDb2RlQXQoaSsrKTtjaHIyPWlucHV0LmNoYXJDb2RlQXQoaSsrKTtjaHIzPWlucHV0LmNoYXJDb2RlQXQoaSsrKTtlbmMxPWNocjE+PjI7ZW5jMj0oY2hyMSYzKTw8NHxjaHIyPj40O2VuYzM9KGNocjImMTUpPDwyfGNocjM+PjY7ZW5jND1jaHIzJjYzO2lmKGlzTmFOKGNocjIpKXtlbmMzPWVuYzQ9NjR9ZWxzZSBpZihpc05hTihjaHIzKSl7ZW5jND02NH1vdXRwdXQ9b3V0cHV0K3RoaXMuX2tleVN0ci5jaGFyQXQoZW5jMSkrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmMyKSt0aGlzLl9rZXlTdHIuY2hhckF0KGVuYzMpK3RoaXMuX2tleVN0ci5jaGFyQXQoZW5jNCl9cmV0dXJuIG91dHB1dH0sZGVjb2RlOmZ1bmN0aW9uKGlucHV0KXt2YXIgb3V0cHV0PSIiO3ZhciBjaHIxLGNocjIsY2hyMzt2YXIgZW5jMSxlbmMyLGVuYzMsZW5jNDt2YXIgaT0wO2lucHV0PWlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XCtcL1w9XS9nLCIiKTt3aGlsZShpPGlucHV0Lmxlbmd0aCl7ZW5jMT10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jMj10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jMz10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jND10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7Y2hyMT1lbmMxPDwyfGVuYzI+PjQ7Y2hyMj0oZW5jMiYxNSk8PDR8ZW5jMz4+MjtjaHIzPShlbmMzJjMpPDw2fGVuYzQ7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjEpO2lmKGVuYzMhPTY0KXtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMil9aWYoZW5jNCE9NjQpe291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIzKX19b3V0cHV0PUJhc2U2NC5fdXRmOF9kZWNvZGUob3V0cHV0KTtyZXR1cm4gb3V0cHV0fSxfdXRmOF9lbmNvZGU6ZnVuY3Rpb24oc3RyaW5nKXtzdHJpbmc9c3RyaW5nLnJlcGxhY2UoL1xyXG4vZywiXG4iKTt2YXIgdXRmdGV4dD0iIjtmb3IodmFyIG49MDtuPHN0cmluZy5sZW5ndGg7bisrKXt2YXIgYz1zdHJpbmcuY2hhckNvZGVBdChuKTtpZihjPDEyOCl7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjKX1lbHNlIGlmKGM+MTI3JiZjPDIwNDgpe3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYz4+NnwxOTIpO3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyY2M3wxMjgpfWVsc2V7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj4xMnwyMjQpO3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYz4+NiY2M3wxMjgpO3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyY2M3wxMjgpfX1yZXR1cm4gdXRmdGV4dH0sX3V0ZjhfZGVjb2RlOmZ1bmN0aW9uKHV0ZnRleHQpe3ZhciBzdHJpbmc9IiI7dmFyIGk9MDt2YXIgYz1jMT1jMj0wO3doaWxlKGk8dXRmdGV4dC5sZW5ndGgpe2M9dXRmdGV4dC5jaGFyQ29kZUF0KGkpO2lmKGM8MTI4KXtzdHJpbmcrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyk7aSsrfWVsc2UgaWYoYz4xOTEmJmM8MjI0KXtjMj11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsxKTtzdHJpbmcrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGMmMzEpPDw2fGMyJjYzKTtpKz0yfWVsc2V7YzI9dXRmdGV4dC5jaGFyQ29kZUF0KGkrMSk7YzM9dXRmdGV4dC5jaGFyQ29kZUF0KGkrMik7c3RyaW5nKz1TdHJpbmcuZnJvbUNoYXJDb2RlKChjJjE1KTw8MTJ8KGMyJjYzKTw8NnxjMyY2Myk7aSs9M319cmV0dXJuIHN0cmluZ319OwoKICAgICAgIC8qIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAgICAgKgogICAgICogUkVQTEFDRSBXSVRIIFlPVVIgT1dOIEFaVVJFIEFEIFNFVFRJTkdTCiAgICAgKi8KICAgIHZhciBUV0lMSU9fQVBJX1NJRCA9ICJBQzc1MDQxNWUzMTYzYTJlNTdiN2FlZWE3ZWVkODJkOTQ0IjsKICAgIHZhciBUV0lMSU9fQVBJX1RPS0VOID0gImQzNmE3MTljOTRiNGJlMDg1OTJkNjllYzRmODBhNWJiIjsKICAgIHZhciBUV0lMSU9fQVBJX0ZST00gPSAiKzEzMTc2NDQzMTA3IjsKICAgIC8qCiAgICAgKiBFTkQgU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqLwogIAogICAgLy8gVHdpbGlvIFNNUyBNZXNzYWdlIEFQSSBDb25maWd1cmF0aW9uCiAgICB2YXIgVFdJTElPX0FQSV9VUkkgPSAiaHR0cHM6Ly9hcGkudHdpbGlvLmNvbS8yMDEwLTA0LTAxL0FjY291bnRzLyIuY29uY2F0KFRXSUxJT19BUElfU0lEKS5jb25jYXQoIi9NZXNzYWdlcy5qc29uIik7ICAgIAogICAgdmFyIFRXSUxJT19BUElfVE8gPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHNoYXJlZFN0YXRlLmdldCgiX2lkIiksICJ0ZWxlcGhvbmVOdW1iZXIiKS5pdGVyYXRvcigpLm5leHQoKTsKICAgIHZhciBUV0lMSU9fQVBJX0JPRFkgPSAiT1RQIGZvciBhY2NvdW50ICIuY29uY2F0KHNoYXJlZFN0YXRlLmdldCgidXNlcm5hbWUiKSkuY29uY2F0KCI6ICIpLmNvbmNhdChzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZCIpKTsKICAgIC8vbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogVG86ICIuY29uY2F0KFRXSUxJT19BUElfVE8pKTsKICAgIC8vbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogTWVzc2FnZTogIi5jb25jYXQoVFdJTElPX0FQSV9CT0RZKSk7CgogICAgdmFyIEFVVEhaID0gIkJhc2ljICIuY29uY2F0KEJhc2U2NC5lbmNvZGUoVFdJTElPX0FQSV9TSUQuY29uY2F0KCc6JykuY29uY2F0KFRXSUxJT19BUElfVE9LRU4pKSk7CiAgICAvL2xvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IEFVVEhaIC0gIi5jb25jYXQoQVVUSFopKTsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ1BPU1QnKTsKICAgIHJlcXVlc3Quc2V0VXJpKFRXSUxJT19BUElfVVJJKTsKICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCJBdXRob3JpemF0aW9uIiwgQVVUSFopOwogICAgdmFyIHBhcmFtcyA9IHJlcXVlc3QuZ2V0Rm9ybSgpOwogICAgcGFyYW1zLmFkZCgiRnJvbSIsIFRXSUxJT19BUElfRlJPTSk7CiAgICBwYXJhbXMuYWRkKCJCb2R5IiwgVFdJTElPX0FQSV9CT0RZKTsKICAgIHBhcmFtcy5hZGQoIlRvIiwgVFdJTElPX0FQSV9UTyk7CiAgICByZXF1ZXN0LmdldEVudGl0eSgpLnNldFN0cmluZyhwYXJhbXMudG9TdHJpbmcoKSk7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgLy9sb2dnZXIud2FybmluZygiVHdpbGlvIFNNUyBPVFAgU2VuZGVyOiBKU09OIHJlc3VsdDogIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpOwoKICAgIGlmIChyZXN1bHRbImVycm9yX2NvZGUiXSkgewogICAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogZXJyb3JfY29kZSA9ICIuY29uY2F0KHJlc3VsdFsiZXJyb3JfY29kZSJdKSk7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IGVycm9yX21lc3NhZ2UgPSAiLmNvbmNhdChyZXN1bHRbImVycm9yX21lc3NhZ2UiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFNNUyBPVFAgU2VuZGVyOiBvdXRjb21lID0gZmFpbGVkIik7CiAgICB9IGVsc2UgaWYgKHJlc3VsdFsiY29kZSJdKSB7CiAgICAgICAgb3V0Y29tZSA9ICJmYWlsZWQiOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFNNUyBPVFAgU2VuZGVyOiBjb2RlID0gIi5jb25jYXQocmVzdWx0WyJjb2RlIl0pKTsKICAgICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogbWVzc2FnZSA9ICIuY29uY2F0KHJlc3VsdFsibWVzc2FnZSJdKSk7CiAgICB9IGVsc2UgewogICAgICAgIG91dGNvbWUgPSAic2VudCI7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogb3V0Y29tZSA9IHNlbnQiKTsKICAgIH0KfSBlbHNlIHsKICAgICAgb3V0Y29tZSA9ICJmYWlsZWQiOwogICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogTm8gdXNlciBvciBwaG9uZSBudW1iZXIgZm91bmQhIFVzZSAnSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIGJlZm9yZSB0aGlzIHNjcmlwdCB0byBwb3B1bGF0ZSB0aGUgdXNlcidzIF9pZCBpbiBzaGFyZWQgc3RhdGUhJyIpOwogICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogb3V0Y29tZSA9IGZhaWxlZCIpOwp9",
  },
  {
    "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OAuth2 Access Token Modification",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 Access Token Modification Script",
    "script": "",
  },
  {
    "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
    "context": "AUTHENTICATION_SERVER_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for server side Device Id (Match) Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Device Id (Match) - Server Side",
    "script": "",
  },
  {
    "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OIDC claims",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Microsoft",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Microsoft Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKewogICAgIkBvZGF0YS5jb250ZXh0IjogImh0dHBzOi8vZ3JhcGgubWljcm9zb2Z0LmNvbS92MS4wLyRtZXRhZGF0YSN1c2Vycy8kZW50aXR5IiwKICAgICJAb2RhdGEuaWQiOiAiaHR0cHM6Ly9ncmFwaC5taWNyb3NvZnQuY29tL3YyLzcxMWZmYTljLTU5NzItNDcxMy1hY2UzLTY4OGM5NzMyNjE0YS9kaXJlY3RvcnlPYmplY3RzLzdkNzc1OWUyLTM2ZDgtNGU2NC1iMTczLTNmODkwZDdkNDZkNi9NaWNyb3NvZnQuRGlyZWN0b3J5U2VydmljZXMuVXNlciIsCiAgICAiYnVzaW5lc3NQaG9uZXMiOiBbCiAgICAgICAgIjE4MDE0NzM1NDUxIgogICAgXSwKICAgICJkaXNwbGF5TmFtZSI6ICJWb2xrZXIgU2NoZXViZXIiLAogICAgImdpdmVuTmFtZSI6ICJWb2xrZXIiLAogICAgImpvYlRpdGxlIjogbnVsbCwKICAgICJtYWlsIjogInZzY2hldWJlckB2c2NoZXViZXIub25taWNyb3NvZnQuY29tIiwKICAgICJtb2JpbGVQaG9uZSI6IG51bGwsCiAgICAib2ZmaWNlTG9jYXRpb24iOiBudWxsLAogICAgInByZWZlcnJlZExhbmd1YWdlIjogbnVsbCwKICAgICJzdXJuYW1lIjogIlNjaGV1YmVyIiwKICAgICJ1c2VyUHJpbmNpcGFsTmFtZSI6ICJ2c2NoZXViZXJAdnNjaGV1YmVyLm9ubWljcm9zb2Z0LmNvbSIsCiAgICAiaWQiOiAiN2Q3NzU5ZTItMzZkOC00ZTY0LWIxNzMtM2Y4OTBkN2Q0NmQ2Igp9CiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci5tZXNzYWdlKCJLYXVhaSBNaWNyb3NvZnQgUHJvZmlsZSBOb3JtYWxpemF0aW9uOiByYXdQcm9maWxlPXt9IiwgcmF3UHJvZmlsZSkKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmRpc3BsYXlOYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbk5hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5zdXJuYW1lKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLnVzZXJQcmluY2lwYWxOYW1lKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJQcmluY2lwYWxOYW1lKSwKICAgICAgICBmaWVsZCgiZ3JvdXBzIiwgcmF3UHJvZmlsZS5ncm91cHMpKSk=",
  },
  {
    "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Used by endUserUIClient",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha endUserUIClient OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Facebook",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Facebook Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZS5kYXRhLnVybCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQ==",
  },
  {
    "_id": "1f389a3d-21cf-417c-a6d3-42ea620071f0",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Internal OIDC Claims script",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ForgeRock Internal: OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Instagram",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Instagram Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJuYW1lKSkp",
  },
  {
    "_id": "a186232a-683d-48ce-8893-d6f92652ec82",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Analyze an IP address using the IPQualityScore (IPQS) service.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "IPQS IP Address",
    "script": "LyogSVBRUyBJUCBBZGRyZXNzCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIEFuYWx5emUgYW4gSVAgYWRkcmVzcyB1c2luZyB0aGUgSVBRdWFsaXR5U2NvcmUgKElQUVMpIHNlcnZpY2UuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIGhpZ2gKICogLSBzdXNwaWNpb3VzCiAqIC0gbG93CiAqIC0gdW5rbm93bgogKi8KKGZ1bmN0aW9uICgpIHsKICAgIGxvZ2dlci53YXJuaW5nKCJJUFFTIElQIEFkZHJlc3M6IHN0YXJ0Iik7CgogICAgb3V0Y29tZSA9ICJ1bmtub3duIjsKCiAgICB2YXIgaXAgPSBnZXRDbGllbnRJUEFkZHJlc3MoKTsKICAgIGxvZ2dlci53YXJuaW5nKCJJUFFTIElQIEFkZHJlc3M6IGlwPSIuY29uY2F0KGlwKSk7CgogICAgaWYgKGlwKSB7CgogICAgICAgIC8vIElQUVMgQVBJIENvbmZpZ3VyYXRpb24KICAgICAgICB2YXIgSVBRU19BUElfS0VZID0gc3lzdGVtRW52LmdldFByb3BlcnR5KCJlc3YuaXBxcy5hcGkua2V5Iik7CiAgICAgICAgdmFyIElQUVNfT1BUSU9OUyA9ICJzdHJpY3RuZXNzPTAmYWxsb3dfcHVibGljX2FjY2Vzc19wb2ludHM9dHJ1ZSZ1c2VyX2FnZW50PSIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChnZXRIZWFkZXIoInVzZXItYWdlbnQiKSkpLmNvbmNhdCgiJnVzZXJfbGFuZ3VhZ2U9IikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChnZXRIZWFkZXIoImFjY2VwdC1sYW5ndWFnZSIpKSk7CiAgICAgICAgdmFyIElQUVNfQVBJX1VSSSA9ICJodHRwczovL2lwcXVhbGl0eXNjb3JlLmNvbS9hcGkvanNvbi9pcC8iLmNvbmNhdChJUFFTX0FQSV9LRVkpLmNvbmNhdCgiLyIpLmNvbmNhdChpcCkuY29uY2F0KCI/IikuY29uY2F0KElQUVNfT1BUSU9OUyk7CgogICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICAgICAgcmVxdWVzdC5zZXRNZXRob2QoJ0dFVCcpOwogICAgICAgIHJlcXVlc3Quc2V0VXJpKElQUVNfQVBJX1VSSSk7CgogICAgICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgICAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIklQUVMgSVAgQWRkcmVzczogSlNPTiByZXN1bHQ6ICIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpKTsKCiAgICAgICAgLy8gcHJlc2VydmUgcmVzdWx0IGluIHRyYW5zaWVudCBzdGF0ZQogICAgICAgIHRyYW5zaWVudFN0YXRlLnB1dCgiSVBRU19JUF9BZGRyZXNzIiwgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7CgogICAgICAgIGlmIChyZXN1bHQuZnJhdWRfc2NvcmUgPj0gODUpIHsKICAgICAgICAgICAgb3V0Y29tZSA9ICJoaWdoIjsKICAgICAgICB9IAogICAgICAgIGVsc2UgaWYgKHJlc3VsdC5mcmF1ZF9zY29yZSA+PSA3NSkgewogICAgICAgICAgICBvdXRjb21lID0gInN1c3BpY2lvdXMiOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgb3V0Y29tZSA9ICJsb3ciOwogICAgICAgIH0KCiAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5lcnJvcigiSVBRUyBJUCBBZGRyZXNzOiBubyBjbGllbnQgaXAhIik7CiAgICB9CgogICAgbG9nZ2VyLndhcm5pbmcoIk9JUFFTIElQIEFkZHJlc3M6IEVuZCAob3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIikiKSk7CgogICAgLyoKICAgICAqICEhISBBU1NVTUVTIElEIENMT1VEICEhIQogICAgICoKICAgICAqIFJldHVybnMgdGhlIGNsaWVudCdzIElQIGFkZHJlc3MKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0Q2xpZW50SVBBZGRyZXNzKCkgewogICAgICAgIHJldHVybiBnZXRIZWFkZXIoIngtZm9yd2FyZGVkLWZvciIpLnNwbGl0KCcsJylbMF07CiAgICB9CgogICAgLyoKICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSByZXF1ZXN0ZWQgaGVhZGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEhlYWRlcihoZWFkZXJOYW1lKSB7CiAgICAgICAgcmV0dXJuIHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKS5nZXQoMCk7CiAgICB9CgogICAgICAgIC8qIFNhbXBsZSBJUFFTIFJFU1QgQVBJIFJlc3BvbnNlCiAgICAgICAgewogICAgICAgICAgICAic3VjY2VzcyI6IHRydWUsCiAgICAgICAgICAgICJtZXNzYWdlIjogIlN1Y2Nlc3MiLAogICAgICAgICAgICAiZnJhdWRfc2NvcmUiOiAxMDAsCiAgICAgICAgICAgICJjb3VudHJ5X2NvZGUiOiAiVVMiLAogICAgICAgICAgICAicmVnaW9uIjogIldhc2hpbmd0b24iLAogICAgICAgICAgICAiY2l0eSI6ICJTZWF0dGxlIiwKICAgICAgICAgICAgIklTUCI6ICJFbWVyYWxkIE9uaW9uIiwKICAgICAgICAgICAgIkFTTiI6IDM5NjUwNywKICAgICAgICAgICAgIm9wZXJhdGluZ19zeXN0ZW0iOiAiTWFjIDEwLjE2IiwKICAgICAgICAgICAgImJyb3dzZXIiOiAiRmlyZWZveCA4NS4wIiwKICAgICAgICAgICAgIm9yZ2FuaXphdGlvbiI6ICJFbWVyYWxkIE9uaW9uIiwKICAgICAgICAgICAgImxhdGl0dWRlIjogNDcuNiwKICAgICAgICAgICAgImxvbmdpdHVkZSI6IC0xMjIuMzMsCiAgICAgICAgICAgICJpc19jcmF3bGVyIjogZmFsc2UsCiAgICAgICAgICAgICJ0aW1lem9uZSI6ICJBbWVyaWNhXC9DaGljYWdvIiwKICAgICAgICAgICAgIm1vYmlsZSI6IGZhbHNlLAogICAgICAgICAgICAiaG9zdCI6ICIyNjIwOjE4YzowOjE5Mjo6MjMyIiwKICAgICAgICAgICAgInByb3h5IjogdHJ1ZSwKICAgICAgICAgICAgInZwbiI6IHRydWUsCiAgICAgICAgICAgICJ0b3IiOiB0cnVlLAogICAgICAgICAgICAiYWN0aXZlX3ZwbiI6IGZhbHNlLAogICAgICAgICAgICAiYWN0aXZlX3RvciI6IHRydWUsCiAgICAgICAgICAgICJkZXZpY2VfYnJhbmQiOiAiTlwvQSIsCiAgICAgICAgICAgICJkZXZpY2VfbW9kZWwiOiAiTlwvQSIsCiAgICAgICAgICAgICJyZWNlbnRfYWJ1c2UiOiB0cnVlLAogICAgICAgICAgICAiYm90X3N0YXR1cyI6IGZhbHNlLAogICAgICAgICAgICAiY29ubmVjdGlvbl90eXBlIjogIlByZW1pdW0gcmVxdWlyZWQuIiwKICAgICAgICAgICAgImFidXNlX3ZlbG9jaXR5IjogIlByZW1pdW0gcmVxdWlyZWQuIiwKICAgICAgICAgICAgInJlcXVlc3RfaWQiOiAiNHVUTzc4cER4eXIzUFAiCiAgICAgICAgfQogICAgKi8KfSgpKTs=",
  },
  {
    "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript2",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from WordPress",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "WordPress Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJuYW1lKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmRpc3BsYXlfbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5hdmF0YXJfVVJMKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJuYW1lKSkp",
  },
  {
    "_id": "ac9fc25e-3ad9-4f80-a796-2d9093795439",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if MFA has already been performed for this journey. This allows journeys and inner journeys not to perform MFA multiple times.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "MFA Status",
    "script": "LyogTUZBIFN0YXR1cwogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBDaGVjayBpZiBNRkEgaGFzIGFscmVhZHkgYmVlbiBwZXJmb3JtZWQgZm9yIHRoaXMgam91cm5leS4gCiAqIFRoaXMgYWxsb3dzIGpvdXJuZXlzIGFuZCBpbm5lciBqb3VybmV5cyBub3QgdG8gcGVyZm9ybSBNRkEgbXVsdGlwbGUgdGltZXMuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKi8Kb3V0Y29tZSA9ICJmYWxzZSI7CmlmIChzaGFyZWRTdGF0ZS5nZXQoIm1mYVBlcmZvcm1lZCIpPT0idHJ1ZSIpIHsKICAgICAgb3V0Y29tZSA9ICJ0cnVlIjsKfQ==",
  },
  {
    "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Converts a normalized social profile into an Identity",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized Profile to Identity",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgaWRlbnRpdHkgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgiY24iLCBub3JtYWxpemVkUHJvZmlsZS5kaXNwbGF5TmFtZSksCiAgICAgICAgZmllbGQoInVzZXJOYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUudXNlcm5hbWUpLAogICAgICAgIGZpZWxkKCJpcGxhbmV0LWFtLXVzZXItYWxpYXMtbGlzdCIsIHNlbGVjdGVkSWRwICsgJy0nICsgbm9ybWFsaXplZFByb2ZpbGUuaWQuYXNTdHJpbmcoKSkpKQoKcmV0dXJuIGlkZW50aXR5",
  },
  {
    "_id": "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Social Identity Provider Profile Transformation for ForgeRock OIDC Providers",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ST_healthcare-idc-social-transformation",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2suIE5vdCBmb3IgcHJvZHVjdGlvbiB1c2UuCiAqIE1vZGlmaWVkIGJ5IFN0ZXBoZW4gUGF5bmUKICovCi8qIFNvY2lhbCBJZGVudGl0eSBQcm92aWRlciBQcm9maWxlIFRyYW5zZm9ybWF0aW9uIHNjcmlwdCBmb3IgSGVhbHRoY2FyZSBJRCBDbG91ZCAqLwppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKbG9nZ2VyLmVycm9yKCJTVF9oZWFsdGhjYXJlLWlkYy1zb2NpYWwtdHJhbnNmb3JtYXRpb24gSGVhbHRoY2FyZSBJRCBDbG91ZCBJZGVudGl0eSBQcm92aWRlciBQcm9maWxlIFRyYW5zZm9ybWF0aW9uIHNjcmlwdDogU3RhcnQiKTsKCmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uIFByb2ZpbGUgVHJhbnNmb3JtYXRpb24gc2NyaXB0OiBTdGFydCIpOwpsb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbnk6IGdpdmVuTmFtZSAiICsgcmF3UHJvZmlsZS5naXZlbk5hbWUpOwpsb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbjogc246ICIgK3Jhd1Byb2ZpbGUuZmFtaWx5TmFtZSk7CmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBpZDogIiArcmF3UHJvZmlsZS5pZCk7CmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBtYWlsOiAiICsgcmF3UHJvZmlsZS5lbWFpbCk7CmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBjbjogIiArIHJhd1Byb2ZpbGUuZGlzcGxheU5hbWUpOwpsb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbjogdXNlck5hbWU6ICIgKyByYXdQcm9maWxlLnVzZXJuYW1lKTsKbG9nZ2VyLmVycm9yKCJTVF9oZWFsdGhjYXJlLWlkYy1zb2NpYWwtdHJhbnNmb3JtYXRpb246IGlkOiAiICsgcmF3UHJvZmlsZS5pZC5hc1N0cmluZygpKTsKLy9sb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbjogaXBsYW5ldC1hbS11c2VyLWFsaWFzLWxpc3Q6ICIgKyBzZWxlY3RlZElkcCArICctJyArIHJhd1Byb2ZpbGUuaWQuYXNTdHJpbmcoKSApOwovL2xvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBzZWxlY3RlZElkcDogIiArIHNlbGVjdGVkSWRwKTsKaWYgKHJhd1Byb2ZpbGUuZmhpclVzZXIuaXNOb3ROdWxsKCkpIGxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBmaGlyVXNlcjogIiArIHJhd1Byb2ZpbGUuZmhpclVzZXIpOwppZiAocmF3UHJvZmlsZS5JQUwuaXNOb3ROdWxsKCkpIGxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW86IElBTDogIiArIHJhd1Byb2ZpbGUuSUFMKTsKCgoKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJJQUwiLCByYXdQcm9maWxlLklBTCksICAKICAgICAgICBmaWVsZCgidGVsZXBob25lTnVtYmVyIiwgcmF3UHJvZmlsZS5waG9uZV9udW1iZXIpLAogICAgICAgIGZpZWxkKCJmaGlyVXNlciIsIHJhd1Byb2ZpbGUuZmhpclVzZXIpLAogICAgICAgIGZpZWxkKCJ1c2VyVHlwZSIsIHJhd1Byb2ZpbGUudXNlclR5cGUpLAogICAgICAgICkKKQ==",
  },
  {
    "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript1",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "9535446c-0ff6-4a76-8576-616599119d64",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Remove button from page.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Remove Button",
    "script": "LyogUmVtb3ZlIEJ1dHRvbgogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBIaWRlIGJ1dHRvbnMgb24gdGhlIGpvdXJuZXkgcGFnZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7ZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnfSkiCiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICApCiAgICB2YXIgbWVzc2FnZSA9ICIgIgogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgICAgIGZyLlRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgICAgICAgIG1lc3NhZ2UKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9Cn0oKSk7",
  },
  {
    "_id": "9399ac8b-3a6e-423b-95a2-6e0fd07262b1",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "APIProtection: Get Key And Secret",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "APIProtection: Get Key And Secret",
    "script": "bG9nZ2VyLndhcm5pbmcoIkFQSVByb3RlY3Rpb246IEdldCBLZXkgQW5kIFNlY3JldDogc3RhcnQiKTsKCi8qCiAqIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqLwp2YXIgS0VZX0hFQURFUl9OQU1FID0gIngtYXBpLWtleSI7CnZhciBTRUNSRVRfSEVBREVSX05BTUUgPSAieC1hcGktc2VjcmV0IjsKdmFyIFVTRVJOQU1FX0hFQURFUl9OQU1FID0gIlgtT3BlbkFNLVVzZXJuYW1lIjsKdmFyIFBBU1NXT1JEX0hFQURFUl9OQU1FID0gIlgtT3BlbkFNLVBhc3N3b3JkIjsKLyoKICogRU5EIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqLwoKb3V0Y29tZSA9ICJmYWxzZSI7Cgp2YXIga2V5ID0gZ2V0SGVhZGVyKEtFWV9IRUFERVJfTkFNRSkgfHwgcmVhZFZhbHVlKEtFWV9IRUFERVJfTkFNRSkgfHwgbnVsbDsKdmFyIHNlY3JldCA9IGdldEhlYWRlcihTRUNSRVRfSEVBREVSX05BTUUpIHx8IHJlYWRUcmFuc2llbnRWYWx1ZShTRUNSRVRfSEVBREVSX05BTUUpIHx8IG51bGw7Cgp2YXIgdXNlcm5hbWUgPSBzaGFyZWRTdGF0ZS5nZXQoInVzZXJuYW1lIikgfHwgbnVsbDsKdmFyIHBhc3N3b3JkID0gdHJhbnNpZW50U3RhdGUuZ2V0KCJwYXNzd29yZCIpIHx8IG51bGw7CgppZiAoa2V5ICYmIHNlY3JldCkgewogICAgbG9nZ2VyLndhcm5pbmcoIkFQSVByb3RlY3Rpb246IEdldCBLZXkgQW5kIFNlY3JldDoga2V5PSIuY29uY2F0KGtleSkpOwogIAogICAgICBzdG9yZVZhbHVlKEtFWV9IRUFERVJfTkFNRSwga2V5KTsKICAgICAgc3RvcmVWYWx1ZSgidXNlcm5hbWUiLCB1c2VybmFtZSk7CiAgICAgIHNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCBrZXkpOwogICAgICAKICAgICAgc3RvcmVUcmFuc2llbnRWYWx1ZShTRUNSRVRfSEVBREVSX05BTUUsIHNlY3JldCk7CiAgICAgIHN0b3JlVHJhbnNpZW50VmFsdWUoInBhc3N3b3JkIiwgcGFzc3dvcmQpOwogICAgICB0cmFuc2llbnRTdGF0ZS5wdXQoInBhc3N3b3JkIiwgc2VjcmV0KTsKICAKICAgIG91dGNvbWUgPSAidHJ1ZSI7Cn0KCmxvZ2dlci53YXJuaW5nKCJBUElQcm90ZWN0aW9uOiBHZXQgS2V5IEFuZCBTZWNyZXQ6IGZpbmlzaCBbb3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIl0iKSk7CgovKgogKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgcmVxdWVzdGVkIGhlYWRlcgogKi8KZnVuY3Rpb24gZ2V0SGVhZGVyKGhlYWRlck5hbWUpIHsKICAgICAgaWYgKHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKSAmJiByZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkuZ2V0KDApKSB7CiAgICAgICAgcmV0dXJuIHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKS5nZXQoMCkudG9TdHJpbmcoKTsKICAgIH0KICAgICAgcmV0dXJuIG51bGw7Cn0KCi8qCiAqIFN0b3JlIHZhbHVlIGZvciBBUElQcm90ZWN0aW9uIHNjcmlwdCB1c2UKICovCmZ1bmN0aW9uIHN0b3JlVmFsdWUobmFtZSwgdmFsdWUpIHsKICAgICAgdmFyIHN0b3JhZ2UgPSBzaGFyZWRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKTsKICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAoc3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgc3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHN0b3JhZ2VbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh2YWx1ZSkgewogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgiQVBJUHJvdGVjdGlvbiIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9Cn0KCi8qCiAqIFJlYWQgdmFsdWUgZnJvbSBzdG9yYWdlIGZvciBBUElQcm90ZWN0aW9uIHNjcmlwdCB1c2UKICovCmZ1bmN0aW9uIHJlYWRWYWx1ZShuYW1lKSB7CiAgICAgIHZhciBzdG9yYWdlID0gc2hhcmVkU3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIik7CiAgICBpZiAoc3RvcmFnZSkgewogICAgICAgICAgaWYgKHN0b3JhZ2UuZ2V0KSB7CiAgICAgICAgICAgIHJldHVybiBzaGFyZWRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKS5nZXQobmFtZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHN0b3JhZ2UubmFtZTsKICAgICAgICB9CiAgICB9CiAgICAgIHJldHVybiBudWxsOwp9CgovKgogKiBTdG9yZSB0cmFuc2llbnQgdmFsdWUgZm9yIEFQSVByb3RlY3Rpb24gc2NyaXB0IHVzZQogKi8KZnVuY3Rpb24gc3RvcmVUcmFuc2llbnRWYWx1ZShuYW1lLCB2YWx1ZSkgewogICAgdmFyIHRyYW5zaWVudFN0b3JhZ2UgPSB0cmFuc2llbnRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKTsKICAgIGlmICh0cmFuc2llbnRTdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAodHJhbnNpZW50U3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgdHJhbnNpZW50U3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHRyYW5zaWVudFN0b3JhZ2VbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh2YWx1ZSkgewogICAgICAgIHRyYW5zaWVudFN0YXRlLnB1dCgiQVBJUHJvdGVjdGlvbiIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9Cn0KCi8qCiAqIFJlYWQgdHJhbnNpZW50IHZhbHVlIGZyb20gc3RvcmFnZSBmb3IgQVBJUHJvdGVjdGlvbiBzY3JpcHQgdXNlCiAqLwpmdW5jdGlvbiByZWFkVHJhbnNpZW50VmFsdWUobmFtZSkgewogICAgICB2YXIgdHJhbnNpZW50U3RvcmFnZSA9IHRyYW5zaWVudFN0YXRlLmdldCgiQVBJUHJvdGVjdGlvbiIpOwogICAgaWYgKHRyYW5zaWVudFN0b3JhZ2UpIHsKICAgICAgICAgIGlmICh0cmFuc2llbnRTdG9yYWdlLmdldCkgewogICAgICAgICAgICByZXR1cm4gdHJhbnNpZW50U3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIikuZ2V0KG5hbWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHJldHVybiB0cmFuc2llbnRTdG9yYWdlLm5hbWU7CiAgICAgICAgfQogICAgfQogICAgICByZXR1cm4gbnVsbDsKfQ==",
  },
  {
    "_id": "c234ba0b-58a1-4cfd-9567-09edde980745",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 1433147666269,
    "default": true,
    "description": "Internal token modification script",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ForgeRock Internal: OAuth2 Access Token Modification Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwovLyBTY3JpcHQgaXMgaW50ZW50aW9uYWxseSBlbXB0eQo=",
  },
  {
    "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for Social Identity Provider Profile Transformation",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Social Identity Provider Profile Transformation Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyogRGVmYXVsdCBTb2NpYWwgSWRlbnRpdHkgUHJvdmlkZXIgUHJvZmlsZSBUcmFuc2Zvcm1hdGlvbiBzY3JpcHQgdG8gdXNlIGFzIGEgdGVtcGxhdGUgZm9yIG5ldyBzY3JpcHRzICov",
  },
  {
    "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from GitHub",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "GitHub Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUubG9naW4pKSk=",
  },
  {
    "_id": "e0666b8b-f625-4047-89d8-e7e91151027f",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Twilio Voice OTP Sender",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio Voice OTP Sender",
    "script": "LyogVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXIKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogVGhpcyBzY3JpcHQgd2lsbCBkZWxpdmVyIHRoZSBPVFAgdmlhIHZvaWNlIHRvIHRoZSBwaG9uZSBudW1iZXIgaW4gdGhlIHVzZXIncyBwcm9maWxlLgogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIElkZW50aWZ5IEV4aXN0aW5nIFVzZXIgbm9kZSBhbmQgSE9UUCBHZW5lcmF0b3Igbm9kZSBiZWZvcmUgaXQgaXMgYmVpbmcgY2FsbGVkLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHNlbnQKICogLSBmYWlsZWQKICovCmxvZ2dlci53YXJuaW5nKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogc3RhcnQiKTsKCmlmIChzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpICYmIGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInRlbGVwaG9uZU51bWJlciIpLml0ZXJhdG9yKCkuaGFzTmV4dCgpKSB7CiAgICB2YXIgQmFzZTY0PXtfa2V5U3RyOiJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSIsZW5jb2RlOmZ1bmN0aW9uKGlucHV0KXt2YXIgb3V0cHV0PSIiO3ZhciBjaHIxLGNocjIsY2hyMyxlbmMxLGVuYzIsZW5jMyxlbmM0O3ZhciBpPTA7aW5wdXQ9QmFzZTY0Ll91dGY4X2VuY29kZShpbnB1dCk7d2hpbGUoaTxpbnB1dC5sZW5ndGgpe2NocjE9aW5wdXQuY2hhckNvZGVBdChpKyspO2NocjI9aW5wdXQuY2hhckNvZGVBdChpKyspO2NocjM9aW5wdXQuY2hhckNvZGVBdChpKyspO2VuYzE9Y2hyMT4+MjtlbmMyPShjaHIxJjMpPDw0fGNocjI+PjQ7ZW5jMz0oY2hyMiYxNSk8PDJ8Y2hyMz4+NjtlbmM0PWNocjMmNjM7aWYoaXNOYU4oY2hyMikpe2VuYzM9ZW5jND02NH1lbHNlIGlmKGlzTmFOKGNocjMpKXtlbmM0PTY0fW91dHB1dD1vdXRwdXQrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmMxKSt0aGlzLl9rZXlTdHIuY2hhckF0KGVuYzIpK3RoaXMuX2tleVN0ci5jaGFyQXQoZW5jMykrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmM0KX1yZXR1cm4gb3V0cHV0fSxkZWNvZGU6ZnVuY3Rpb24oaW5wdXQpe3ZhciBvdXRwdXQ9IiI7dmFyIGNocjEsY2hyMixjaHIzO3ZhciBlbmMxLGVuYzIsZW5jMyxlbmM0O3ZhciBpPTA7aW5wdXQ9aW5wdXQucmVwbGFjZSgvW15BLVphLXowLTlcK1wvXD1dL2csIiIpO3doaWxlKGk8aW5wdXQubGVuZ3RoKXtlbmMxPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMyPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMzPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmM0PXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtjaHIxPWVuYzE8PDJ8ZW5jMj4+NDtjaHIyPShlbmMyJjE1KTw8NHxlbmMzPj4yO2NocjM9KGVuYzMmMyk8PDZ8ZW5jNDtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMSk7aWYoZW5jMyE9NjQpe291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIyKX1pZihlbmM0IT02NCl7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjMpfX1vdXRwdXQ9QmFzZTY0Ll91dGY4X2RlY29kZShvdXRwdXQpO3JldHVybiBvdXRwdXR9LF91dGY4X2VuY29kZTpmdW5jdGlvbihzdHJpbmcpe3N0cmluZz1zdHJpbmcucmVwbGFjZSgvXHJcbi9nLCJcbiIpO3ZhciB1dGZ0ZXh0PSIiO2Zvcih2YXIgbj0wO248c3RyaW5nLmxlbmd0aDtuKyspe3ZhciBjPXN0cmluZy5jaGFyQ29kZUF0KG4pO2lmKGM8MTI4KXt1dGZ0ZXh0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGMpfWVsc2UgaWYoYz4xMjcmJmM8MjA0OCl7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj42fDE5Mik7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjJjYzfDEyOCl9ZWxzZXt1dGZ0ZXh0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGM+PjEyfDIyNCk7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj42JjYzfDEyOCk7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjJjYzfDEyOCl9fXJldHVybiB1dGZ0ZXh0fSxfdXRmOF9kZWNvZGU6ZnVuY3Rpb24odXRmdGV4dCl7dmFyIHN0cmluZz0iIjt2YXIgaT0wO3ZhciBjPWMxPWMyPTA7d2hpbGUoaTx1dGZ0ZXh0Lmxlbmd0aCl7Yz11dGZ0ZXh0LmNoYXJDb2RlQXQoaSk7aWYoYzwxMjgpe3N0cmluZys9U3RyaW5nLmZyb21DaGFyQ29kZShjKTtpKyt9ZWxzZSBpZihjPjE5MSYmYzwyMjQpe2MyPXV0ZnRleHQuY2hhckNvZGVBdChpKzEpO3N0cmluZys9U3RyaW5nLmZyb21DaGFyQ29kZSgoYyYzMSk8PDZ8YzImNjMpO2krPTJ9ZWxzZXtjMj11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsxKTtjMz11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsyKTtzdHJpbmcrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGMmMTUpPDwxMnwoYzImNjMpPDw2fGMzJjYzKTtpKz0zfX1yZXR1cm4gc3RyaW5nfX07CgogICAgLyogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqCiAgICAgKiBSRVBMQUNFIFdJVEggWU9VUiBPV04gQVpVUkUgQUQgU0VUVElOR1MKICAgICAqLwogICAgdmFyIFRXSUxJT19BUElfU0lEID0gIkFDNzUwNDE1ZTMxNjNhMmU1N2I3YWVlYTdlZWQ4MmQ5NDQiOwogICAgdmFyIFRXSUxJT19BUElfVE9LRU4gPSAiZDM2YTcxOWM5NGI0YmUwODU5MmQ2OWVjNGY4MGE1YmIiOwogICAgdmFyIFRXSUxJT19BUElfRlJPTSA9ICIrMTMxNzY0NDMxMDciOwogICAgLyoKICAgICAqIEVORCBTQ1JJUFQgQ09ORklHVVJBVElPTgogICAgICovCiAgCiAgICAvLyBUd2lsaW8gU01TIE1lc3NhZ2UgQVBJIENvbmZpZ3VyYXRpb24KICAgIHZhciBUV0lMSU9fQVBJX1VSSSA9ICJodHRwczovL2FwaS50d2lsaW8uY29tLzIwMTAtMDQtMDEvQWNjb3VudHMvIi5jb25jYXQoVFdJTElPX0FQSV9TSUQpLmNvbmNhdCgiL0NhbGxzLmpzb24iKTsgICAgCiAgICB2YXIgVFdJTElPX0FQSV9UTyA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInRlbGVwaG9uZU51bWJlciIpLml0ZXJhdG9yKCkubmV4dCgpOwogICAgICB2YXIgT1RQID0gc2hhcmVkU3RhdGUuZ2V0KCJvbmVUaW1lUGFzc3dvcmQiKS5zcGxpdCgiIikuam9pbigiOyAiKTsKICAgIHZhciBUV0lMSU9fQVBJX1RXSU1MID0gIjxSZXNwb25zZT48UGF1c2UgbGVuZ3RoPScxJy8+PFNheSB2b2ljZT0nYWxpY2UnPllvdXIgb25lLXRpbWUgcGFzc3dvcmQgaXMgIi5jb25jYXQoT1RQKS5jb25jYXQoIjwvU2F5PjxQYXVzZSBsZW5ndGg9JzEnLz48U2F5PllvdXIgb25lLXRpbWUgcGFzc3dvcmQgaXMgIikuY29uY2F0KE9UUCkuY29uY2F0KCI8L1NheT48UGF1c2UgbGVuZ3RoPScxJy8+PFNheT5Hb29kYnllPC9TYXk+PC9SZXNwb25zZT4iKTsKICAgIC8vbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBWb2ljZSBPVFAgU2VuZGVyOiBUbzogIi5jb25jYXQoVFdJTElPX0FQSV9UTykpOwogICAgLy9sb2dnZXIud2FybmluZygiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IFR3aW1sOiAiLmNvbmNhdChUV0lMSU9fQVBJX1RXSU1MKSk7CgogICAgdmFyIEFVVEhaID0gIkJhc2ljICIuY29uY2F0KEJhc2U2NC5lbmNvZGUoVFdJTElPX0FQSV9TSUQuY29uY2F0KCc6JykuY29uY2F0KFRXSUxJT19BUElfVE9LRU4pKSk7CiAgICAvL2xvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IEFVVEhaIC0gIi5jb25jYXQoQVVUSFopKTsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ1BPU1QnKTsKICAgIHJlcXVlc3Quc2V0VXJpKFRXSUxJT19BUElfVVJJKTsKICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCJBdXRob3JpemF0aW9uIiwgQVVUSFopOwogICAgdmFyIHBhcmFtcyA9IHJlcXVlc3QuZ2V0Rm9ybSgpOwogICAgcGFyYW1zLmFkZCgiRnJvbSIsIFRXSUxJT19BUElfRlJPTSk7CiAgICBwYXJhbXMuYWRkKCJUd2ltbCIsIFRXSUxJT19BUElfVFdJTUwpOwogICAgcGFyYW1zLmFkZCgiVG8iLCBUV0lMSU9fQVBJX1RPKTsKICAgIHJlcXVlc3QuZ2V0RW50aXR5KCkuc2V0U3RyaW5nKHBhcmFtcy50b1N0cmluZygpKTsKCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICAvL2xvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IEpTT04gcmVzdWx0OiAiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7CgogICAgaWYgKHJlc3VsdFsic3RhdHVzIl09PSJxdWV1ZWQiKSB7CiAgICAgICAgb3V0Y29tZSA9IHJlc3VsdFsic3RhdHVzIl07CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogc3RhdHVzID0gIi5jb25jYXQocmVzdWx0WyJzdGF0dXMiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IHN1YnJlc291cmNlX3VyaXMgPSAiLmNvbmNhdChyZXN1bHRbInN1YnJlc291cmNlX3VyaXMiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IG91dGNvbWUgPSAiLmNvbmNhdChvdXRjb21lKSk7CiAgICB9IGVsc2UgewogICAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBWb2ljZSBPVFAgU2VuZGVyOiBzdGF0dXMgPSAiLmNvbmNhdChyZXN1bHRbInN0YXR1cyJdKSk7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogY29kZSA9ICIuY29uY2F0KHJlc3VsdFsiY29kZSJdKSk7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogbW9yZV9pbmZvID0gIi5jb25jYXQocmVzdWx0WyJtb3JlX2luZm8iXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IG1lc3NhZ2UgPSAiLmNvbmNhdChyZXN1bHRbIm1lc3NhZ2UiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IG91dGNvbWUgPSAiLmNvbmNhdChvdXRjb21lKSk7CiAgICB9Cn0gZWxzZSB7CiAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogTm8gdXNlciBvciBwaG9uZSBudW1iZXIgZm91bmQhIFVzZSAnSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIGJlZm9yZSB0aGlzIHNjcmlwdCB0byBwb3B1bGF0ZSB0aGUgdXNlcidzIF9pZCBpbiBzaGFyZWQgc3RhdGUhJyIpOwogICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogb3V0Y29tZSA9ICIuY29uY2F0KG91dGNvbWUpKTsKfQ==",
  },
  {
    "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
    "context": "AUTHENTICATION_SERVER_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for server side Scripted Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Module - Server Side",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgp2YXIgU1RBUlRfVElNRSA9IDk7ICAvLyA5YW0KdmFyIEVORF9USU1FICAgPSAxNzsgLy8gNXBtCnZhciBsb25naXR1ZGUsIGxhdGl0dWRlOwp2YXIgbG9jYWxUaW1lOwoKbG9nZ2VyLm1lc3NhZ2UoIlN0YXJ0aW5nIHNjcmlwdGVkIGF1dGhlbnRpY2F0aW9uIik7CmxvZ2dlci5tZXNzYWdlKCJVc2VyOiAiICsgdXNlcm5hbWUpOwoKdmFyIHVzZXJQb3N0YWxBZGRyZXNzID0gZ2V0VXNlclBvc3RhbEFkZHJlc3MoKTsKbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgYWRkcmVzczogIiArIHVzZXJQb3N0YWxBZGRyZXNzKTsKCmdldExvbmdpdHVkZUxhdGl0dWRlRnJvbVVzZXJQb3N0YWxBZGRyZXNzKCk7CmdldExvY2FsVGltZSgpOwoKbG9nZ2VyLm1lc3NhZ2UoIkN1cnJlbnQgdGltZSBhdCB0aGUgdXNlcnMgbG9jYXRpb246ICIgKyBsb2NhbFRpbWUuZ2V0SG91cnMoKSk7CmlmIChsb2NhbFRpbWUuZ2V0SG91cnMoKSA8IFNUQVJUX1RJTUUgfHwgbG9jYWxUaW1lLmdldEhvdXJzKCkgPiBFTkRfVElNRSkgewogICAgbG9nZ2VyLmVycm9yKCJMb2dpbiBmb3JiaWRkZW4gb3V0c2lkZSB3b3JrIGhvdXJzISIpOwogICAgYXV0aFN0YXRlID0gRkFJTEVEOwp9IGVsc2UgewogICAgbG9nZ2VyLm1lc3NhZ2UoIkF1dGhlbnRpY2F0aW9uIGFsbG93ZWQhIik7CiAgICBhdXRoU3RhdGUgPSBTVUNDRVNTOwp9CgpmdW5jdGlvbiBnZXRMb25naXR1ZGVMYXRpdHVkZUZyb21Vc2VyUG9zdGFsQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlclBvc3RhbEFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwogICAgICAvL3RoZSBhYm92ZSBVUkkgaGFzIHRvIGJlIGV4dGVuZGVkIHdpdGggYW4gQVBJX0tFWSBpZiB1c2VkIGluIGEgZnJlcXVlbnQgbWFubmVyCiAgICAgIC8vc2VlIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9nZW9jb2RpbmcvaW50cm8KCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICBsb2dSZXNwb25zZShyZXNwb25zZSk7CgogICAgdmFyIGdlb2NvZGUgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IGdlb2NvZGUucmVzdWx0cy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciByZXN1bHQgPSBnZW9jb2RlLnJlc3VsdHNbaV07CiAgICAgICAgbGF0aXR1ZGUgPSByZXN1bHQuZ2VvbWV0cnkubG9jYXRpb24ubGF0OwogICAgICAgIGxvbmdpdHVkZSA9IHJlc3VsdC5nZW9tZXRyeS5sb2NhdGlvbi5sbmc7CiAgICAgIAogICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJsYXRpdHVkZToiICsgbGF0aXR1ZGUgKyAiIGxvbmdpdHVkZToiICsgbG9uZ2l0dWRlKTsKICAgIH0KfQoKZnVuY3Rpb24gZ2V0TG9jYWxUaW1lKCkgewoKICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7CiAgICB2YXIgbG9jYXRpb24gPSAibG9jYXRpb249IiArIGxhdGl0dWRlICsgIiwiICsgbG9uZ2l0dWRlOwogICAgdmFyIHRpbWVzdGFtcCA9ICJ0aW1lc3RhbXA9IiArIG5vdzsKICAgICAgICAKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL3RpbWV6b25lL2pzb24/IiArIGxvY2F0aW9uICsgIiYiICsgdGltZXN0YW1wKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwogICAgICAvL3RoZSBhYm92ZSBVUkkgaGFzIHRvIGJlIGV4dGVuZGVkIHdpdGggYW4gQVBJX0tFWSBpZiB1c2VkIGluIGEgZnJlcXVlbnQgbWFubmVyCiAgICAgIC8vc2VlIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi90aW1lem9uZS9pbnRybwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgdGltZXpvbmUgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIHZhciBsb2NhbFRpbWVzdGFtcCA9IHBhcnNlSW50KG5vdykgKyBwYXJzZUludCh0aW1lem9uZS5kc3RPZmZzZXQpICsgcGFyc2VJbnQodGltZXpvbmUucmF3T2Zmc2V0KTsKICAgIGxvY2FsVGltZSA9IG5ldyBEYXRlKGxvY2FsVGltZXN0YW1wKjEwMDApOwp9CgpmdW5jdGlvbiBnZXRVc2VyUG9zdGFsQWRkcmVzcygpIHsKICAgIHZhciB1c2VyQWRkcmVzc1NldCA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUodXNlcm5hbWUsICJwb3N0YWxBZGRyZXNzIik7CiAgICBpZiAodXNlckFkZHJlc3NTZXQgPT0gbnVsbCB8fCB1c2VyQWRkcmVzc1NldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gYWRkcmVzcyBzcGVjaWZpZWQgZm9yIHVzZXI6ICIgKyB1c2VybmFtZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHVzZXJBZGRyZXNzU2V0Lml0ZXJhdG9yKCkubmV4dCgpCn0KCmZ1bmN0aW9uIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKSB7CiAgICBsb2dnZXIubWVzc2FnZSgiVXNlciBSRVNUIENhbGwuIFN0YXR1czogIiArIHJlc3BvbnNlLmdldFN0YXR1cygpICsgIiwgQm9keTogIiArIHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKfQ==",
  },
  {
    "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
    "context": "SAML2_IDP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Always redirect browser pre-auth",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Saml2 IDP Adapter Always Auth",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGUgc2NyaXB0IGhhcyB0aGVzZSB0b3AgbGV2ZWwgZnVuY3Rpb25zIHRoYXQgY291bGQgYmUgZXhlY3V0ZWQgZHVyaW5nIGEgU0FNTDIgZmxvdy4KICogICAgICAtIHByZVNpbmdsZVNpZ25PbgogKiAgICAgIC0gcHJlQXV0aGVudGljYXRpb24KICogICAgICAtIHByZVNlbmRSZXNwb25zZQogKiAgICAgIC0gcHJlU2lnblJlc3BvbnNlCiAqICAgICAgLSBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlCiAqCiAqIFBsZWFzZSBzZWUgdGhlIGphdmFkb2MgZm9yIHRoZSBpbnRlcmZhY2UgZGVmaW5pdGlvbiBhbmQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGVzZSBtZXRob2RzLgogKiBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4yL2FwaWRvY3MvY29tL3N1bi9pZGVudGl0eS9zYW1sMi9wbHVnaW5zL1NBTUwySWRlbnRpdHlQcm92aWRlckFkYXB0ZXIuaHRtbAogKiBOb3RlIHRoYXQgdGhlIGluaXRpYWxpemUgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIHNjcmlwdHMuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbiBvbiB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvbnMgZm9yIHRoZSB2YXJpYWJsZXMgYXZhaWxhYmxlIHRvIGl0LgogKgogKiBob3N0ZWRFbnRpdHlJZCAtIFN0cmluZwogKiAgICAgRW50aXR5IElEIGZvciB0aGUgaG9zdGVkIElEUAogKiByZWFsbSAtIFN0cmluZwogKiAgICAgUmVhbG0gb2YgdGhlIGhvc3RlZCBJRFAKICogaWRwQWRhcHRlclNjcmlwdEhlbHBlciAtIElkcEFkYXB0ZXJTY3JpcHRIZWxwZXIgKDEpCiAqICAgICBBbiBpbnN0YW5jZSBvZiBJZHBBZGFwdGVyU2NyaXB0SGVscGVyIGNvbnRhaW5pbmcgaGVscGVyIG1ldGhvZHMuIFNlZSBKYXZhZG9jIGZvciBtb3JlIGRldGFpbHMuCiAqIHJlcXVlc3QgLSBIdHRwU2VydmxldFJlcXVlc3QgKDIpCiAqICAgICBTZXJ2bGV0IHJlcXVlc3Qgb2JqZWN0CiAqIHJlc3BvbnNlIC0gSHR0cFNlcnZsZXRSZXNwb25zZSAoMykKICogICAgIFNlcnZsZXQgcmVzcG9uc2Ugb2JqZWN0CiAqIGF1dGhuUmVxdWVzdCAtIEF1dGhuUmVxdWVzdCAoNCkKICogICAgIFRoZSBvcmlnaW5hbCBhdXRoZW50aWNhdGlvbiByZXF1ZXN0IHNlbnQgZnJvbSBTUAogKiByZXFJZCAtIFN0cmluZwogKiAgICAgVGhlIGlkIHRvIHVzZSBmb3IgY29udGludWF0aW9uIG9mIHByb2Nlc3NpbmcgaWYgdGhlIGFkYXB0ZXIgcmVkaXJlY3RzCiAqIHJlcyAtIFJlc3BvbnNlICg1KQogKiAgICAgVGhlIFNBTUwgUmVzcG9uc2UKICogc2Vzc2lvbiAtIFNTT1Rva2VuICg2KQogKiAgICAgVGhlIHNpbmdsZSBzaWduLW9uIHNlc3Npb24uIFRoZSByZWZlcmVuY2UgdHlwZSBvZiB0aGlzIGlzIE9iamVjdCBhbmQgd291bGQgbmVlZCB0byBiZSBjYXN0ZWQgdG8gU1NPVG9rZW4uCiAqIHJlbGF5U3RhdGUgLSBTdHJpbmcKICogICAgIFRoZSByZWxheVN0YXRlIHRoYXQgd2lsbCBiZSB1c2VkIGluIHRoZSByZWRpcmVjdAogKiBmYXVsdENvZGUgLSBTdHJpbmcKICogICAgIHRoZSBmYXVsdCBjb2RlIHRoYXQgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGUgU0FNTCByZXNwb25zZQogKiBmYXVsdERldGFpbCAtIFN0cmluZwogKiAgICAgdGhlIGZhdWx0IGRldGFpbCB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIFNBTUwgcmVzcG9uc2UKICogbG9nZ2VyIC0gTG9nZ2VyIGluc3RhbmNlCiAqICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiAgICAgQ29ycmVzcG9uZGluZyBsb2cgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLjxzY3JpcHQgbmFtZT4KICoKICogVGhyb3dzIFNBTUwyRXhjZXB0aW9uICg3KToKICogICAgIGZvciBhbnkgZXhjZXB0aW9ucyBvY2N1cnJpbmcgaW4gdGhlIGFkYXB0ZXIuIFRoZSBmZWRlcmF0aW9uIHByb2Nlc3Mgd2lsbCBjb250aW51ZQogKgogKiBDbGFzcyByZWZlcmVuY2U6CiAqICgxKSBpZHBBZGFwdGVyU2NyaXB0SGVscGVyIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcGx1Z2lucy9zY3JpcHRlZC9JZHBBZGFwdGVyU2NyaXB0SGVscGVyLmh0bWwuCiAqICgyKSBIdHRwU2VydmxldFJlcXVlc3QgLSBodHRwczovL3RvbWNhdC5hcGFjaGUub3JnL3RvbWNhdC03LjAtZG9jL3NlcnZsZXRhcGkvamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdC5odG1sLgogKiAoMykgSHR0cFNlcnZsZXRSZXNwb25zZSAtIGh0dHBzOi8vdG9tY2F0LmFwYWNoZS5vcmcvdG9tY2F0LTcuMC1kb2Mvc2VydmxldGFwaS9qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZS5odG1sLgogKiAoNCkgQXV0aG5SZXF1ZXN0IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcHJvdG9jb2wvQXV0aG5SZXF1ZXN0Lmh0bWwuCiAqICg1KSBSZXNwb25zZSAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3Byb3RvY29sL1Jlc3BvbnNlLmh0bWwuCiAqICg2KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vaXBsYW5ldC9zc28vU1NPVG9rZW4uaHRtbC4KICogKDcpIFNBTUwyRXhjZXB0aW9uIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvY29tbW9uL1NBTUwyRXhjZXB0aW9uLmh0bWwuCiAqLwoKLyoKICogVGVtcGxhdGUvZGVmYXVsdCBzY3JpcHQgZm9yIFNBTUwyIElEUCBBZGFwdGVyIHNjcmlwdGVkIHBsdWdpbi4KICovCgovKgogKiBBdmFpbGFibGUgdmFyaWFibGVzIGZvciBwcmVTaW5nbGVTaWduT246CiAqICAgICBob3N0ZWRFbnRpdHlJZAogKiAgICAgcmVhbG0KICogICAgIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIKICogICAgIHJlcXVlc3QKICogICAgIGF1dGhuUmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIHJlcUlkCiAqICAgICBsb2dnZXIKICoKICogUmV0dXJuIC0gdHJ1ZSBpZiBicm93c2VyIHJlZGlyZWN0aW9uIGlzIGhhcHBlbmluZyBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVTaW5nbGVTaWduT24gKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZVNpbmdsZVNpZ25PbiIpOwogICAgcmV0dXJuIHRydWU7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZUF1dGhlbnRpY2F0aW9uOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgc2Vzc2lvbgogKiAgICAgcmVsYXlTdGF0ZQogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBpcyBoYXBwZW5pbmcgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlQXV0aGVudGljYXRpb24gKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZUF1dGhlbnRpY2F0aW9uIik7CiAgICByZXR1cm4gdHJ1ZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2VuZFJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgc2Vzc2lvbgogKiAgICAgcmVsYXlTdGF0ZQogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBoYXBwZW5lZCBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVTZW5kUmVzcG9uc2UgKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZVNlbmRSZXNwb25zZSIpOwogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IGF1dGhuUmVxdWVzdDogIithdXRoblJlcXVlc3QpOwogICAgICByZXNwb25zZS5zZW5kUmVkaXJlY3QoImh0dHBzOi8vaWRjLnNjaGV1YmVyLmlvL2FtL1hVSS8/cmVhbG09YWxwaGEmYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPURpc3BhdGNoZXImRm9yY2VBdXRoPXRydWUmZ290bz0iK3JlbGF5U3RhdGUpOwogICAgcmV0dXJuIHRydWU7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZVNpZ25SZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgYXV0aG5SZXF1ZXN0CiAqICAgICBzZXNzaW9uCiAqICAgICByZWxheVN0YXRlCiAqICAgICByZXMKICogICAgIGxvZ2dlcgogKi8KZnVuY3Rpb24gcHJlU2lnblJlc3BvbnNlICgpIHsKICAgICAgbG9nZ2VyLmVycm9yKCJDaGljYWdvOiBwcmVTaWduUmVzcG9uc2UiKTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2VuZEZhaWx1cmVSZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIGZhdWx0Q29kZQogKiAgICAgZmF1bHREZXRhaWwKICogICAgIGxvZ2dlcgogKi8KZnVuY3Rpb24gcHJlU2VuZEZhaWx1cmVSZXNwb25zZSAoKSB7CiAgICAgIGxvZ2dlci5lcnJvcigiQ2hpY2FnbzogcHJlU2VuZEZhaWx1cmVSZXNwb25zZSIpOwp9",
  },
  {
    "_id": "2997bd4d-14be-4dc6-8701-27f08d10b8b7",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Profile Normalization Script for idddataweb",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "iddataweb Profile Normalization",
    "script": "LyovKgogKiBDb3B5cmlnaHQgMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4gTm90IGZvciBQcm9kdWN0aW9uIHVzZS4gCiAqIE1vZGlmaWVkIGJ5IFN0ZXBoZW4gUGF5bmUKICovCi8qIFNvY2lhbCBJZGVudGl0eSBQcm92aWRlciBQcm9maWxlIFRyYW5zZm9ybWF0aW9uIHNjcmlwdCBmb3IgSUQgRGF0YVdlYiAqLwppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKbG9nZ2VyLmVycm9yKCJpZGRhdGF3ZWJfU29jaWFsIElkZW50aXR5IFByb3ZpZGVyIFByb2ZpbGUgVHJhbnNmb3JtYXRpb24gc2NyaXB0OiBTdGFydCIpOwp1c2VyTmFtZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpLmdldCgibWFpbCIpOwpsb2dnZXIuZXJyb3IoImlkZGF0YXdlYl9Tb2NpYWwgSWRlbnRpdHkgUHJvdmlkZXIgUHJvZmlsZSBUcmFuc2Zvcm1hdGlvbiBzY3JpcHQ6IHVzZXJOYW1lIiArIHVzZXJOYW1lICk7CnVzZXJuYW1lID0gdXNlck5hbWU7CnNoYXJlZFN0YXRlLnB1dCgidXNlck5hbWUiLCB1c2VyTmFtZSk7CgpyZXR1cm4ganNvbihvYmplY3QoCiAgICAgICAgZmllbGQoImlkIiwgcmF3UHJvZmlsZS5zdWIpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfZm5hbWUuYXNTdHJpbmcoKSArICIgIiArIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfbG5hbWUuYXNTdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmNhcGl0YWxpemUoKSApLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmFjcXVpcmVkQXR0cmlidXRlc19BY3F1aXJlZEZ1bGxOYW1lX2ZuYW1lLmFzU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5jYXBpdGFsaXplKCkgKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfbG5hbWUuYXNTdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmNhcGl0YWxpemUoKSApLAogICAgICAgIGZpZWxkKCJwb3N0YWxBZGRyZXNzIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRBZGRyZXNzX2FkZHJlc3MpLAogICAgICAgIGZpZWxkKCJhZGRyZXNzTG9jYWxpdHkiLCByYXdQcm9maWxlLmFjcXVpcmVkQXR0cmlidXRlc19BY3F1aXJlZEFkZHJlc3NfbG9jYWxpdHkpLAogICAgICAgIGZpZWxkKCJhZGRyZXNzUmVnaW9uIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRBZGRyZXNzX2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMSksCiAgICAgICAgZmllbGQoInBvc3RhbENvZGUiLCByYXdQcm9maWxlLmFjcXVpcmVkQXR0cmlidXRlc19BY3F1aXJlZEFkZHJlc3NfcG9zdGFsX2NvZGUpLAogICAgICAgIGZpZWxkKCJjb3VudHJ5IiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRBZGRyZXNzX2NvdW50cnkpLAogICAgICAgIGZpZWxkKCJkcml2ZXJzTGljZW5zZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRHJpdmVyc0xpY2Vuc2VOdW1iZXJfYWNxdWlyZWREcml2ZXJzTGljZW5zZU51bWJlciksCiAgICAgICAgZmllbGQoImRyaXZlcnNMaWNlbnNlSXNzdWVyIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfRHJpdmVyc0xpY2Vuc2VJc3N1ZXJDb2RlX0RyaXZlcnNMaWNlbnNlSXNzdWVyQ29kZSksCiAgICAgICAgICBmaWVsZCgiRE9CIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRET0JfbW9udGguYXNTdHJpbmcoKSArICIvIiArIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRE9CX2RheS5hc1N0cmluZygpICsgIi8iICsgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRET0JfeWVhci5hc1N0cmluZygpICksCgogICAgICAgIGZpZWxkKCJJRFdTY29yZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0lEV1Njb3JlKSwKICAgICAgICBmaWVsZCgicG9saWN5RGVjaXNpb24iLCByYXdQcm9maWxlLnBvbGljeURlY2lzaW9uX2NvbmNsdXNpb24pLAogICAgICAgIGZpZWxkKCJwaG9uZSIsIHJhd1Byb2ZpbGUudXNlckF0dHJpYnV0ZXNfSW50ZXJuYXRpb25hbFRlbGVwaG9uZV9kaWFsQ29kZS5hc1N0cmluZygpICsgcmF3UHJvZmlsZS51c2VyQXR0cmlidXRlc19JbnRlcm5hdGlvbmFsVGVsZXBob25lX3RlbGVwaG9uZS5hc1N0cmluZygpKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCB1c2VyTmFtZSApCiAgICAgICAvL2ZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfZm5hbWUuYXNTdHJpbmcoKSArICIuIiArIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfbG5hbWUuYXNTdHJpbmcoKSApCgogICApCikK",
  },
  {
    "_id": "5b29c5b7-b161-4a42-a41f-d6c85316b951",
    "context": "SAML2_IDP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Saml2 IDP Adapter Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhlIHNjcmlwdCBoYXMgdGhlc2UgdG9wIGxldmVsIGZ1bmN0aW9ucyB0aGF0IGNvdWxkIGJlIGV4ZWN1dGVkIGR1cmluZyBhIFNBTUwyIGZsb3cuCiAqICAgICAgLSBwcmVTaW5nbGVTaWduT24KICogICAgICAtIHByZUF1dGhlbnRpY2F0aW9uCiAqICAgICAgLSBwcmVTZW5kUmVzcG9uc2UKICogICAgICAtIHByZVNpZ25SZXNwb25zZQogKiAgICAgIC0gcHJlU2VuZEZhaWx1cmVSZXNwb25zZQogKgogKiBQbGVhc2Ugc2VlIHRoZSBqYXZhZG9jIGZvciB0aGUgaW50ZXJmYWNlIGRlZmluaXRpb24gYW5kIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlc2UgbWV0aG9kcy4KICogaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcGx1Z2lucy9TQU1MMklkZW50aXR5UHJvdmlkZXJBZGFwdGVyLmh0bWwKICogTm90ZSB0aGF0IHRoZSBpbml0aWFsaXplIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBzY3JpcHRzLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlcy4gQ2hlY2sgdGhlIGRvY3VtZW50YXRpb24gb24gdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25zIGZvciB0aGUgdmFyaWFibGVzIGF2YWlsYWJsZSB0byBpdC4KICoKICogaG9zdGVkRW50aXR5SWQgLSBTdHJpbmcKICogICAgIEVudGl0eSBJRCBmb3IgdGhlIGhvc3RlZCBJRFAKICogcmVhbG0gLSBTdHJpbmcKICogICAgIFJlYWxtIG9mIHRoZSBob3N0ZWQgSURQCiAqIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIgLSBJZHBBZGFwdGVyU2NyaXB0SGVscGVyICgxKQogKiAgICAgQW4gaW5zdGFuY2Ugb2YgSWRwQWRhcHRlclNjcmlwdEhlbHBlciBjb250YWluaW5nIGhlbHBlciBtZXRob2RzLiBTZWUgSmF2YWRvYyBmb3IgbW9yZSBkZXRhaWxzLgogKiByZXF1ZXN0IC0gSHR0cFNlcnZsZXRSZXF1ZXN0ICgyKQogKiAgICAgU2VydmxldCByZXF1ZXN0IG9iamVjdAogKiByZXNwb25zZSAtIEh0dHBTZXJ2bGV0UmVzcG9uc2UgKDMpCiAqICAgICBTZXJ2bGV0IHJlc3BvbnNlIG9iamVjdAogKiBhdXRoblJlcXVlc3QgLSBBdXRoblJlcXVlc3QgKDQpCiAqICAgICBUaGUgb3JpZ2luYWwgYXV0aGVudGljYXRpb24gcmVxdWVzdCBzZW50IGZyb20gU1AKICogcmVxSWQgLSBTdHJpbmcKICogICAgIFRoZSBpZCB0byB1c2UgZm9yIGNvbnRpbnVhdGlvbiBvZiBwcm9jZXNzaW5nIGlmIHRoZSBhZGFwdGVyIHJlZGlyZWN0cwogKiByZXMgLSBSZXNwb25zZSAoNSkKICogICAgIFRoZSBTQU1MIFJlc3BvbnNlCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoNikKICogICAgIFRoZSBzaW5nbGUgc2lnbi1vbiBzZXNzaW9uLiBUaGUgcmVmZXJlbmNlIHR5cGUgb2YgdGhpcyBpcyBPYmplY3QgYW5kIHdvdWxkIG5lZWQgdG8gYmUgY2FzdGVkIHRvIFNTT1Rva2VuLgogKiByZWxheVN0YXRlIC0gU3RyaW5nCiAqICAgICBUaGUgcmVsYXlTdGF0ZSB0aGF0IHdpbGwgYmUgdXNlZCBpbiB0aGUgcmVkaXJlY3QKICogZmF1bHRDb2RlIC0gU3RyaW5nCiAqICAgICB0aGUgZmF1bHQgY29kZSB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIFNBTUwgcmVzcG9uc2UKICogZmF1bHREZXRhaWwgLSBTdHJpbmcKICogICAgIHRoZSBmYXVsdCBkZXRhaWwgdGhhdCB3aWxsIGJlIHJldHVybmVkIGluIHRoZSBTQU1MIHJlc3BvbnNlCiAqIGxvZ2dlciAtIExvZ2dlciBpbnN0YW5jZQogKiAgICAgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvc2NyaXB0aW5nLWd1aWRlL3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci4KICogICAgIENvcnJlc3BvbmRpbmcgbG9nIGZpbGVzIHdpbGwgYmUgcHJlZml4ZWQgd2l0aDogc2NyaXB0cy48c2NyaXB0IG5hbWU+CiAqCiAqIFRocm93cyBTQU1MMkV4Y2VwdGlvbiAoNyk6CiAqICAgICBmb3IgYW55IGV4Y2VwdGlvbnMgb2NjdXJyaW5nIGluIHRoZSBhZGFwdGVyLiBUaGUgZmVkZXJhdGlvbiBwcm9jZXNzIHdpbGwgY29udGludWUKICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgaWRwQWRhcHRlclNjcmlwdEhlbHBlciAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3BsdWdpbnMvc2NyaXB0ZWQvSWRwQWRhcHRlclNjcmlwdEhlbHBlci5odG1sLgogKiAoMikgSHR0cFNlcnZsZXRSZXF1ZXN0IC0gaHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy90b21jYXQtNy4wLWRvYy9zZXJ2bGV0YXBpL2phdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QuaHRtbC4KICogKDMpIEh0dHBTZXJ2bGV0UmVzcG9uc2UgLSBodHRwczovL3RvbWNhdC5hcGFjaGUub3JnL3RvbWNhdC03LjAtZG9jL3NlcnZsZXRhcGkvamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UuaHRtbC4KICogKDQpIEF1dGhuUmVxdWVzdCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3Byb3RvY29sL0F1dGhuUmVxdWVzdC5odG1sLgogKiAoNSkgUmVzcG9uc2UgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4yL2FwaWRvY3MvY29tL3N1bi9pZGVudGl0eS9zYW1sMi9wcm90b2NvbC9SZXNwb25zZS5odG1sLgogKiAoNikgU1NPVG9rZW4gLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4yL2FwaWRvY3MvY29tL2lwbGFuZXQvc3NvL1NTT1Rva2VuLmh0bWwuCiAqICg3KSBTQU1MMkV4Y2VwdGlvbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL2NvbW1vbi9TQU1MMkV4Y2VwdGlvbi5odG1sLgogKi8KCi8qCiAqIFRlbXBsYXRlL2RlZmF1bHQgc2NyaXB0IGZvciBTQU1MMiBJRFAgQWRhcHRlciBzY3JpcHRlZCBwbHVnaW4uCiAqLwoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2luZ2xlU2lnbk9uOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBpcyBoYXBwZW5pbmcgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlU2luZ2xlU2lnbk9uICgpIHsKICAgIHJldHVybiBmYWxzZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlQXV0aGVudGljYXRpb246CiAqICAgICBob3N0ZWRFbnRpdHlJZAogKiAgICAgcmVhbG0KICogICAgIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIKICogICAgIHJlcXVlc3QKICogICAgIGF1dGhuUmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIHJlcUlkCiAqICAgICBzZXNzaW9uCiAqICAgICByZWxheVN0YXRlCiAqICAgICBsb2dnZXIKICoKICogUmV0dXJuIC0gdHJ1ZSBpZiBicm93c2VyIHJlZGlyZWN0aW9uIGlzIGhhcHBlbmluZyBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVBdXRoZW50aWNhdGlvbiAoKSB7CiAgICByZXR1cm4gZmFsc2U7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZVNlbmRSZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgYXV0aG5SZXF1ZXN0CiAqICAgICByZXNwb25zZQogKiAgICAgcmVxSWQKICogICAgIHNlc3Npb24KICogICAgIHJlbGF5U3RhdGUKICogICAgIGxvZ2dlcgogKgogKiBSZXR1cm4gLSB0cnVlIGlmIGJyb3dzZXIgcmVkaXJlY3Rpb24gaGFwcGVuZWQgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlU2VuZFJlc3BvbnNlICgpIHsKICAgIHJldHVybiBmYWxzZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2lnblJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHNlc3Npb24KICogICAgIHJlbGF5U3RhdGUKICogICAgIHJlcwogKiAgICAgbG9nZ2VyCiAqLwpmdW5jdGlvbiBwcmVTaWduUmVzcG9uc2UgKCkgewp9CgovKgogKiBBdmFpbGFibGUgdmFyaWFibGVzIGZvciBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICByZXNwb25zZQogKiAgICAgZmF1bHRDb2RlCiAqICAgICBmYXVsdERldGFpbAogKiAgICAgbG9nZ2VyCiAqLwpmdW5jdGlvbiBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlICgpIHsKfQ==",
  },
  {
    "_id": "5561a45f-bf00-4ec5-bab4-f069bac9a38b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Copy an OTP generated by the "HOTP Generator" node to the IDM profile shared state so it can be patched to the user profile.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "CopyOTPToObjectAttributes",
    "script": "LyogQ29weU9UUFRvT2JqZWN0QXR0cmlidXRlcwogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBDb3B5IGFuIE9UUCBnZW5lcmF0ZWQgYnkgdGhlICJIT1RQIEdlbmVyYXRvciIgbm9kZSB0byB0aGUgSURNIHByb2ZpbGUgCiAqIHNoYXJlZCBzdGF0ZSBzbyBpdCBjYW4gYmUgcGF0Y2hlZCB0byB0aGUgdXNlciBwcm9maWxlLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqLwppZiAoc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikpIHsKICAgIHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpLnB1dCgiZGVzY3JpcHRpb24iLCBzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZCIpKQp9CmVsc2UgewogICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwge2Rlc2NyaXB0aW9uOiBzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZCIpfSk7Cn0Kb3V0Y29tZSA9ICJ0cnVlIjs=",
  },
  {
    "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Check Username",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Apple",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Apple Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICoKICogSW4gc29tZSBjb21tb24gZGVmYXVsdCBjb25maWd1cmF0aW9ucywgdGhlIGZvbGxvd2luZyBrZXlzIGFyZSByZXF1aXJlZCB0byBiZSBub3QgZW1wdHk6CiAqIHVzZXJuYW1lLCBnaXZlbk5hbWUsIGZhbWlseU5hbWUsIGVtYWlsLgogKgogKiBGcm9tIFJGQzQ1MTc6IEEgdmFsdWUgb2YgdGhlIERpcmVjdG9yeSBTdHJpbmcgc3ludGF4IGlzIGEgc3RyaW5nIG9mIG9uZSBvciBtb3JlCiAqIGFyYml0cmFyeSBjaGFyYWN0ZXJzIGZyb20gdGhlIFVuaXZlcnNhbCBDaGFyYWN0ZXIgU2V0IChVQ1MpLgogKiBBIHplcm8tbGVuZ3RoIGNoYXJhY3RlciBzdHJpbmcgaXMgbm90IHBlcm1pdHRlZC4KICovCgppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKU3RyaW5nIGVtYWlsID0gImNoYW5nZUBtZS5jb20iClN0cmluZyBzdWJqZWN0SWQgPSByYXdQcm9maWxlLnN1YgpTdHJpbmcgZmlyc3ROYW1lID0gIiAiClN0cmluZyBsYXN0TmFtZSA9ICIgIgpTdHJpbmcgdXNlcm5hbWUgPSBzdWJqZWN0SWQKU3RyaW5nIG5hbWUKCmlmIChyYXdQcm9maWxlLmlzRGVmaW5lZCgiZW1haWwiKSAmJiByYXdQcm9maWxlLmVtYWlsLmlzTm90TnVsbCgpKXsgLy8gVXNlciBjYW4gZWxlY3QgdG8gbm90IHNoYXJlIHRoZWlyIGVtYWlsCiAgICBlbWFpbCA9IHJhd1Byb2ZpbGUuZW1haWwuYXNTdHJpbmcoKQogICAgdXNlcm5hbWUgPSBlbWFpbAp9CmlmIChyYXdQcm9maWxlLmlzRGVmaW5lZCgibmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5pc05vdE51bGwoKSkgewogICAgaWYgKHJhd1Byb2ZpbGUubmFtZS5pc0RlZmluZWQoImZpcnN0TmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5maXJzdE5hbWUuaXNOb3ROdWxsKCkpIHsKICAgICAgICBmaXJzdE5hbWUgPSByYXdQcm9maWxlLm5hbWUuZmlyc3ROYW1lLmFzU3RyaW5nKCkKICAgIH0KICAgIGlmIChyYXdQcm9maWxlLm5hbWUuaXNEZWZpbmVkKCJsYXN0TmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5sYXN0TmFtZS5pc05vdE51bGwoKSkgewogICAgICAgIGxhc3ROYW1lID0gcmF3UHJvZmlsZS5uYW1lLmxhc3ROYW1lLmFzU3RyaW5nKCkKICAgIH0KfQoKbmFtZSA9IChmaXJzdE5hbWU/LnRyaW0oKSA/IGZpcnN0TmFtZSA6ICIiKSArIChsYXN0TmFtZT8udHJpbSgpID8gKChmaXJzdE5hbWU/LnRyaW0oKSA/ICIgIiA6ICIiKSArIGxhc3ROYW1lKSA6ICIiKQpuYW1lID0gICghbmFtZT8udHJpbSgpKSA/ICIgIiA6IG5hbWUKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCBzdWJqZWN0SWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIG5hbWUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIGVtYWlsKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgZmlyc3ROYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIGxhc3ROYW1lKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCB1c2VybmFtZSkpKQ==",
  },
  {
    "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
    "context": "AUTHENTICATION_CLIENT_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for client side Device Id (Match) Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Device Id (Match) - Client Side",
    "script": "",
  },
  {
    "_id": "b63981d8-cb73-4e47-8749-e58654dcaa31",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Phone Validator - Line Type",
    "script": "LyogUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFRoaXMgc2NyaXB0IHVzZXMgcGhvbmV2YWxpZGF0b3IuY29tIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBwaG9uZSBudW1iZXIgc3RvcmVkIGluIHRoZSB1c2VyIHByb2ZpbGUuCiAqIEdldCB5b3VyIG93biBBUEkgS2V5IGF0IGh0dHBzOi8vd3d3LnBob25ldmFsaWRhdG9yLmNvbQogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIElkZW50aWZ5IEV4aXN0aW5nIFVzZXIgbm9kZSBiZWZvcmUgaXQgaXMgYmVpbmcgY2FsbGVkLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIENFTEwgUEhPTkUKICogLSBMQU5ETElORQogKiAtIFZPSVAKICogLSBUT0xMLUZSRUUKICogLSBVTktOT1dOCiAqIC0gZmFpbGVkCiAqLwpsb2dnZXIud2FybmluZygiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBzdGFydCIpOwoKaWYgKGdldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidGVsZXBob25lTnVtYmVyIikgfHwgKHNoYXJlZFN0YXRlLmdldCgiX2lkIikgJiYgaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpLCAidGVsZXBob25lTnVtYmVyIikuaXRlcmF0b3IoKS5oYXNOZXh0KCkpKSB7CgogICAgLyogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqCiAgICAgKiBSRVBMQUNFIFdJVEggWU9VUiBPV04gQVpVUkUgQUQgU0VUVElOR1MKICAgICAqCiAgICAgICAqIFBob25lIFZhbGlkYXRvciAtIExpbmUgVHlwZSBBUEkgQ29uZmlndXJhdGlvbgogICAgICAgKiBHZXQgeW91ciBvd24gQVBJIEtleSBhdCBodHRwczovL3d3dy5waG9uZXZhbGlkYXRvci5jb20KICAgICAqLwogICAgdmFyIFBWX0FQSV9LRVkgPSAiODQ5ZDU2NGEtNTk0ZC00YmRlLWI2OTEtYWZlNWRkYWRkNTQ3IjsKICAgIC8qCiAgICAgKiBFTkQgU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqLwoKICAgICAgdmFyIFBWX0FQSV9UWVBFID0gImJhc2ljIjsKICAgIHZhciBQVl9BUElfUEhPTkUgPSBnZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoInRlbGVwaG9uZU51bWJlciIpIHx8IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInRlbGVwaG9uZU51bWJlciIpLml0ZXJhdG9yKCkubmV4dCgpOwogICAgdmFyIFBWX0FQSV9VUkkgPSAiaHR0cHM6Ly93d3cucGhvbmV2YWxpZGF0b3IuY29tL2FwaS92Mi9waG9uZXNlYXJjaD9hcGlrZXk9Ii5jb25jYXQoUFZfQVBJX0tFWSkuY29uY2F0KCImcGhvbmU9IikuY29uY2F0KFBWX0FQSV9QSE9ORSkuY29uY2F0KCImdHlwZT0iKS5jb25jYXQoUFZfQVBJX1RZUEUpOyAgICAKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ0dFVCcpOwogICAgcmVxdWVzdC5zZXRVcmkoUFZfQVBJX1VSSSk7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwoKICAgIGlmIChyZXN1bHRbIlN0YXR1c0NvZGUiXT09IjIwMCIpIHsKICAgICAgICBvdXRjb21lID0gcmVzdWx0WyJQaG9uZUJhc2ljIl1bIkxpbmVUeXBlIl07CiAgICB9IGVsc2UgewogICAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgIH0KICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBTdGF0dXNDb2RlID0gIi5jb25jYXQocmVzdWx0WyJTdGF0dXNDb2RlIl0pKTsKICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBTdGF0dXNNZXNzYWdlID0gIi5jb25jYXQocmVzdWx0WyJTdGF0dXNNZXNzYWdlIl0pKTsKICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBvdXRjb21lID0gIi5jb25jYXQob3V0Y29tZSkpOwp9IGVsc2UgewogICAgICBvdXRjb21lID0gImZhaWxlZCI7CiAgICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBObyB1c2VyIG9yIHBob25lIG51bWJlciBmb3VuZCEgVXNlICdJZGVudGlmeSBFeGlzdGluZyBVc2VyIG5vZGUgYmVmb3JlIHRoaXMgc2NyaXB0IHRvIHBvcHVsYXRlIHRoZSB1c2VyJ3MgX2lkIGluIHNoYXJlZCBzdGF0ZSBvciBwdXQgYSB2YWxpZCBjZWxsIHBob25lIG51bWJlciBpbnRvIHNoYXJlZFN0YXRlLm9iamVjdEF0dHJpYnV0ZXMudGVsZXBob25lTnVtYmVyISciKTsKICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBvdXRjb21lID0gIi5jb25jYXQob3V0Y29tZSkpOwp9CgovKgogKiBSZWFkIGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIGdldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lKSB7CiAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwogICAgaWYgKHN0b3JhZ2UpIHsKICAgICAgICAgIGlmIChzdG9yYWdlLmdldCkgewogICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikuZ2V0KG5hbWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gc3RvcmFnZS5uYW1lOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9",
  },
]
`;

exports[`ScriptOps updateScript() 1: Update script '3b2f6836-184c-4ee9-8a1d-557cb01837a5' 1`] = `
{
  "_id": "3b2f6836-184c-4ee9-8a1d-557cb01837a5",
  "_rev": "471611787",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "id=b672336b-41ef-428d-ae4a-e0c082875377,ou=user,ou=am-config",
  "creationDate": 1691983005575,
  "default": false,
  "description": "Check if username has already been collected.",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "id=b672336b-41ef-428d-ae4a-e0c082875377,ou=user,ou=am-config",
  "lastModifiedDate": 1691983005575,
  "name": "FrodoTestScript3",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;
